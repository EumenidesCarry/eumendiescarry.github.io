<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 超级块和 i-node</title>
    <link href="/2020/09/02/linux_super_inode_block/"/>
    <url>/2020/09/02/linux_super_inode_block/</url>
    
    <content type="html"><![CDATA[<h1 id="一、从物理磁盘到文件系统"><a href="#一、从物理磁盘到文件系统" class="headerlink" title="一、从物理磁盘到文件系统"></a>一、从物理磁盘到文件系统</h1><p>文件系统用来存储文件内容，文件属性和目录。且在 Linux 里万物为文件</p><p>Linux 文件系统中，是以块为单位存储信息，把硬盘分为三个部分：<strong>超级块（Super block）</strong>，<strong>i-节点表（inode table）</strong>，<strong>数据块（data block）</strong>。</p><p>要实现文件系统组件，首先需要了解 SimpleFS 磁盘布局。如前所述，此项目假定每个磁盘块的大小为4KB。磁盘的第一个块是描述文件系统其余部分布局的超级块。超级块之后的一定数量的块包含 inode 数据结构(即 i-node 表)。通常，磁盘块总数的10% 用作 inode 块(即保留用于存储 inode 表的块)。文件系统中剩余的块用作普通数据块，有时用作间接指针块，如下面的例子所示:</p><p><img src="/img/linux_super_inode_block/linux_inode_1.jpg"></p><p><strong>Magic</strong>: The first field is always the MAGIC_NUMBER or 0xf0f03410. The format routine places this number into the very first bytes of the superblock as a sort of filesystem “signature”. When the filesystem is mounted, the OS looks for this magic number. If it is correct, then the disk is assumed to contain a valid filesystem. If some other number is present, then the mount fails, perhaps because the disk is not formatted or contains some other kind of data.（第一个字段总是 MAGIC 数字或0xf0f03410。Format 例程将这个数字作为一种文件系统“签名”放在超级块的最初字节中。当文件系统被安装时，操作系统会寻找这个神奇的数字。如果是正确的，则假定磁盘包含有效的文件系统。如果存在其他数字，则挂载失败，可能是因为磁盘没有格式化或包含其他类型的数据。）</p><blockquote><p>参考资料：<a href="https://www3.nd.edu/~pbui/teaching/cse.30341.fa18/project06.html">https://www3.nd.edu/~pbui/teaching/cse.30341.fa18/project06.html</a></p></blockquote><h2 id="1-1-超级块（Super-block）"><a href="#1-1-超级块（Super-block）" class="headerlink" title="1.1 超级块（Super block）"></a>1.1 超级块（Super block）</h2><p>文件系统中第一个块被称为<strong>超级块</strong>。超级块记录了该 <strong>filesystem</strong> 的整体信息，其中包含：</p><ul><li>block 与 inode 的总量</li><li>未使用与已使用的 inode/block 数量</li><li>一个 block 与 一个 inode 的大小（block 在ext2 中为1，2，4k；inode 为 128bytes或256bytes）</li><li>filesystem 的挂载时间，最近一次写入资料的时间，最近一次检验磁盘（fsck）的时间等档案系统的相关信息</li><li>一个 valid bit 数值，若该文件系统已被挂载，则 valid bit 为0，若未被挂载，则 valid bit 为1</li></ul><p>一般来说， superblock 的大小为 <strong>1024bytes</strong>。</p><h2 id="1-2-i-节点表（inode-table）"><a href="#1-2-i-节点表（inode-table）" class="headerlink" title="1.2 i-节点表（inode table）"></a>1.2 i-节点表（inode table）</h2><p>超级块下一部分就是 <strong>i-节点表</strong> 了，该数据结构管理所有文件的属性。每个Linux文件或目录 (从技术角度讲，它们之间没有本质的区别，都为文件) 都有一个inode，而这个inode包含了所有文件的元数据 (也就是说，读取文件所需的管理数据都存储在inode中)。例如，inode包含存储文件的所有块的列表，该文件所有者信息、权限以及为该文件设置的所有其他属性。</p><p>所有i-节点都有相同的大小，并且i-节点表是这些结构的一个列表，文件系统中每个文件在该表中都有一个i-节点。</p><h3 id="1-2-1-inode-number"><a href="#1-2-1-inode-number" class="headerlink" title="1.2.1 inode number"></a>1.2.1 inode number</h3><p><strong>inode</strong> 是 inode table 中的一个条目，包含有关目录和常规文件的元数据。inode是传统Unix风格文件系统 (比如ext3/ext4) 上的数据结构。Linux扩展文件系统 (如ext2/ext3) 维护了一个inode的数组：inode table。inode table 包含该文件系统中所有文件的列表。inode table 中的各个inode项具有唯一的编号 (该文件系统唯一)，即inode number。深入inode数据结构，我们发现它存储了如下信息：</p><ul><li>文件类型： 普通文件，目录，管道等等</li><li>权限：可读，可写，可执行(read/write/excute)</li><li>链接数：链接到该inode的硬链接数</li><li>User ID：文件所有者</li><li>Group ID：所有者组ID</li><li>文件大小</li><li>时间信息：创建时间或状态改变时间（ctime）、最近修修改时间（mtime）、最近读取时间（atime）</li><li>属性：比如，不可改变位</li><li>访问控制列表</li><li>文件数据存储的实际位置</li><li>其他元数据</li></ul><p><font color=red>注意：inode中不存储文件名数据，文件名存储在目录</font></p><p><strong>特性：</strong></p><ul><li>每个 inode 大小均固定为 128bytes（ext4和xfs可设定到256bytes）</li><li>每个档案仅会占用一个 inode</li><li>所以，文件系统能够创建的文件数与 inode 的数量有关</li><li>系统读取档案时需要先找到 inode，并分析 inode 所记录的权限与使用者是否相符，符合才能够开始实际读取 data blcok 里文件的内容</li></ul><h2 id="1-3-数据块（data-block）"><a href="#1-3-数据块（data-block）" class="headerlink" title="1.3 数据块（data block）"></a>1.3 数据块（data block）</h2><p>文件系统的第三个部分就是<strong>数据块区</strong>。文件的本身内容就保存在该区域。磁盘上所有的块大小都一样，如在<strong>Ext2档案系统中所支持的block大小有1K, 2K及4K三种</strong>。格式化时block的大小就固定了，且每个block都有编号，以方便inode的记录。<font color=red>如果文件包含超过一个数据块的内容，则文件内容会存放在多个磁盘块中</font>。</p><h1 id="二、文件及目录的创建过程"><a href="#二、文件及目录的创建过程" class="headerlink" title="二、文件及目录的创建过程"></a>二、文件及目录的创建过程</h1><h2 id="2-1-文件创建过程"><a href="#2-1-文件创建过程" class="headerlink" title="2.1 文件创建过程"></a>2.1 文件创建过程</h2><p>使用 <code>touch filename</code> 创建文件：</p><p>文件的属性和文件的内容：<font color=red>内核将文件的内容放入data block，将文件的属性存放在 i-节点，文件名存放在目录</font>。</p><p>下图显示了创建一个文件的例子，该文件占用了3个数据块：</p><p><img src="/img/linux_super_inode_block/linux_inode_2.jpg"></p><p>步骤：</p><ol><li><p>文件属性存储：内核找到一块空的 i-节点，该节点 i-number 为47。内核把该文件的信息记录其中，这些信息详见 1.2.1 inode number</p></li><li><p>文件内容的存储：由于该文件需要3个数据块，内核需要在自由块列表中找到3个自由块。</p></li><li><p>记录分配情况，数据保存到了3个数据块中，所以需要记录下来。分配情况记录在 i-节点中的磁盘序号列表里。这3个编号分别放在最开始的3个位置</p></li><li><p>添加文件名到目录，新的文件名为 filename，内核将文件的入口（47，filename）添加到目录文件里。文件名和 i-节点号之间的对应关系将文件名和文件的内容属性🔗起来，找到文件名就找到了文件的 i-节点号，通过 i-节点号就能找到文件的属性及内容</p></li></ol><h2 id="2-2-目录创建过程"><a href="#2-2-目录创建过程" class="headerlink" title="2.2 目录创建过程"></a>2.2 目录创建过程</h2><p>目录也是文件，内容比较特殊，它包含了文件名字列表，而列表一般包含两个部分：<strong>i-节点</strong> 和 <strong>文件名</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 CentOS 7 下 搭建 Zabbix 5.0 LTS 日志</title>
    <link href="/2020/08/27/zabbix_install/"/>
    <url>/2020/08/27/zabbix_install/</url>
    
    <content type="html"><![CDATA[<h1 id="YUM-安装"><a href="#YUM-安装" class="headerlink" title="YUM 安装"></a>YUM 安装</h1><h2 id="1-关闭防火墙和-selinux-，重启"><a href="#1-关闭防火墙和-selinux-，重启" class="headerlink" title="1.关闭防火墙和 selinux ，重启"></a>1.关闭防火墙和 selinux ，重启</h2><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span>[root@localhost ~]<span class="hljs-comment"># systemctl disable firewalld</span>[root@localhost ~]<span class="hljs-comment"># init 6</span></code></pre><h2 id="2-安装-zabbix-rpm-源，替换成-阿里云的-zabbix-源"><a href="#2-安装-zabbix-rpm-源，替换成-阿里云的-zabbix-源" class="headerlink" title="2.安装 zabbix rpm 源，替换成 阿里云的 zabbix 源"></a>2.安装 zabbix rpm 源，替换成 阿里云的 zabbix 源</h2><p><a href="https://mirrors.aliyun.com/">阿里云源</a></p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span>[root@localhost ~]<span class="hljs-comment"># sed -i &#x27;s@http://repo.zabbix.com@https://mirrors.aliyun.com/zabbix@&#x27; /etc/yum.repos.d/zabbix.repo</span>[root@localhost ~]<span class="hljs-comment"># yum clean all</span></code></pre><h2 id="3-安装-zabbix-server-和-agent"><a href="#3-安装-zabbix-server-和-agent" class="headerlink" title="3.安装 zabbix server 和 agent"></a>3.安装 zabbix server 和 agent</h2><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum install zabbix-server-mysql zabbix-agent -y</span></code></pre><h2 id="4-安装-Software-Collections，便于后续安装高版本的-php，默认-yum-安装的-php-版本为-5-4-过低"><a href="#4-安装-Software-Collections，便于后续安装高版本的-php，默认-yum-安装的-php-版本为-5-4-过低" class="headerlink" title="4.安装 Software Collections，便于后续安装高版本的 php，默认 yum 安装的 php 版本为 5.4 过低"></a>4.安装 Software Collections，便于后续安装高版本的 php，默认 yum 安装的 php 版本为 5.4 过低</h2><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum install centos-release-scl -y</span></code></pre><p>启用 zabbix 前端源，修改 vi /etc/yum.repos.d/zabbix.repo，将 <strong>[zabbix-frontend]</strong> 下的 <strong>enabled=1</strong></p><h2 id="5-安装-zabbix-前端和相关环境"><a href="#5-安装-zabbix-前端和相关环境" class="headerlink" title="5.安装 zabbix 前端和相关环境"></a>5.安装 zabbix 前端和相关环境</h2><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum install zabbix-web-mysql-scl zabbix-apache-conf-scl -y</span></code></pre><h2 id="6-yum-安装-centos7-默认的-mariadb-数据库并配置数据库"><a href="#6-yum-安装-centos7-默认的-mariadb-数据库并配置数据库" class="headerlink" title="6.yum 安装 centos7 默认的 mariadb 数据库并配置数据库"></a>6.yum 安装 centos7 默认的 mariadb 数据库并配置数据库</h2><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum install mariadb-server -y</span><span class="hljs-comment">#启动数据库，并配置开机自动启动</span>[root@localhost ~]<span class="hljs-comment"># systemctl enable --now mariadb</span><span class="hljs-comment">#使用以下命令初始化 mariadb 并配置 root 密码</span>[root@localhost ~]<span class="hljs-comment"># mysql_secure_installation </span>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!In order to <span class="hljs-built_in">log</span> into MariaDB to secure it, we<span class="hljs-string">&#x27;ll need the current</span><span class="hljs-string">password for the root user.  If you&#x27;</span>ve just installed MariaDB, andyou haven<span class="hljs-string">&#x27;t set the root password yet, the password will be blank,</span><span class="hljs-string">so you should just press enter here.</span><span class="hljs-string"></span><span class="hljs-string">Enter current password for root (enter for none): root123.</span><span class="hljs-string"></span><span class="hljs-string">#使用 root 用户进入 mysql，并建立 zabbix 数据库，注意数据库编码</span><span class="hljs-string">[root@localhost ~]# mysql -u root -p </span><span class="hljs-string">Enter password: </span><span class="hljs-string">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><span class="hljs-string">Your MariaDB connection id is 11</span><span class="hljs-string">Server version: 5.5.65-MariaDB MariaDB Server</span><span class="hljs-string"></span><span class="hljs-string">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><span class="hljs-string"></span><span class="hljs-string">Type &#x27;</span><span class="hljs-built_in">help</span>;<span class="hljs-string">&#x27; or &#x27;</span>\h<span class="hljs-string">&#x27; for help. Type &#x27;</span>\c<span class="hljs-string">&#x27; to clear the current input statement.</span><span class="hljs-string"></span><span class="hljs-string">MariaDB [(none)]&gt; </span><span class="hljs-string">create database zabbix character set utf8 collate utf8_bin;</span><span class="hljs-string">create user zabbix@localhost identified by &#x27;</span>password<span class="hljs-string">&#x27;;</span><span class="hljs-string">grant all privileges on zabbix.* to zabbix@localhost;</span><span class="hljs-string">quit;</span><span class="hljs-string"></span><span class="hljs-string">#使用以下命令导入 zabbix 数据库，zabbix 数据库用户为 zabbix，密码为 password</span><span class="hljs-string">[root@localhost ~]# zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><span class="hljs-string"></span><span class="hljs-string">#修改 zabbix server 配置文件vi /etc/zabbix/zabbix_server.conf 里的数据库密码</span><span class="hljs-string">DBPassword=password</span><span class="hljs-string"></span><span class="hljs-string">#修改 zabbix 的 php 配置文件vi /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf 里的时区，改成 Asia/Shanghai</span><span class="hljs-string">php_value[date.timezone] = Asia/Shanghai</span><span class="hljs-string"></span><span class="hljs-string">#启动相关服务，并配置开机自动启动</span><span class="hljs-string">[root@localhost ~]# systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><span class="hljs-string">[root@localhost ~]# systemctl enable zabbix-server zabbix-agent httpd rh-php72-php-fpm</span></code></pre><h2 id="7-使用浏览器访问-http-ip-zabbix-即可访问-zabbix-的-web-页面"><a href="#7-使用浏览器访问-http-ip-zabbix-即可访问-zabbix-的-web-页面" class="headerlink" title="7.使用浏览器访问 http://ip/zabbix 即可访问 zabbix 的 web 页面"></a>7.使用浏览器访问 <a href="http://ip/zabbix">http://ip/zabbix</a> 即可访问 zabbix 的 web 页面</h2>]]></content>
    
    
    <categories>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDS VSP 双盘故障（存在 pin data）</title>
    <link href="/2020/08/24/HDS_VSP_PIN_DATA/"/>
    <url>/2020/08/24/HDS_VSP_PIN_DATA/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>接客户邮件，HDS VSP 有故障，到现场查看，有块硬盘故障，操作界面发现 Pinned Track 闪烁，点开如下图：</p><p><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_pin.jpg"></p><p>未理睬，接下来正常换故障硬盘，故障硬盘为 HDD24-08：</p><p><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_2.jpg"></p><p>换完硬盘后一切顺利，故障盘也有回拷进度条：</p><p><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_3.jpg"></p><h1 id="告警信息"><a href="#告警信息" class="headerlink" title="告警信息"></a>告警信息</h1><p>第二天，客户电话联系，HDS VSP 有故障，到现场查看为昨天更换的硬盘位，硬盘状态为 <strong>Blocked</strong>：</p><p><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_4.jpg"></p><p>首先以为是备件硬盘质量问题，相继更换不同批次备件5次，故障依旧，无法从热备盘 <strong>HDD054-0F</strong> 回拷数据，查看 SIM 信息，发现都是回拷不到一小时中断</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>经原厂工程师分析故障原因：<br>7月23日存储硬盘 <strong>HDD024-08</strong> 完全故障，再通过RAID机制向热备盘 <strong>HDD54-0F</strong> 恢复数据的过程中发现同一RAID组中的 <strong>HDD020-08</strong> 硬盘故障，导致有部分数据无法恢复到 <strong>HDD54-0F</strong>，在00:27这个数据lun产生了pin data。此RAID组发生了两块磁盘同时故障的问题，导致RAID保护机制失效。</p><p><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_5.jpg"></p><p>当时 <strong>HDD20-08</strong> SIM 信息：<br><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_6.jpg"></p><p><strong>Pin data</strong> 信息：</p><p><img src="/img/HDS_VSP/HDS_VSP_PIN_DATA_7.jpg"></p><h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>备份 lun 00:27 所涉及的数据进行备份</li><li>单独对 lun 00:27 进行备份</li></ol><p>?<br>删除操作</p><h2 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h2><ol><li>开启存储 MODE MODE 模式，开启方式 ?，密码为 mode</li><li>进入 <strong>install</strong> —&gt; <strong>change config？</strong> ，将 <strong>(SOMs)System option modes</strong> 改为 Mode 22</li><li>在存储中将 <strong>HDD20-08</strong> 硬盘上的数据拷到 Spare disk<ul><li>步骤：Mantenance –&gt; 选中硬盘 HDD20-08 –&gt; Other –&gt; Spare Disk</li><li>此时，提示 Pinned Track exists. Do you want to stop this process?</li><li>点击 No，输入密码 exist-pintrack</li></ul></li><li>等待 Copy end，更换 HDD20-08 硬盘并回拷数据</li><li>检查是否产生新的 pin data，如有则需要再次检查系统日志</li><li>没有产生新的 pin data，则关闭 Mode 22 后格式化 lun 00:27。格式化完成后原本的 pin data 消失</li></ol><h1 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h1>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP 地址发生冲突导致网络故障，排查解决</title>
    <link href="/2020/08/18/ip_trouble/"/>
    <url>/2020/08/18/ip_trouble/</url>
    
    <content type="html"><![CDATA[<h1 id="1、故障摘要"><a href="#1、故障摘要" class="headerlink" title="1、故障摘要"></a><strong>1、故障摘要</strong></h1><p>一般 IP 冲突（大多为自动分配地址的 PC 入网，与现有固定 IP 发生冲突）造成设备无法上线或者不断上线和下线，网络推流死机等现象</p><h1 id="2、故障具体情况"><a href="#2、故障具体情况" class="headerlink" title="2、故障具体情况"></a><strong>2、故障具体情况</strong></h1><p>大多为自动分配地址的 PC 入网，与现有固定 IP 发生冲突</p><h1 id="3、故障分析及处理"><a href="#3、故障分析及处理" class="headerlink" title="3、故障分析及处理"></a><strong>3、故障分析及处理</strong></h1><h2 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h2><p>将电脑接入局域网，在终端输入：<code>arp -a</code> ，查看局域网内所有的 IP，当看到有两个 IP 一样的时候，就可以确定冲突的 IP</p><h2 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h2><p>当知道冲突 IP 后，用<code>nbtstat -a ip</code>(ip 为冲突 ip)命令，查看冲突 IP 的设备信息，找到该设备</p><h2 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h2><p>修改该设备 IP 信息</p><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a><strong>4、总结</strong></h1>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 运维初级学习笔记</title>
    <link href="/2020/08/18/linux_maintenance/"/>
    <url>/2020/08/18/linux_maintenance/</url>
    
    <content type="html"><![CDATA[<h1 id="了解-Linux"><a href="#了解-Linux" class="headerlink" title="了解 Linux"></a>了解 Linux</h1><h2 id="Linux-的基本原则"><a href="#Linux-的基本原则" class="headerlink" title="Linux 的基本原则"></a>Linux 的基本原则</h2><ol><li>由目的单一的小程序组成；组合小程序完成复杂任务</li><li>一切皆文件</li><li>尽量避免捕获用户接口</li><li>配置文件保存为纯文本格式</li></ol><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><pre><code class="hljs bash">Graphic User InterfaceWindowsX-Window    Gnome: C    RDE: C++    XFace</code></pre><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><pre><code class="hljs bash">Command-line Interfaceshbashcshzshkshkshtcsh命令提示符，prompt，bash(shell)    <span class="hljs-comment">#: root</span>    $: 普通用户命令格式    命令   选项     参数            选项：                短选项：-                    多个选项可以组合：ls -a -l = ls -al                长选项：--            参数：命令作用的对象```  <span class="hljs-comment">## su(SwitchUser，切换用户)</span>```NAME       su - run a <span class="hljs-built_in">command</span> with substitute user and group ID[root@localhost ~]<span class="hljs-comment"># su [-l] 用户名</span></code></pre><h2 id="API-Application-program-Interface"><a href="#API-Application-program-Interface" class="headerlink" title="API(Application program Interface)"></a>API(Application program Interface)</h2><p> .so 文件：Shared Object 动态链接库，库文件，应用程序所需要的</p><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><pre><code class="hljs bash">ls    -l：长格式        文件类型：            -：普通文件（file）            d：目录文件（directory）            b：块设备文件（block）            c：字符设备文件（character）            l：符号链接文件（symbolic link file）            p：命令管道文件（pipe）            s：套接字文件（socket）[root@localhost ~]<span class="hljs-comment"># ls -l /dev</span>crw-------. 1 root root     10, 235 7月  20 18:39 autofsdrwxr-xr-x. 2 root root         200 8月   9 16:36 blocklrwrwxxrwx. 1 root root           3 7月  20 18:39 cdrom -&gt; sr0brw-rw----. 1 root cdrom    11,   0 7月  20 18:39 sr0srw-rw-rw-. 1 root root           0 7月  20 18:39 <span class="hljs-built_in">log</span>    -a：显示以 . 开头的隐藏文件    -i：index node，inode        [root@localhost ~]<span class="hljs-comment"># ls -li</span>        34051578 <span class="hljs-built_in">test</span>    -R：递归（recursive）显示</code></pre><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>：change directory    <span class="hljs-built_in">cd</span> ~USERNAME：进入指定用户的 home 目录    <span class="hljs-built_in">cd</span> -：在当前目录和前一次所在目录之间来回切换</code></pre><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>显示指定命令属于哪种类型<br>内置命令（shell 内置）：内部的，内建<br>外部命令：在文件系统的某个路径下有一个命令名称相应的可执行文件</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># type cd</span><span class="hljs-built_in">cd</span> 是 shell 内嵌        <span class="hljs-comment">#内置命令</span>[root@localhost ~]<span class="hljs-comment"># which ls</span><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span>  <span class="hljs-comment">#外部命令</span>        /usr/bin/ls</code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><pre><code class="hljs bash">显示环境变量[root@localhost ~]<span class="hljs-comment"># printevn</span>PATH=/usr/<span class="hljs-built_in">local</span>/sbin:/usr/<span class="hljs-built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</code></pre><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li>&lt;&gt;：必选项</li><li>[]：可选项</li><li>…：可多次出现</li><li>|：多选一</li><li>{}：分组</li></ul><h1 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h1><h2 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h2><p>rootfs：根文件系统</p><pre><code class="hljs bash">/boot：系统启动相关文件，如内核、initrd 以及 grub(bootloader)/dev：设备文件        块设备：随机访问，将数据分为块，称为数据块，如硬盘        字符设备：线性访问，按字符为单位        设备号：主设备号（major）和次设备号（minor）/etc：配置文件/lib64：库文件    静态库    动态库：.so(shared object)    /modules：内核模块文件/opt：可选目录/proc：伪文件系统，内核映射文件/sys：伪文件系统，跟硬件设备相关的属性映射文件/tmp：临时文件/var：可变化文件，如存放日志文件/bin：可执行文件，用户命令/sbin：管理命令/usr：Unix Software Resource(shared,read-only),操作系统软件资源所放置的目录,所有系统默认的软件都会放置到/usr</code></pre><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li>touch：change file timestamps<br>  -a：修改访问时间<br>  -m：修改更改时间<br>  -t：修改到指定时间</li><li>stat：显示文件或文件系统状态</li></ul><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># stat test</span>  File: ‘<span class="hljs-built_in">test</span>’  Size: 4             Blocks: 8          IO Block: 4096   regular fileDevice: fd00h/64768d  Inode: 34051578    Links: 1Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)Context: unconfined_u:object_r:admin_home_t:s0Access: 2020-08-18 23:29:02.280000000 +0800Modify: 2020-08-18 23:26:58.260000000 +0800Change: 2020-08-18 23:29:02.280000000 +0800 Birth: -</code></pre><ul><li>cp</li></ul><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><ul><li>ls</li><li>cd</li><li>pwd</li><li>mkdir：创建空目录<br>  -p：依次创建层级目录，如 mkdir -p /1/2/3<br>  -v：显示详情</li></ul><pre><code class="hljs bash"><span class="hljs-comment">#例1：在目录下创建多个目录，如在空目录 /mnt/ 下创建 /mnt/test/x/m,/mnt/test/y</span>[root@localhost ~]<span class="hljs-comment"># mkdir -pv /mnt/test/&#123;x/m,y&#125;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test/x&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test/x/m&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test/y&quot;</span><span class="hljs-comment">#例2：在目录下创建 a_b,a_c,d_b,d_C 文件</span>[root@localhost ~]<span class="hljs-comment"># mkdir -pv /mnt/test2/&#123;a,d&#125;_&#123;b,c&#125;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test2&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test2/a_b&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test2/a_c&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test2/d_b&quot;</span>mkdir: 已创建目录 <span class="hljs-string">&quot;/mnt/test2/d_c&quot;</span></code></pre><ul><li>rmdir：删除空目录</li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><pre><code class="hljs bash">cut：    -d：指定字段分隔符，默认是空格    -f：指定要显示的字段        -f 1，3 显示字段1和3的字符        -f 1-3 显示字段1到3的字符</code></pre><h3 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h3><pre><code class="hljs bash"><span class="hljs-built_in">history</span>：查看历史命令    -c：清空命令历史    -d OFFSET [n]：删除指定位置的命令    -w：保存命令历史至历史文件中!n：执行命令历史的第N条命令</code></pre><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>根据模式，搜索文本，并将符合模式的文本行显示出来<br>Pattern：文本字符和正则表达式的元字符组合而成的匹配条件</p><pre><code class="hljs bash">grep [OPTIONS] PATTERN [FILE...]        -i：忽略大小字母        -v：显示没有被匹配到的行        -o：只显示被模式匹配到的字符串        -E：使用扩展正则表达式        -A <span class="hljs-comment">#：显示匹配到的后#行</span>        -B <span class="hljs-comment">#：显示匹配到的前#行</span>        -C <span class="hljs-comment">#：显示匹配到的上下#行</span></code></pre><h3 id="正则表达式（REGular-EXPression-REGEXP）"><a href="#正则表达式（REGular-EXPression-REGEXP）" class="headerlink" title="正则表达式（REGular EXPression, REGEXP）"></a>正则表达式（REGular EXPression, REGEXP）</h3><p><strong>元字符：</strong></p><p>.：匹配其前面的字符任意次</p><p>[]：匹配指定范围内的任意单字符</p><p>[^]：匹配指定范围外的任意单个字符</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[[:alpha:]]</td><td align="left">任何字母</td></tr><tr><td align="left">[[:digit:]]</td><td align="left">任何数字</td></tr><tr><td align="left">[[:alnum:]]</td><td align="left">任何字母和数字</td></tr><tr><td align="left">[[:space:]]</td><td align="left">任何空白字符</td></tr><tr><td align="left">[[:upper:]]</td><td align="left">任何大写字母</td></tr><tr><td align="left">[[:lower:]]</td><td align="left">任何小写字母</td></tr><tr><td align="left">[[:punct:]]</td><td align="left">任何标点符号</td></tr><tr><td align="left">[[:xdigit:]]</td><td align="left">任何16进制的数字，相当于[0-9a-fA-F]</td></tr></tbody></table><p><strong>匹配次数：</strong></p><pre><code class="hljs bash">*：匹配其前面的字符任意次\?：匹配其前面的的字符1次或0次\&#123;m,n\&#125;：匹配其前面的字符至少m次，至多n次</code></pre><p><strong>位置锚定：</strong></p><pre><code class="hljs bash">^：锚定行首，此字符后面的任意内容必须出现在行首[root@localhost learing]<span class="hljs-comment"># cat test_grep_fenzu.txt </span> 1space  2space   3space<span class="hljs-comment">#显示行首至少有一个空白字符</span>[root@localhost learing]<span class="hljs-comment"># grep -E &#x27;^[[:space:]]+&#x27; test_grep_fenzu.txt </span> 1space  2space   3space$：锚定行尾，此字符后面的任意内容必须出现在行尾^$：空白行\&lt;或\b：锚定词首，其后面的任意字符必须作为单次首部出现\&gt;或\b：锚定词尾，其前面的任意字符必须作为单次尾部出现<span class="hljs-comment">#使用 \&lt;()\&gt; 找出1-255的数字</span>[root@localhost learing]<span class="hljs-comment"># ifconfig | grep -E &#x27;\&lt;([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\&gt;&#x27;</span>        inet 192.168.2.22  netmask 255.255.255.0  broadcast 192.168.2.255        inet6 fd2a:2d84:d032:0:650f:b141:8e42:b014  prefixlen 64  scopeid 0x0&lt;global&gt;        inet6 fe80::3416:22f7:9cb1:88ba  prefixlen 64  scopeid 0x20&lt;link&gt;        inet6 fd2a:2d84:d032::778  prefixlen 128  scopeid 0x0&lt;global&gt;        RX packets 976525  bytes 271923354 (259.3 MiB)        TX packets 884321  bytes 110229028 (105.1 MiB)<span class="hljs-comment">#查找 ip 地址</span>[root@localhost learing]<span class="hljs-comment"># ifconfig | grep -E &#x27;(\&lt;([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\&gt;\.)&#123;3&#125;\&lt;([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\&gt;&#x27;</span>        inet 192.168.2.22  netmask 255.255.255.0  broadcast 192.168.2.255        inet 127.0.0.1  netmask 255.0.0.0</code></pre><p><strong>分组：</strong></p><pre><code class="hljs bash">\(\)    \(ab\)：ab为一整体出现[root@localhost learing]<span class="hljs-comment"># cat test_grep_fenzu.txt </span>catCatchinacCChina 1space  2space   3space<span class="hljs-comment">#not use ()</span>[root@localhost learing]<span class="hljs-comment"># grep -E &#x27;C|cat&#x27; test_grep_fenzu.txt </span>catCatCChina<span class="hljs-comment">#use ()</span>[root@localhost learing]<span class="hljs-comment"># grep -E &#x27;(C|c)at&#x27; test_grep_fenzu.txt </span>catCat</code></pre><h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p><strong>变量算法：</strong></p><p>$[$A-$B]：变量 A 减去 变量 B</p><h2 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h2><p>${VAR_NAME}，一般花括号可省略，某些情况无法省略</p><pre><code class="hljs bash"><span class="hljs-comment">#无法省略</span>[root@localhost learing]<span class="hljs-comment"># ANIMAL=pig</span>[root@localhost learing]<span class="hljs-comment"># echo &quot;there are some $ANIMALs.&quot;</span>there are some .[root@localhost learing]<span class="hljs-comment"># echo &quot;there are some $&#123;ANIMAL&#125;s.&quot;</span>there are some pigs.</code></pre><h2 id="程序执行返回"><a href="#程序执行返回" class="headerlink" title="程序执行返回"></a>程序执行返回</h2><p>程序执行返回状态码（0-255）：</p><ul><li>0：正确执行</li><li>1-255：错误执行，1、2、127 为系统预留</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="条件测试类型"><a href="#条件测试类型" class="headerlink" title="条件测试类型"></a>条件测试类型</h3><ul><li>整数测试</li><li>字符测试</li><li>文件测试</li></ul><h3 id="条件测试表达式"><a href="#条件测试表达式" class="headerlink" title="条件测试表达式"></a>条件测试表达式</h3><ul><li>[ expression ]</li><li>[[ expression]]</li></ul><h3 id="命令逻辑关系"><a href="#命令逻辑关系" class="headerlink" title="命令逻辑关系"></a>命令逻辑关系</h3><p><strong>逻辑与：&amp;&amp;</strong></p><ul><li>第一个条件为假时，第二个条件就不用再判断，最总结果为假</li><li>第一个条件为真是，还需要判断第二个条件</li></ul><p>例子：</p><pre><code class="hljs bahs">#判断用户 user1 是否存在，不存在就增加 user1 用户! id user1 &amp;&amp; useradd user1</code></pre><p><strong>逻辑或：||</strong><br>有个真，就是真<br>例子：</p><pre><code class="hljs bash"><span class="hljs-comment">#判断用户 user1 存在，就显示用户已存在，否则，就添加用户</span>id user1 &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;user1 exists.&#x27;</span> || useradd user1<span class="hljs-comment">#判断用户 user1 不存在，就添加用户，否则，显示已存在</span>! id user1 &amp;&amp; useradd user1 || <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;user1 exists.&#x27;</span></code></pre><h3 id="shell-算术运算"><a href="#shell-算术运算" class="headerlink" title="shell 算术运算"></a>shell 算术运算</h3><ol><li>let 算数表达式<ul><li>let C=$A+$B</li></ul></li><li>$[算术表达式]<ul><li>$[$A-$B]</li></ul></li><li>$((算术表达式))<ul><li>$((算术表达式))</li></ul></li></ol><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>退出脚本</p><h3 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h3><ul><li>-e File：测试文件是否存在</li><li>-f File：测试文件是否为普通文件</li><li>-d File：测试指定目录是否为目录</li><li>-r File：测试当前用户对指定文件是否有可读权限</li><li>-w</li><li>-x</li></ul><h2 id="sed-Stream-EDitor"><a href="#sed-Stream-EDitor" class="headerlink" title="sed (Stream EDitor)"></a>sed (Stream EDitor)</h2><p><font color=red>默认不编辑原文件，仅对模式空间的数据做处理</font></p><pre><code class="hljs bash">sed [options] <span class="hljs-string">&#x27;AddressCommand&#x27;</span> file1 [file2 ...]    -n：静默模式，不再默认显示模式空间的内容    -i：直接修改原文件    -e script：可以同时执行多个脚本    -f filename：读取 filename 里的脚本处理 sed /path/to/sed_script 作用file    -r：表示使用扩展正则表达式</code></pre><p><strong>Address</strong></p><ol><li><p>StartLine,EndLine: </p><ul><li>1,100 ：1到100行</li><li>$：最后一行</li></ul></li><li><p>/模式定义/：/^root/</p></li><li><p>/pattern1/,/pattern2/：第一次被 pattern1 匹配到的行，至第一次被 pattern2 匹配到的行结束，中中间的行</p></li><li><p>LineNumber：指定的行数</p></li><li><p>StartLine，+N：从 StartLine 开始，向后的 N行</p></li></ol><p><strong>Command</strong></p><ol><li><p>d：删除符合条件的行</p><ul><li>sed ‘1,3d’ /etc/fstab ：删除 fstab 的第 1 到 第 3 行</li><li>sed ‘/oot/d’ /etc/fstab ：删除包含 oot 的行</li></ul></li><li><p>p：显示符合条件的行</p><ul><li>sed -n ‘/^//a#sed test’ /etc/fstab <pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed -n &#x27;/^\//p&#x27; /etc/fstab </span>/dev/mapper/centos-root /                       xfs     defaults        0 0/dev/mapper/centos-swap swap                    swap    defaults        0 0</code></pre></li></ul></li><li><p>a \string：在指定的行后面追加新行，内容为 string</p><ul><li>sed ‘/^//a#sed test’ /etc/fstab ：在 / 开头的行下行添加一行内容为 #sed test 的行</li><li>\n 可以换行<pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed &#x27;/^\//a\#sed test&#x27; /etc/fstab </span><span class="hljs-comment">#</span><span class="hljs-comment"># /etc/fstab</span><span class="hljs-comment"># Created by anaconda on Sat Jun  6 20:09:07 2020</span><span class="hljs-comment">#</span><span class="hljs-comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span><span class="hljs-comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span><span class="hljs-comment">#</span>/dev/mapper/centos-root /                       xfs     defaults        0 0<span class="hljs-comment">#sed test</span>UUID=39b6f37f-531f-41c2-a498-dbe216fcfc4b /boot                   xfs     defaults        0 0/dev/mapper/centos-swap swap                    swap    defaults        0 0<span class="hljs-comment">#sed test</span></code></pre></li></ul></li><li><p>i \string：在指定的行前面添加新行，内容为 string</p></li><li><p>r filename：将指定文件的内容添加至符合条件的行处</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/issue</span>\SKernel \r on an \m[root@localhost ~]<span class="hljs-comment"># sed &#x27;1r /etc/issue&#x27; /etc/fstab </span>\SKernel \r on an \m<span class="hljs-comment">#</span><span class="hljs-comment"># /etc/fstab</span><span class="hljs-comment"># Created by anaconda on Sat Jun  6 20:09:07 2020</span><span class="hljs-comment">#</span><span class="hljs-comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span><span class="hljs-comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span><span class="hljs-comment">#</span>/dev/mapper/centos-root /                       xfs     defaults        0 0UUID=39b6f37f-531f-41c2-a498-dbe216fcfc4b /boot                   xfs     defaults        0 0/dev/mapper/centos-swap swap                    swap    defaults        0 0</code></pre></li><li><p>w filename：将指定范围内的内容另存至指定的文件中</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed -n &#x27;/^\//w /root/mount.txt&#x27; /etc/fstab </span>[root@localhost ~]<span class="hljs-comment"># cat /root/mount.txt </span>/dev/mapper/centos-root /                       xfs     defaults        0 0/dev/mapper/centos-swap swap                    swap    defaults        0 0</code></pre></li><li><p>s/pattern/string/[修饰符]：查找并替换，替换每行中第一次被匹配到的字符串</p></li></ol><ul><li>修饰符<ul><li>g ：全局替换</li><li>i：忽略大小写</li></ul></li><li>s///,s###,s@@@：可使用其他分隔符</li></ul><pre><code class="hljs bash"><span class="hljs-comment">#查找 root 替换成 ROOT，查找能够用正则表达式</span>[root@localhost ~]<span class="hljs-comment"># sed &#x27;s/root/ROOT/&#x27; /etc/fstab </span>/dev/mapper/centos-ROOT /                       xfs     defaults        0 0UUID=39b6f37f-531f-41c2-a498-dbe216fcfc4b /boot                   xfs     defaults        0 0/dev/mapper/centos-swap swap                    swap    defaults        0 0</code></pre><ol start="8"><li>更改字符串</li></ol><pre><code class="hljs bash"><span class="hljs-comment">#将字符带有 l..k 后面添加 r</span>[root@localhost learing]<span class="hljs-comment"># cat sed.txt </span>likelove<span class="hljs-comment">#第一种，用 &amp;</span>[root@localhost learing]<span class="hljs-comment"># sed &#x27;s/l..e/&amp;r/&#x27; sed.txt </span>likerlover<span class="hljs-comment">#第二种，用分组</span>[root@localhost learing]<span class="hljs-comment"># sed &#x27;s/\(l..e\)/\1r/&#x27; sed.txt </span>likerlover</code></pre><ol start="9"><li>删除每行开头的空格</li></ol><pre><code class="hljs bash"><span class="hljs-comment">#可删除多个空格</span>[root@localhost learing]<span class="hljs-comment"># history | sed &#x27;s/^[[:space:]]*//g&#x27;</span>1022  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/ //&#x27;</span>1023  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/^ //&#x27;</span>1024  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/[[:space:]//&#x27;</span>1025  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/[[:space:]]//&#x27;</span>1026  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/^[[:space:]]+//&#x27;</span>1027  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/^[[:space:]]*//&#x27;</span>1028  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/^[[:space:]]+1//&#x27;</span>1029  <span class="hljs-built_in">history</span> | sed <span class="hljs-string">&#x27;s/^[[:space:]]*//&#x27;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为 HCNA 学习笔记</title>
    <link href="/2020/07/26/Huawei_route_base/"/>
    <url>/2020/07/26/Huawei_route_base/</url>
    
    <content type="html"><![CDATA[<p>华为认证网络工程师是由华为公司认证与采购部推出的独立认证体系，与之前的华为认证不同，简称HCNA。</p><h1 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h1><h2 id="1-1-华为路由-交换视图切换"><a href="#1-1-华为路由-交换视图切换" class="headerlink" title="1.1 华为路由/交换视图切换"></a>1.1 华为路由/交换视图切换</h2><p>&lt;Huawei&gt; 用户视图 —-&gt; [Huawei] 系统视图</p><pre><code class="hljs routeros">&lt;Huawei&gt;system-view Enter<span class="hljs-built_in"> system </span>view, return<span class="hljs-built_in"> user </span>view with Ctrl+Z.[Huawei]</code></pre><h2 id="1-2-查看路由信息"><a href="#1-2-查看路由信息" class="headerlink" title="1.2 查看路由信息"></a>1.2 查看路由信息</h2><p>版本：</p><pre><code class="hljs routeros">&lt;Huawei&gt;dis version Huawei Versatile<span class="hljs-built_in"> Routing </span>Platform SoftwareVRP (R) software, Version 5.110 (eNSP V100R001C00)Copyright (c) 2000-2011 HUAWEI TECH CO., LTD</code></pre><p>操作系统 <font color=red>VRP</font>—&gt; Huawei Versatile Routing Platform Software</p><p>查看 flash（操作系统及配置文件都放在 flash 里面）：</p><pre><code class="hljs angelscript">&lt;Huawei&gt;dir#显示所有文件Directory of flash:/  Idx  Attr     Size(Byte)  Date        Time       FileName     <span class="hljs-number">0</span>  drw-              -  Aug <span class="hljs-number">07</span> <span class="hljs-number">2015</span> <span class="hljs-number">13</span>:<span class="hljs-number">51</span>:<span class="hljs-number">14</span>   src    <span class="hljs-number">1</span>  drw-              -  Jul <span class="hljs-number">31</span> <span class="hljs-number">2020</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">44</span>   pmdata    <span class="hljs-number">2</span>  drw-              -  Jul <span class="hljs-number">31</span> <span class="hljs-number">2020</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">50</span>   dhcp    <span class="hljs-number">3</span>  -rw-             <span class="hljs-number">28</span>  Jul <span class="hljs-number">31</span> <span class="hljs-number">2020</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">50</span>   <span class="hljs-keyword">private</span>-data.txt    <span class="hljs-number">4</span>  -rw-            <span class="hljs-number">452</span>  Jul <span class="hljs-number">31</span> <span class="hljs-number">2020</span> <span class="hljs-number">14</span>:<span class="hljs-number">39</span>:<span class="hljs-number">27</span>   vrpcfg.zip#路由配置信息，配置完路由器 save 后生成的文件<span class="hljs-number">32</span>,<span class="hljs-number">004</span> KB total (<span class="hljs-number">31</span>,<span class="hljs-number">995</span> KB free)</code></pre><p>文件操作命令：</p><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> vrpcfg.zip<span class="hljs-comment">#删除配置文件</span><span class="hljs-keyword">rename</span> vrpcfg.zip vrpcfg.zip.bak<span class="hljs-comment">#重命名配置文件</span>copy vrpcfg.zip vrpcfg.zip.bak<span class="hljs-comment">#复制文件</span>mkdirdemo<span class="hljs-comment">#创建文件夹</span>cd demo<span class="hljs-comment">#进入demo文件夹</span>unzip xx.zip <span class="hljs-comment">#解压</span>more xx<span class="hljs-comment">#查看文件内容</span>带 [ ] 表示位于回收站里的文件<span class="hljs-keyword">reset</span> <span class="hljs-keyword">recycle</span>-<span class="hljs-keyword">bin</span>  <span class="hljs-comment">#清空回收站</span></code></pre><h1 id="二、配置端口"><a href="#二、配置端口" class="headerlink" title="二、配置端口"></a>二、配置端口</h1><pre><code class="hljs routeros">[Huawei]int e0/0/0#进入端口[Huawei-Ethernet0/0/0]ip <span class="hljs-builtin-name">add</span> 192.168.1.1 24#配置ip和24位子网掩码[Huawei-Ethernet0/0/0]dis this#显示接口信息<span class="hljs-comment">#</span>interface Ethernet0/0/0<span class="hljs-built_in"> ip address </span>192.168.1.1 255.255.255.0<span class="hljs-comment">#</span>return[Huawei-Ethernet0/0/0]undo<span class="hljs-built_in"> ip address </span>#删除接口信息</code></pre><h2 id="2-1-显示接口摘要"><a href="#2-1-显示接口摘要" class="headerlink" title="2.1 显示接口摘要"></a>2.1 显示接口摘要</h2><pre><code class="hljs routeros">[Huawei]display<span class="hljs-built_in"> ip </span>int brief <span class="hljs-number">*d</span>own: administratively down!down: FIB overload down^down: standby(l): loopback(s): spoofing(d): Dampening SuppressedThe number of<span class="hljs-built_in"> interface </span>that is UP <span class="hljs-keyword">in</span> Physical is 3The number of<span class="hljs-built_in"> interface </span>that is DOWN <span class="hljs-keyword">in</span> Physical is 8The number of<span class="hljs-built_in"> interface </span>that is UP <span class="hljs-keyword">in</span> Protocol is 3The number of<span class="hljs-built_in"> interface </span>that is DOWN <span class="hljs-keyword">in</span> Protocol is 8Interface                        <span class="hljs-built_in"> IP </span>Address/Mask      Physical   Protocol  Ethernet0/0/0                     192.168.1.1/24       up         up        Ethernet0/0/1                     172.16.1.1/24        up         up        GigabitEthernet0/0/0              unassigned           down       down      GigabitEthernet0/0/1              unassigned           down       down      GigabitEthernet0/0/2              unassigned           down       down      GigabitEthernet0/0/3              unassigned           down       down      NULL0                             unassigned           up         up(s)     Serial0/0/0                       unassigned           down       down      Serial0/0/1                       unassigned           down       down      Serial0/0/2                       unassigned           down       down      Serial0/0/3                       unassigned           down       down</code></pre><h2 id="2-2-显示路由表"><a href="#2-2-显示路由表" class="headerlink" title="2.2 显示路由表"></a>2.2 显示路由表</h2><blockquote><p>路由器转发数据包的唯一依据，是路由器转发数据包的一张“地图”</p></blockquote><pre><code class="hljs angelscript">[Huawei]display ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : <span class="hljs-number">6</span>        Routes : <span class="hljs-number">6</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">8</span>   Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0     <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>      Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>     <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>     Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span></code></pre><h2 id="2-3-关闭信息中心防止弹出日志"><a href="#2-3-关闭信息中心防止弹出日志" class="headerlink" title="2.3 关闭信息中心防止弹出日志"></a>2.3 关闭信息中心防止弹出日志</h2><pre><code class="hljs pgsql">[Huawei]undo <span class="hljs-keyword">info</span>-center <span class="hljs-keyword">enable</span> <span class="hljs-keyword">Info</span>: Information center <span class="hljs-keyword">is</span> disabled.</code></pre><h1 id="三、配置路由"><a href="#三、配置路由" class="headerlink" title="三、配置路由"></a>三、配置路由</h1><p><img src="/img/Huawei_route/Huawei_route_base_route.jpg"></p><h2 id="3-1-直连路由（Direct-routing）"><a href="#3-1-直连路由（Direct-routing）" class="headerlink" title="3.1 直连路由（Direct routing）"></a>3.1 直连路由（Direct routing）</h2><blockquote><p>路由器接口所连接的子网的路由方式称为直连路由</p></blockquote><p>直接连接的路由，当路由器的接口配置好 ip 地址并且 up 后，会自动创建该路由。路由器默认情况下，只能到达直连的网段。</p><p>列：路由器 R2 ，只能在直连网段 12.1.1.x 和 23.1.1.x 下通信</p><p><img src="/img/Huawei_route/Huawei_route_base_1.jpg"></p><p>其路由表：</p><p><img src="/img/Huawei_route/Huawei_route_base_2.jpg"></p><h2 id="3-2-静态路由（Static-routing）"><a href="#3-2-静态路由（Static-routing）" class="headerlink" title="3.2 静态路由（Static routing）"></a>3.2 静态路由（Static routing）</h2><blockquote><p>一种路由的方式，路由项（routing entry）由手动配置，而非动态决定。</p></blockquote><p>PC1 与 PC2 通信，需要配置静态路由：</p><p><img src="/img/Huawei_route/Huawei_route_base_3.jpg"></p><p>PC1 —&gt; PC2</p><p> <font color=pink>src:192.168.1.2 —&gt; dst:172.16.1.2</font></p><p>R1：</p><p>[R1]ip route-static <font color=red>172.16.1.0 24</font> <font color=blue>12.1.1.2</font></p><p><font color=red>红色</font>：目标网段</p><p><font color=blue>蓝色</font>：下一跳（next-hop），下一个传递者、承接者</p><p>路由表：</p><pre><code class="hljs angelscript">[R1]display ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : <span class="hljs-number">7</span>        Routes : <span class="hljs-number">7</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">8</span>   Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0     <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Static  <span class="hljs-number">60</span>   <span class="hljs-number">0</span>          RD   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>     Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span></code></pre><p>R2：</p><p>[R2]ip route-static <font color=red>172.16.1.0 24</font> <font color=blue>23.1.1.3</font></p><p>回包路由配置：</p><p>PC2 —&gt; PC1</p><p><font color=pink>dst:192.168.1.2 &lt;— src:172.16.1.2</font></p><p>R3:</p><p>[R3]ip route-static 192.168.1.0 24 23.1.1.2</p><p>R2:</p><p>[R2]ip route-static 192.168.1.0 24 12.1.1.1</p><h2 id="3-3-路由优先级（Preference）"><a href="#3-3-路由优先级（Preference）" class="headerlink" title="3.3 路由优先级（Preference）"></a>3.3 路由优先级（Preference）</h2><blockquote><p>思科：管理距离。衡量路由的优先程度，到达同款同一目标有两种协议，此时优选路由优先级较小的路由协议。</p></blockquote><p>路由优先级范围：0-255</p><p>常见路由协议默认的优先级（数字越小，优先级越高）：</p><ul><li>直连路由 0</li><li>静态路由 60</li><li>Rip（路由信息协议） 100</li><li>Ospf（Open Shortest Path First开放式最短路径优先） 10</li></ul><p>禁用端口：</p><pre><code class="hljs awk">[Huawei]int e0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span> [Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]shutdown<span class="hljs-comment">#关闭端口</span>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]undo shutdown <span class="hljs-comment">#开启端口</span></code></pre><p><img src="/img/Huawei_route/Huawei_route_base_4.jpg"></p><p>目标：实现千兆 Ge 0/0/0 作为主链路，百兆 E 0/0/0 作为备份链路</p><p>R1:</p><pre><code class="hljs angelscript">[R1]ip route-static <span class="hljs-number">210.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">24</span> <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> preference <span class="hljs-number">50</span></code></pre><p>CT：</p><pre><code class="hljs angelscript">[ct]ip route-static <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">24</span> <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> preference <span class="hljs-number">50</span></code></pre><p>调整优先级：</p><pre><code class="hljs angelscript">[Huawei]ip route-static <span class="hljs-number">210.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">24</span> <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> preference <span class="hljs-number">50</span></code></pre><p><font color=red>达到某相同目标网段，路由表始终放置最优路由</font></p><pre><code class="hljs angelscript">[Huawei]dis ip rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : <span class="hljs-number">9</span>        Routes : <span class="hljs-number">9</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>        GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>       <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">8</span>   Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>     Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>      <span class="hljs-number">210.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Static  <span class="hljs-number">50</span>   <span class="hljs-number">0</span>          RD   <span class="hljs-number">21.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span></code></pre><h2 id="3-4-负载均衡"><a href="#3-4-负载均衡" class="headerlink" title="3.4 负载均衡"></a>3.4 负载均衡</h2><p>数据（负载）被均分到两条链路传输</p><h2 id="3-5-路由度量"><a href="#3-5-路由度量" class="headerlink" title="3.5 路由度量"></a>3.5 路由度量</h2><blockquote><p>度量值，路由开销，metric，cost。到达某目标所花费的开销（代价）的总和，用来衡量路径的优劣</p></blockquote><h2 id="3-6-缺省路由（Default-route）"><a href="#3-6-缺省路由（Default-route）" class="headerlink" title="3.6 缺省路由（Default route）"></a>3.6 缺省路由（Default route）</h2><blockquote><p>默认路由，default route，pre 60</p></blockquote><pre><code class="hljs angelscript">[Huawei]ip route-static <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-number">0</span> <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> #访问任何网段都将数据包交给 <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span></code></pre><p><font color=red>注：缺省路由属于特殊的静态路由</font></p><p><font color=red>注：PC 的网关其实就是一种缺省路由</font></p><p><font color=red>缺省路由属于“替补路由”，只有当其他路由不可达时才会使用缺省路由。</font></p><p>缺省路由适用于<font color=red>边缘节点</font>及<font color=red>企业出口</font></p><h2 id="3-7-环回接口（Loopback）"><a href="#3-7-环回接口（Loopback）" class="headerlink" title="3.7 环回接口（Loopback）"></a>3.7 环回接口（Loopback）</h2><blockquote><p>逻辑接口，模拟网段、PC、服务器、后期用于动态路由选举 Router-ID</p></blockquote><p>配置环回接口：</p><pre><code class="hljs angelscript">[Huawei]<span class="hljs-built_in">int</span> LoopBack <span class="hljs-number">0</span>[Huawei-LoopBack0]ip add <span class="hljs-number">220.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> <span class="hljs-number">24</span></code></pre><h2 id="3-8-DHCP（Dynamic-Host-Configuration-Protocol）"><a href="#3-8-DHCP（Dynamic-Host-Configuration-Protocol）" class="headerlink" title="3.8 DHCP（Dynamic Host Configuration Protocol）"></a>3.8 DHCP（Dynamic Host Configuration Protocol）</h2><blockquote><p>动态主机配置协议是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p></blockquote><p><font color=red>BOOTP（Bootstrap Protocol，引导程序协议）是一种引导协议，基于IP/UDP协议，也称自举协议，是DHCP协议的前身。</font></p><p><img src="/img/Huawei_route/Huawei_route_base_5.jpg"></p><p>开启 DHCP 功能：</p><pre><code class="hljs bash">[Huawei]dhcp <span class="hljs-built_in">enable</span></code></pre><p>创建地址池：</p><pre><code class="hljs routeros">[Huawei]ip<span class="hljs-built_in"> pool </span>add_pool[Huawei-ip-pool-add_pool]gateway-list 192.168.1.1[Huawei-ip-pool-add_pool]network 192.168.1.0 mask 24[Huawei-ip-pool-add_pool]dns-list 192.168.1.1 8.8.8.8[Huawei-ip-pool-add_pool]dis this<span class="hljs-comment">#</span>ip<span class="hljs-built_in"> pool </span>add_pool gateway-list 192.168.1.1<span class="hljs-built_in"> network </span>192.168.1.0 mask 255.255.255.0 dns-list 192.168.1.1 8.8.8.8<span class="hljs-comment">#</span>return[Huawei-ip-pool-add_pool]q[Huawei]int e0/0/0#和用户相连端口[Huawei-Ethernet0/0/0]dhcp select global #使用本地全局配置的地址池分配<span class="hljs-built_in"> IP </span>地址</code></pre><p>客户端 PC6 从本地服务地址池 add_pool 获取 DHCP 地址：</p><p><img src="/img/Huawei_route/Huawei_route_base_6.jpg"></p><p>获取地址包：</p><p><img src="/img/Huawei_route/Huawei_route_base_7.jpg"></p><p>用户发送的第一个 DHCP 请求包源是 0.0.0.0 目标为 255.255.255.255 的广播报文，该报文称为 dhcp discover</p><p><img src="/img/Huawei_route/Huawei_route_base_8.jpg"></p><p>显示 dhcp 分配记录：</p><pre><code class="hljs routeros">[Huawei]dis<span class="hljs-built_in"> ip pool </span>name add_pool used    Pool-name      : add_pool  Pool-No        : 0 <span class="hljs-built_in"> Lease </span>         : 1 Days 0 Hours 0 Minutes  Domain-name    : -  DNS-server0    : 192.168.1.1       DNS-server1    : 8.8.8.8           NBNS-server0   : -                 Netbios-type   : -                 Position       : Local           Status           : Unlocked  Gateway-0      : 192.168.1.1       Mask           : 255.255.255.0  VPN<span class="hljs-built_in"> instance </span>  : -- -----------------------------------------------------------------------------         Start           End     Total  Used  Idle(Expired)  Conflict  Disable -----------------------------------------------------------------------------     192.168.1.1   192.168.1.254   253     3        250(0)         0        0 -----------------------------------------------------------------------------  <span class="hljs-built_in"> Network </span>section :   --------------------------------------------------------------------------  Index             <span class="hljs-built_in"> IP </span>              MAC     <span class="hljs-built_in"> Lease </span>  Status    --------------------------------------------------------------------------    251   192.168.1.252    5489-98c2-3d98       3018   Used           252   192.168.1.253    5489-98e4-1b88       3360   Used           253   192.168.1.254    5489-9856-795c       3364   Used         --------------------------------------------------------------------------</code></pre><h2 id="3-9-RIP-Routing-Information-Protocol"><a href="#3-9-RIP-Routing-Information-Protocol" class="headerlink" title="3.9 RIP(Routing Information Protocol)"></a>3.9 RIP(Routing Information Protocol)</h2><blockquote><p>RIP（路由信息协议）协议基于距离矢量算法（DistanceVectorAlgorithms），使用“跳数”(即metric)来衡量到达目标地址的路由距离。这种协议的路由器只关心自己周围的世界，只与自己相邻的路由器交换信息，范围限制在15跳(15度)之内，再远，它就不关心了。RIP应用于OSI网络七层模型的应用层。各厂家定义的管理距离（AD，即优先级）如下：华为定义的优先级是100，思科定义的优先级是120。缺点：古老，收敛速度很慢！</p></blockquote><p><img src="/img/Huawei_route/Huawei_route_base_9.jpg"></p><p>配置RIP：</p><p><img src="/img/Huawei_route/Huawei_route_base_10.jpg"></p><p>R1:</p><pre><code class="hljs routeros">[R1-rip-1]dis this<span class="hljs-comment">#</span>rip 1 undo summary#关闭自动汇总 version 2#版本2<span class="hljs-built_in"> network </span>192.168.1.0#宣告直连主类网络<span class="hljs-built_in"> network </span>12.0.0.0#宣告直连主类网络<span class="hljs-comment">#</span>return</code></pre><p>R2:</p><pre><code class="hljs routeros">[R2-rip-1]dis this<span class="hljs-comment">#</span>rip 1 undo summary version 2<span class="hljs-built_in"> network </span>12.0.0.0<span class="hljs-built_in"> network </span>23.0.0.0<span class="hljs-built_in"> network </span>172.16.0.0<span class="hljs-comment">#</span>return</code></pre><p>R3:</p><pre><code class="hljs routeros">[R3-rip-1]dis this<span class="hljs-comment">#</span>rip 1 undo summary version 2<span class="hljs-built_in"> network </span>23.0.0.0<span class="hljs-built_in"> network </span>10.0.0.0<span class="hljs-comment">#</span>return</code></pre><p>Rip 报文：</p><p><img src="/img/Huawei_route/Huawei_route_base_11.jpg"></p><p>每隔 30s 发送一次报文，目标地址是：224.0.0.9 组播地址，报文里存放的是路由信息</p><p><img src="/img/Huawei_route/Huawei_route_base_12.jpg"></p><p>Rip 只看距离远近，距离是以跳数（Metric，经过路由器的个数）</p><h2 id="3-10-静默接口（Silent-interface）"><a href="#3-10-静默接口（Silent-interface）" class="headerlink" title="3.10 静默接口（Silent-interface）"></a>3.10 静默接口（Silent-interface）</h2><p><font color=red>PC/客户端 不需要 Rip 报文，可以将路由连接客户端接口配置为抑制接口（silent-interface，静默接口）：</font></p><pre><code class="hljs angelscript">[Huawei-rip<span class="hljs-number">-1</span>]silent-<span class="hljs-keyword">interface</span> <span class="hljs-symbol">e0</span>/<span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span>#将 <span class="hljs-symbol">e0</span>/<span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span> 口配置为静默接口，<span class="hljs-symbol">Rip</span>的路由更新将不再从该接口发送</code></pre><p>此时，R1 的路由表：</p><pre><code class="hljs angelscript">[R1]dis ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : <span class="hljs-number">9</span>        Routes : <span class="hljs-number">9</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface     <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  RIP     <span class="hljs-number">100</span>  <span class="hljs-number">2</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>#Rip优先级为<span class="hljs-number">100</span>       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">23.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  RIP     <span class="hljs-number">100</span>  <span class="hljs-number">1</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">8</span>   Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0     <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  RIP     <span class="hljs-number">100</span>  <span class="hljs-number">1</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>     Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span></code></pre><h2 id="3-11-OSPF-Open-Shortest-Path-First"><a href="#3-11-OSPF-Open-Shortest-Path-First" class="headerlink" title="3.11 OSPF(Open Shortest Path First)"></a>3.11 OSPF(Open Shortest Path First)</h2><blockquote><p>开放式最短路径优先协议是 IETF 定义的一种基于链路状态的内部网关路由协议</p></blockquote><p>ospf 优先级为：10</p><p><img src="/img/Huawei_route/Huawei_route_base_13.jpg"></p><p>Area 0：骨干区域、核心区域</p><p>Area 1、2…：常规区域</p><ul><li>每个区域都维护一个独立的LSDB</li><li><font color=red>Area 0是骨干区域，其他区域都必须与此区域相连</font></li></ul><h3 id="3-11-1-配置-OSPF："><a href="#3-11-1-配置-OSPF：" class="headerlink" title="3.11.1 配置 OSPF："></a>3.11.1 配置 OSPF：</h3><p><img src="/img/Huawei_route/Huawei_route_base_14.jpg"></p><p>R1：</p><pre><code class="hljs angelscript">[Huawei]ospf <span class="hljs-number">1</span>[Huawei-ospf<span class="hljs-number">-1</span>]area <span class="hljs-number">0</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> ?  X.X.X.X  OSPF wild card bits[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]dis <span class="hljs-keyword">this</span># area <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>  network <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>  network <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>#<span class="hljs-keyword">return</span></code></pre><p>R2：</p><pre><code class="hljs angelscript">[Huawei]ospf <span class="hljs-number">1</span>[Huawei-ospf<span class="hljs-number">-1</span>]area <span class="hljs-number">0</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">23.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]dis <span class="hljs-keyword">this</span># area <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>  network <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>  network <span class="hljs-number">23.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>  network <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>#<span class="hljs-keyword">return</span></code></pre><p>R3:</p><pre><code class="hljs angelscript">[Huawei]ospf <span class="hljs-number">1</span>[Huawei-ospf<span class="hljs-number">-1</span>]area <span class="hljs-number">0</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">23.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]network <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>]dis <span class="hljs-keyword">this</span># area <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>  network <span class="hljs-number">23.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>  network <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>#<span class="hljs-keyword">return</span></code></pre><p>配置完 OSPF 的 R1 路由信息：</p><pre><code class="hljs angelscript">[Huawei]dis ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : <span class="hljs-number">9</span>        Routes : <span class="hljs-number">9</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface     <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  OSPF    <span class="hljs-number">10</span>   <span class="hljs-number">3</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>       <span class="hljs-number">23.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  OSPF    <span class="hljs-number">10</span>   <span class="hljs-number">2</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">8</span>   Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0      <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       InLoopBack0     <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  OSPF    <span class="hljs-number">10</span>   <span class="hljs-number">2</span>           D   <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>        Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>     Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>    <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">32</span>  Direct  <span class="hljs-number">0</span>    <span class="hljs-number">0</span>           D   <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       Ethernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span></code></pre><h3 id="3-11-2-OSPF-的报文：常见5种"><a href="#3-11-2-OSPF-的报文：常见5种" class="headerlink" title="3.11.2 OSPF 的报文：常见5种"></a>3.11.2 OSPF 的报文：常见5种</h3><p>hello：小巧，用来建立和维持邻居关系</p><p><img src="/img/Huawei_route/Huawei_route_base_15.jpg"></p><p>DBD 、LSR、LSU、LSack：用于传递路由信息，刚开始时发送</p><p>重置 OSPF 进程来抓取上面4个包：</p><pre><code class="hljs routeros">&lt;Huawei&gt;reset<span class="hljs-built_in"> ospf </span>process #重置（reset）大多需要在\&lt;Huawei&gt; 用户视图 下操作Warning: The<span class="hljs-built_in"> OSPF </span>process will be reset. Continue? [Y/N]:y</code></pre><p><img src="/img/Huawei_route/Huawei_route_base_16.jpg"></p><h3 id="3-11-3-OSPF-邻居表"><a href="#3-11-3-OSPF-邻居表" class="headerlink" title="3.11.3 OSPF 邻居表"></a>3.11.3 OSPF 邻居表</h3><pre><code class="hljs routeros">[R2]dis<span class="hljs-built_in"> ospf peer </span>brief <span class="hljs-built_in"> OSPF </span>Process 1 with Router ID 12.1.1.2 <span class="hljs-built_in"> Peer </span>Statistic Information ----------------------------------------------------------------------------<span class="hljs-built_in"> Area </span>Id         <span class="hljs-built_in"> Interface </span>                      <span class="hljs-built_in"> Neighbor </span>id      State     0.0.0.0          Ethernet0/0/0                    192.168.1.1      Full         0.0.0.0          Ethernet0/0/1                    23.1.1.1         Full         ----------------------------------------------------------------------------</code></pre><h3 id="3-11-4-OSPF-静默接口（silent-interface）"><a href="#3-11-4-OSPF-静默接口（silent-interface）" class="headerlink" title="3.11.4 OSPF 静默接口（silent-interface）"></a>3.11.4 OSPF 静默接口（silent-interface）</h3><pre><code class="hljs routeros">[R1]ospf 1[R1-ospf-1]silent-interface e0/0/0[R1-ospf-1]dis this<span class="hljs-comment">#</span>ospf 1 silent-interface Ethernet0/0/0<span class="hljs-built_in"> area </span>0.0.0.0 <span class="hljs-built_in"> network </span>192.168.1.0 0.0.0.255 <span class="hljs-built_in"> network </span>12.1.1.0 0.0.0.255<span class="hljs-comment">#</span>return</code></pre><h2 id="3-12-Telnet"><a href="#3-12-Telnet" class="headerlink" title="3.12 Telnet"></a>3.12 Telnet</h2><p><img src="/img/Huawei_route/Huawei_route_base_17.jpg"></p><p>开启 telnet 服务（华为默认开启）：</p><pre><code class="hljs routeros">[R4]telnet<span class="hljs-built_in"> server </span><span class="hljs-builtin-name">enable</span> Info: The Telnet<span class="hljs-built_in"> server </span>has been enabled.</code></pre><p>R4 创建用户名和密码：</p><pre><code class="hljs ada">[R4]aaa#三 A 认证[R4-aaa]local-user ?  STRING&lt;<span class="hljs-number">1</span>-<span class="hljs-number">64</span>&gt;   User name, <span class="hljs-keyword">in</span> form <span class="hljs-keyword">of</span> <span class="hljs-symbol">&#x27;user</span>@domain&#x27;. Can <span class="hljs-keyword">use</span> wildcard <span class="hljs-string">&#x27;*&#x27;</span>,                 <span class="hljs-keyword">while</span> displaying <span class="hljs-keyword">and</span> modifying, such as *@isp,user@*,*@*.Can                 <span class="hljs-keyword">not</span> include invalid character / \ : * ? &quot; &lt; &gt; | @ &#x27;[R4-aaa]local-user telnetuser ?  <span class="hljs-keyword">access</span>-limit   Set <span class="hljs-keyword">access</span> limit <span class="hljs-keyword">of</span> user(s)  ftp-directory  Set user(s) FTP directory permitted  idle-timeout   Set the timeout period <span class="hljs-keyword">for</span> terminal user(s)  password       Set password   privilege      Set admin user(s) level  service-<span class="hljs-keyword">type</span>   <span class="hljs-type">Service </span>types <span class="hljs-keyword">for</span> authorized user(s)  state          Activate/Block the user(s)  user-group     User group[R4-aaa]local-user telnetuser password cipher telnetuser privilege level <span class="hljs-number">3</span> #配置用户名密码，权限为<span class="hljs-number">3</span>[R4-aaa]local-user telnetuser service-<span class="hljs-keyword">type</span> <span class="hljs-type">telnet  </span>#指定账户的类型为 telnet[R4]user-<span class="hljs-keyword">interface</span> [R4]user-<span class="hljs-keyword">interface</span> ?  INTEGER&lt;<span class="hljs-number">0</span>,<span class="hljs-number">34</span>-<span class="hljs-number">48</span>,<span class="hljs-number">50</span>-<span class="hljs-number">54</span>&gt;   The first user terminal <span class="hljs-keyword">interface</span> to be configured  console                  Primary user terminal <span class="hljs-keyword">interface</span>  current                  The current user terminal <span class="hljs-keyword">interface</span>  maximum-vty              The maximum number <span class="hljs-keyword">of</span> VTY users, the default value                           <span class="hljs-keyword">is</span> <span class="hljs-number">5</span>  vty                      The virtual user terminal <span class="hljs-keyword">interface</span> [R4]user-<span class="hljs-keyword">interface</span> vty <span class="hljs-number">0</span> <span class="hljs-number">4</span>[R4-ui-vty0-<span class="hljs-number">4</span>]au[R4-ui-vty0-<span class="hljs-number">4</span>]authe[R4-ui-vty0-<span class="hljs-number">4</span>]authentication-mode ?  aaa       AAA authentication  none      Login without checking  password  Authentication through the password <span class="hljs-keyword">of</span> a user terminal <span class="hljs-keyword">interface</span>[R4-ui-vty0-<span class="hljs-number">4</span>]authentication-mode aaa[R4-ui-vty0-<span class="hljs-number">4</span>]dis this#user-<span class="hljs-keyword">interface</span> con <span class="hljs-number">0</span>user-<span class="hljs-keyword">interface</span> vty <span class="hljs-number">0</span> <span class="hljs-number">4</span> authentication-mode aaauser-<span class="hljs-keyword">interface</span> vty <span class="hljs-number">16</span> <span class="hljs-number">20</span>#<span class="hljs-keyword">return</span>[R4]user-<span class="hljs-keyword">interface</span> ?  INTEGER&lt;<span class="hljs-number">0</span>,<span class="hljs-number">34</span>-<span class="hljs-number">48</span>,<span class="hljs-number">50</span>-<span class="hljs-number">54</span>&gt;   The first user terminal <span class="hljs-keyword">interface</span> to be configured  console                  Primary user terminal <span class="hljs-keyword">interface</span>  current                  The current user terminal <span class="hljs-keyword">interface</span>  maximum-vty              The maximum number <span class="hljs-keyword">of</span> VTY users, the default value                           <span class="hljs-keyword">is</span> <span class="hljs-number">5</span>  vty                      The virtual user terminal <span class="hljs-keyword">interface</span> [R4]user-<span class="hljs-keyword">interface</span> vty <span class="hljs-number">0</span> <span class="hljs-number">4</span># 同时允许<span class="hljs-number">5</span>个人远程控制[R4-ui-vty0-<span class="hljs-number">4</span>]authentication-mode ?  aaa       AAA authentication  none      Login without checking  password  Authentication through the password <span class="hljs-keyword">of</span> a user terminal <span class="hljs-keyword">interface</span>[R4-ui-vty0-<span class="hljs-number">4</span>]authentication-mode aaa#认证模式为 aaa [R4-ui-vty0-<span class="hljs-number">4</span>]dis this#user-<span class="hljs-keyword">interface</span> con <span class="hljs-number">0</span>user-<span class="hljs-keyword">interface</span> vty <span class="hljs-number">0</span> <span class="hljs-number">4</span> authentication-mode aaauser-<span class="hljs-keyword">interface</span> vty <span class="hljs-number">16</span> <span class="hljs-number">20</span>#<span class="hljs-keyword">return</span></code></pre><p>R1 连接 telnet 服务端：</p><pre><code class="hljs routeros">&lt;R1&gt;telnet 34.1.1.2Trying 34.1.1.2 <span class="hljs-built_in">..</span>.Press CTRL+K <span class="hljs-keyword">to</span> abortConnected <span class="hljs-keyword">to</span> 34.1.1.2 <span class="hljs-built_in">..</span>.Login authenticationUsername:adminPassword:Info: The max number of VTY<span class="hljs-built_in"> users </span>is 10, <span class="hljs-keyword">and</span> the number      of current VTY<span class="hljs-built_in"> users </span>on line is 1.      The current login time is 2020-07-31 10:14:55.&lt;R4&gt;</code></pre><h3 id="3-12-1-PC-客户端连接-telnet-服务器："><a href="#3-12-1-PC-客户端连接-telnet-服务器：" class="headerlink" title="3.12.1 PC 客户端连接 telnet 服务器："></a>3.12.1 PC 客户端连接 telnet 服务器：</h3><p>PC 开启 telnet 服务：</p><p>控制面板–&gt;程序–&gt;启动或关闭 Windows 功能 –&gt; Telnet Client</p><p><img src="/img/Huawei_route/Huawei_route_base_19.jpg"></p><p>本机 PC 连接 eNSP Cloud 设置：</p><p><img src="/img/Huawei_route/Huawei_route_base_18.jpg"></p><p>本机需要增加静态路由从192.168.1.1 通信：</p><p><img src="/img/Huawei_route/Huawei_route_base_20.jpg"></p><p>显示本地 PC 路由表：</p><p><img src="/img/Huawei_route/Huawei_route_base_21.jpg"></p><h2 id="3-13-FTP（File-Transfer-Protocol"><a href="#3-13-FTP（File-Transfer-Protocol" class="headerlink" title="3.13 FTP（File Transfer Protocol)"></a>3.13 FTP（File Transfer Protocol)</h2><p>使用 FTP 实现远程文件传输的同时，还可以保证数据传输的可靠性和高效性。</p><h3 id="3-13-1-开启-FTP-服务"><a href="#3-13-1-开启-FTP-服务" class="headerlink" title="3.13.1 开启 FTP 服务"></a>3.13.1 开启 FTP 服务</h3><pre><code class="hljs routeros">[R4]ftp<span class="hljs-built_in"> server </span><span class="hljs-builtin-name">enable</span> Info: Succeeded <span class="hljs-keyword">in</span> starting the FTP server.</code></pre><p><img src="/img/Huawei_route/Huawei_route_base_22.jpg"></p><p>创建 FTP  账户：</p><pre><code class="hljs crmsh">[R4]aaa[R4-aaa]local-<span class="hljs-keyword">user</span> <span class="hljs-title">ftpuser</span> password cipher ftpuser privilege level <span class="hljs-number">3</span> ftp-directory flash:<span class="hljs-literal">Inf</span>o: Add a new user.[R4-aaa]local-<span class="hljs-keyword">user</span> <span class="hljs-title">ftpuser</span> service-<span class="hljs-keyword">type</span> ftp<span class="hljs-comment">#此账户用于 FTP 服务</span></code></pre><p>连接 FTP 服务器：</p><pre><code class="hljs angelscript">&lt;R1&gt;ftp <span class="hljs-number">34.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>Trying <span class="hljs-number">34.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> ...Press CTRL+K to abortConnected to <span class="hljs-number">34.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>.<span class="hljs-number">220</span> FTP service ready.User(<span class="hljs-number">34.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>:(none)):ftpuser<span class="hljs-number">331</span> Password required <span class="hljs-keyword">for</span> ftpuser.Enter password:<span class="hljs-number">230</span> User logged <span class="hljs-keyword">in</span>.[ftp]dir<span class="hljs-number">200</span> Port command okay.<span class="hljs-number">150</span> Opening ASCII mode data connection <span class="hljs-keyword">for</span> *.drwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup         <span class="hljs-number">0</span> Aug <span class="hljs-number">07</span>  <span class="hljs-number">2015</span> srcdrwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup         <span class="hljs-number">0</span> Jul <span class="hljs-number">31</span> <span class="hljs-number">08</span>:<span class="hljs-number">39</span> pmdatadrwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup         <span class="hljs-number">0</span> Jul <span class="hljs-number">31</span> <span class="hljs-number">08</span>:<span class="hljs-number">39</span> dhcp-rwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup       <span class="hljs-number">603</span> Jul <span class="hljs-number">31</span> <span class="hljs-number">15</span>:<span class="hljs-number">09</span> <span class="hljs-keyword">private</span>-data.txtdrwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup         <span class="hljs-number">0</span> Jul <span class="hljs-number">31</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span> mplstpoam-rwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup       <span class="hljs-number">507</span> Jul <span class="hljs-number">31</span> <span class="hljs-number">15</span>:<span class="hljs-number">19</span> ftp.demo-rwxrwxrwx   <span class="hljs-number">1</span> noone    nogroup       <span class="hljs-number">507</span> Jul <span class="hljs-number">31</span> <span class="hljs-number">15</span>:<span class="hljs-number">09</span> vrpcfg.zip<span class="hljs-number">226</span> Transfer complete.</code></pre><h1 id="四、构建冗余型企业网络"><a href="#四、构建冗余型企业网络" class="headerlink" title="四、构建冗余型企业网络"></a>四、构建冗余型企业网络</h1><p>VLAN、Trunk、STP、VRRP、链路聚合、ACL</p><h2 id="4-1-VLAN（Virtual-Local-Area-Network）"><a href="#4-1-VLAN（Virtual-Local-Area-Network）" class="headerlink" title="4.1 VLAN（Virtual Local Area Network）"></a>4.1 VLAN（Virtual Local Area Network）</h2><blockquote><p>虚拟局域网是将一个物理的局域网在逻辑上划分成多个广播域的技术。通过在交换机上配置 VLAN ，可以实现在同一个 VLAN 内的用户可以进行二层互访，而不同 VLAN 间的用户被二层隔离。这样既能够隔离广播域，又能够提升网络的安全性。</p></blockquote><h3 id="4-1-1-配置"><a href="#4-1-1-配置" class="headerlink" title="4.1.1 配置"></a>4.1.1 配置</h3><p><img src="/img/Huawei_route/Huawei_route_base_23.jpg"></p><p>创建 VLAN：</p><pre><code class="hljs routeros">[SW1]vlan batch 10 20#同时创建多个<span class="hljs-built_in"> VLAN </span>：<span class="hljs-built_in"> VLAN </span>10 、VLAN 20[SW1]int gi0/0/1#进入 GE 0/0/1 口[SW1-GigabitEthernet0/0/1]port link-type access #将接口类型配置为 access[SW1-GigabitEthernet0/0/1]port<span class="hljs-built_in"> default vlan </span>10 #将接口划分到<span class="hljs-built_in"> VLAN </span>10 里[SW1-GigabitEthernet0/0/1]dis this<span class="hljs-comment">#</span>interface GigabitEthernet0/0/1<span class="hljs-built_in"> port </span>link-type access<span class="hljs-built_in"> port default vlan </span>10<span class="hljs-comment">#</span>return<span class="hljs-comment">#查看 VLAN 配置</span>[SW1]dis vlanThe total number of vlans is : 3--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;<span class="hljs-comment">#: ProtocolTransparent-vlan;    *: Management-vlan;</span>--------------------------------------------------------------------------------VID <span class="hljs-built_in"> Type </span>   Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/4(U)      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)                      GE0/0/8(D)      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)                     GE0/0/12(D)     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)                     GE0/0/16(D)     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)                     GE0/0/20(D)     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)                     GE0/0/24(D)                                                     10   common  UT:GE0/0/1(U)      GE0/0/2(U)                                      20   common  UT:GE0/0/3(U)                                                      VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    <span class="hljs-builtin-name">enable</span> <span class="hljs-built_in"> default </span>      <span class="hljs-builtin-name">enable</span>  <span class="hljs-builtin-name">disable</span>   <span class="hljs-built_in"> VLAN </span>0001                         10   <span class="hljs-builtin-name">enable</span> <span class="hljs-built_in"> default </span>      <span class="hljs-builtin-name">enable</span>  <span class="hljs-builtin-name">disable</span>   <span class="hljs-built_in"> VLAN </span>0010                         20   <span class="hljs-builtin-name">enable</span> <span class="hljs-built_in"> default </span>      <span class="hljs-builtin-name">enable</span>  <span class="hljs-builtin-name">disable</span>   <span class="hljs-built_in"> VLAN </span>0020</code></pre><p><font color=red>注： VLAN 1 属于默认 VLAN，默认情况下所有接口都在 VLAN 1 下。VLAN 隔离广播的同时，也会隔离 arp，从而导致单播无法通信。如果想让不同 VLAN 单播可以通信，还需要三层设备（路由器、三层交换机）做路由。</font></p><p>注：默认情况下，交换机的一个接口只能从属一个 VLAN，只允许该 VLAN 的数据通过。</p><h2 id="4-2-Trunk（干道，主干链路）"><a href="#4-2-Trunk（干道，主干链路）" class="headerlink" title="4.2 Trunk（干道，主干链路）"></a>4.2 Trunk（干道，主干链路）</h2><blockquote><p>通常用于交换机和交换机之间，通过一个接口传输多个 VLAN 的数据包。</p></blockquote><h3 id="4-2-1-配置"><a href="#4-2-1-配置" class="headerlink" title="4.2.1 配置"></a>4.2.1 配置</h3><p><img src="/img/Huawei_route/Huawei_route_base_24.jpg"></p><p>将交换机与交换机相连接的端口类型改为 Trunk 类型</p><pre><code class="hljs routeros">[SW1]int gi0/0/4[SW1-GigabitEthernet0/0/4]port link-type trunk #将接口类型配置为 trunk[SW1-GigabitEthernet0/0/4]port trunk allow-pass<span class="hljs-built_in"> vlan </span>all #允许所有的<span class="hljs-built_in"> VLAN </span>通过[SW1-GigabitEthernet0/0/4]dis this<span class="hljs-comment">#</span>interface GigabitEthernet0/0/4<span class="hljs-built_in"> port </span>link-type trunk<span class="hljs-built_in"> port </span>trunk allow-pass<span class="hljs-built_in"> vlan </span>2 <span class="hljs-keyword">to</span> 4094<span class="hljs-comment">#</span>return[SW1-GigabitEthernet0/0/4]port link-type ?  access        Access<span class="hljs-built_in"> port</span>#接 PC 端口  dot1q-tunnel  QinQ port  hybrid        Hybrid<span class="hljs-built_in"> port</span>#混合口 即可以接 PC 也可以接交换机（华为交换机的默认接口）  trunk         Trunk<span class="hljs-built_in"> port</span>#接交换机  <span class="hljs-comment">#查看接口类型</span>[SW1]dis<span class="hljs-built_in"> port </span>vlanPort                    Link<span class="hljs-built_in"> Type </span>   PVID  Trunk<span class="hljs-built_in"> VLAN </span>List-------------------------------------------------------------------------------GigabitEthernet0/0/1    access       10    -                                   GigabitEthernet0/0/2    access       10    -                                   GigabitEthernet0/0/3    access       20    -                                   GigabitEthernet0/0/4    trunk        1     1GigabitEthernet0/0/5    hybrid       1     -                                   GigabitEthernet0/0/6    hybrid       1     -                                             GigabitEthernet0/0/7    hybrid       1     -</code></pre><p>PC 到交换机 access 口的包：</p><p><img src="/img/Huawei_route/Huawei_route_base_25.jpg"></p><p><font color=red>注：PC 不识 VLAN 标记，不识 tag，只有通过交换机的 trunk 接口发出的报文才具备 VLAN 的标记（802.1q tag），见下图</font></p><p>交换机 trunk 到 trunk 交换机包：</p><p><img src="/img/Huawei_route/Huawei_route_base_26.jpg"></p><h3 id="4-2-2-PVID-本征-VLAN，native-vlan"><a href="#4-2-2-PVID-本征-VLAN，native-vlan" class="headerlink" title="4.2.2 PVID(本征 VLAN，native vlan)"></a>4.2.2 PVID(本征 VLAN，native vlan)</h3><p>该 VLAN 的报文经过 trunk 接口时不打标记。默认情况下本征 VLAN 是 VLAN 1。</p><pre><code class="hljs routeros">[SW1]dis<span class="hljs-built_in"> port vlan </span>Port                    Link<span class="hljs-built_in"> Type </span>   PVID  Trunk<span class="hljs-built_in"> VLAN </span>List-------------------------------------------------------------------------------GigabitEthernet0/0/1    access       10    -                                   GigabitEthernet0/0/2    access       10    -                                   GigabitEthernet0/0/3    access       20    -                                   GigabitEthernet0/0/4    trunk        1     1-4094GigabitEthernet0/0/5    hybrid       1     -                                   GigabitEthernet0/0/6    hybrid       1     -                                   GigabitEthernet0/0/7    hybrid       1     -</code></pre><p>例：</p><p><img src="/img/Huawei_route/Huawei_route_base_27.jpg"></p><p>PC8 和 PC9 默认属于 VLAN 1，它们通信经过交换机 trunk 时，是不打 tag 的。</p><p><img src="/img/Huawei_route/Huawei_route_base_28.jpg"></p><h4 id="修改-PVID"><a href="#修改-PVID" class="headerlink" title="修改 PVID"></a>修改 PVID</h4><pre><code class="hljs routeros"><span class="hljs-comment">#两台相连交换机 trunk 都需要修改</span>[SW1]int gi 0/0/4[SW1-GigabitEthernet0/0/4]port trunk pvid<span class="hljs-built_in"> vlan </span>20[SW2]int gi 0/0/1[SW2-GigabitEthernet0/0/1]port trunk pvid<span class="hljs-built_in"> vlan </span>20</code></pre><p>当 PVID 修改为 VLAN 20 后，VLAN 20 下的 PC 通信经过交换机 trunk 时不打 tag。</p><h2 id="4-3-VLAN-间路由"><a href="#4-3-VLAN-间路由" class="headerlink" title="4.3 VLAN 间路由"></a>4.3 VLAN 间路由</h2><p><font color=red>注：不同的 VLAN 之间互相通信必须要有三层设备（路由器、多层交换机）做中转。</font></p><h3 id="4-3-1-多层交换机–SVI（switch-virtual-interface，常用）"><a href="#4-3-1-多层交换机–SVI（switch-virtual-interface，常用）" class="headerlink" title="4.3.1 多层交换机–SVI（switch virtual interface，常用）"></a>4.3.1 多层交换机–SVI（switch virtual interface，常用）</h3><p><img src="/img/Huawei_route/Huawei_route_base_29.jpg"></p><h4 id="SVI-配置"><a href="#SVI-配置" class="headerlink" title="SVI 配置"></a>SVI 配置</h4><pre><code class="hljs routeros">[Huawei]int Vlanif 10[Huawei-Vlanif10]ip<span class="hljs-built_in"> address </span>192.168.10.1 24#给<span class="hljs-built_in"> VLAN </span>10 配置<span class="hljs-built_in"> ip </span>地址 10.1 作为<span class="hljs-built_in"> VLAN </span>10 的用户网关[Huawei-Vlanif10]dis this<span class="hljs-comment">#</span>interface Vlanif10<span class="hljs-built_in"> ip address </span>192.168.10.1 255.255.255.0<span class="hljs-comment">#</span>return[Huawei]int Vlanif 20[Huawei-Vlanif20]ip<span class="hljs-built_in"> address </span>192.168.20.1 24#给<span class="hljs-built_in"> VLAN </span>20 配置<span class="hljs-built_in"> ip </span>地址 20.1 作为<span class="hljs-built_in"> VLAN </span>20 的用户网关<span class="hljs-comment">#调试</span>[Huawei]dis<span class="hljs-built_in"> ip interface </span>brief <span class="hljs-number">*d</span>own: administratively down^down: standby(l): loopback(s): spoofingThe number of<span class="hljs-built_in"> interface </span>that is UP <span class="hljs-keyword">in</span> Physical is 4The number of<span class="hljs-built_in"> interface </span>that is DOWN <span class="hljs-keyword">in</span> Physical is 1The number of<span class="hljs-built_in"> interface </span>that is UP <span class="hljs-keyword">in</span> Protocol is 3The number of<span class="hljs-built_in"> interface </span>that is DOWN <span class="hljs-keyword">in</span> Protocol is 2Interface                        <span class="hljs-built_in"> IP </span>Address/Mask      Physical   Protocol  MEth0/0/1                         unassigned           down       down      NULL0                             unassigned           up         up(s)     Vlanif1                           unassigned           up         down      Vlanif10                          192.168.10.1/24      up         up        Vlanif20                          192.168.20.1/24      up         up<span class="hljs-comment">#显示路由表</span>[Huawei]dis<span class="hljs-built_in"> ip </span>routing-table Route Flags: R - relay, D - download <span class="hljs-keyword">to</span> fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 6        Routes : 6        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0   192.168.10.0/24  Direct  0    0           D   192.168.10.1    Vlanif10   192.168.10.1/32  Direct  0    0           D   127.0.0.1       Vlanif10   192.168.20.0/24  Direct  0    0           D   192.168.20.1    Vlanif20   192.168.20.1/32  Direct  0    0           D   127.0.0.1       Vlanif20</code></pre><p>注：</p><p>VLAN 间路由：通过三层设备路由，使得不同 VLAN 间可以互相通信，但是仅仅允许单播通信。不同 VLAN 之间广播帧依然被隔离既没有失去 VLAN 原本的意义。</p><h3 id="4-3-2-路由器–单臂路由"><a href="#4-3-2-路由器–单臂路由" class="headerlink" title="4.3.2 路由器–单臂路由"></a>4.3.2 路由器–单臂路由</h3><p><img src="/img/Huawei_route/Huawei_route_base_30.jpg"></p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><pre><code class="hljs routeros">[Router]int e0/0/0.?#可生成的逻辑接口  &lt;1-4096&gt;   [Router]int e0/0/0.10[Router-Ethernet0/0/0.10]ip<span class="hljs-built_in"> address </span>192.168.10.254 24#为逻辑接口 10 配置10网段的网关[Router-Ethernet0/0/0.10]dot1q termination vid 10#绑定<span class="hljs-built_in"> VLAN </span>10[Router-Ethernet0/0/0.10]arp broadcast <span class="hljs-builtin-name">enable</span> #使子接口有ARP广播功能[Router-Ethernet0/0/0.10]dis this<span class="hljs-comment">#</span>interface Ethernet0/0/0.10 dot1q termination vid 10<span class="hljs-built_in"> ip address </span>192.168.10.254 255.255.255.0 arp broadcast enable<span class="hljs-comment">#</span>return[Router]int e0/0/0.20[Router-Ethernet0/0/0.20]ip<span class="hljs-built_in"> address </span>192.168.20.254 24[Router-Ethernet0/0/0.20]dot1q termination vid 20[Router-Ethernet0/0/0.20]arp broadcast <span class="hljs-builtin-name">enable</span> [Router-Ethernet0/0/0.20]dis this<span class="hljs-comment">#</span>interface Ethernet0/0/0.20 dot1q termination vid 20<span class="hljs-built_in"> ip address </span>192.168.20.254 255.255.255.0 arp broadcast enable<span class="hljs-comment">#</span>return[Router]dis<span class="hljs-built_in"> ip </span>routing-tableRoute Flags: R - relay, D - download <span class="hljs-keyword">to</span> fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 8        Routes : 8        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0   192.168.10.0/24  Direct  0    0           D   192.168.10.254  Ethernet0/0/0.10   192.168.10.2/32  Direct  0    0           D   192.168.10.2    Ethernet0/0/0.10 192.168.10.254/32  Direct  0    0           D   127.0.0.1       Ethernet0/0/0.10   192.168.20.0/24  Direct  0    0           D   192.168.20.254  Ethernet0/0/0.20   192.168.20.2/32  Direct  0    0           D   192.168.20.2    Ethernet0/0/0.20 192.168.20.254/32  Direct  0    0           D   127.0.0.1       Ethernet0/0/0.20</code></pre><h2 id="4-4-ACL（Access-Control-List）"><a href="#4-4-ACL（Access-Control-List）" class="headerlink" title="4.4 ACL（Access Control List）"></a>4.4 ACL（Access Control List）</h2><blockquote><p>访问控制列表</p></blockquote><ul><li>基本ACL（2000-2999）：只能匹配源 IP 地址</li><li>高级ACL（3000-3999）：可以匹配源IP、目标IP、源端口、目标端口等三层和四层的字段</li></ul><h3 id="4-4-1-配置"><a href="#4-4-1-配置" class="headerlink" title="4.4.1 配置"></a>4.4.1 配置</h3><p><img src="/img/Huawei_route/Huawei_route_base_31.jpg"></p><p><strong>例1：</strong></p><p>禁止 Client 1 192.168.10.1 访问172.16.10.0 网段：</p><p>配置 R2 路由：</p><pre><code class="hljs routeros"><span class="hljs-comment">#配置 ACL 规则</span>[R2]acl ?  INTEGER&lt;2000-2999&gt;  Basic access-list(<span class="hljs-builtin-name">add</span> <span class="hljs-keyword">to</span> current using rules)#基本 ACL  INTEGER&lt;3000-3999&gt;  Advanced access-list(<span class="hljs-builtin-name">add</span> <span class="hljs-keyword">to</span> current using rules)#高级 ACL  INTEGER&lt;4000-4999&gt;  Specify a L2 acl group <span class="hljs-built_in"> ipv6 </span>               ACL<span class="hljs-built_in"> IPv6 </span>  name                Specify a named ACL  number              Specify a numbered ACL[R2-acl-basic-2000]rule ?  INTEGER&lt;0-4294967294&gt;  ID of ACL rule  deny                   Specify matched packet deny#拒绝  permit                 Specify matched packet permit#允许[R2-acl-basic-2000]rule deny source 192.168.10.1 ?  IP_ADDR&lt;X.X.X.X&gt;  Wildcard of source  0                 Wildcard bits : 0.0.0.0 ( a host )[R2-acl-basic-2000]rule deny source 192.168.10.1 0#拒绝源地址为192.168.10.1的任何数据包，0代表主机，不代表某个网段[R2-acl-basic-2000]dis this[V200R003C00]<span class="hljs-comment">#</span>acl number 2000   rule 5 deny source 192.168.10.1 0 # 5 为自动生成的执行编号，第二条则为10（每条+5）<span class="hljs-comment">#</span>return<span class="hljs-comment">#在接口的入方向调用 ACL 规则</span>[R2]int gi0/0/0[R2-GigabitEthernet0/0/0]traffic-filter inbound acl 2000 #在 R2 接口的入（inbound）方向调用 acl[R2-GigabitEthernet0/0/0]dis this[V200R003C00]<span class="hljs-comment">#</span>interface GigabitEthernet0/0/0<span class="hljs-built_in"> ip address </span>12.1.1.2 255.255.255.0  traffic-filter inbound acl 2000<span class="hljs-comment">#</span>return</code></pre><p><strong>例2：</strong></p><p><img src="/img/Huawei_route/Huawei_route_base_31.jpg"></p><p>在 R2 上配置<em>高级 ACL</em> 拒绝 Client 1 和 PC2 ping Server1（拒绝 ICMP 协议数据包），但是允许其 HTTP 访问 Server 1。</p><pre><code class="hljs angelscript">#配置 ACL 规则[R2]acl <span class="hljs-number">3000</span>[R2-acl-adv<span class="hljs-number">-3000</span>]rule deny icmp source <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span> destination <span class="hljs-number">172.16</span><span class="hljs-number">.10</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span>#拒绝 <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span> 网段 ping（ICMP） Server <span class="hljs-number">1</span>(<span class="hljs-number">172.16</span><span class="hljs-number">.10</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span>代表本机)[R2-acl-adv<span class="hljs-number">-3000</span>]dis <span class="hljs-keyword">this</span>[V200R003C00]#acl number <span class="hljs-number">3000</span>   rule <span class="hljs-number">5</span> deny icmp source <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span> destination <span class="hljs-number">172.16</span><span class="hljs-number">.10</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span> #<span class="hljs-keyword">return</span>#接口入调用 ACL 规则[R2]<span class="hljs-built_in">int</span> gi0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>[R2-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>]traffic-filter inbound acl <span class="hljs-number">3000</span></code></pre><p><strong>例3：</strong></p><p><img src="/img/Huawei_route/Huawei_route_base_31.jpg"></p><p>拒绝源地址 192.168.10.2 telnet（port 23） 访问12.1.1.2</p><pre><code class="hljs angelscript">#配置 ACL 规则[R2]acl <span class="hljs-number">3001</span>[R2-acl-adv<span class="hljs-number">-3001</span>]rule deny tcp source <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span> destination <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span> destination-port eq <span class="hljs-number">23</span>[R2-acl-adv<span class="hljs-number">-3001</span>]dis <span class="hljs-keyword">this</span>[V200R003C00]#acl number <span class="hljs-number">3001</span>   rule <span class="hljs-number">5</span> deny tcp source <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span> destination <span class="hljs-number">12.1</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span> <span class="hljs-number">0</span> destination-port eq telnet #<span class="hljs-keyword">return</span>#接口入调用 ACL 规则[R2]<span class="hljs-built_in">int</span> gi0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>[R2-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>]traffic-filter inbound acl <span class="hljs-number">3001</span></code></pre><p><font color=red><strong>注：</strong></font></p><ol><li><strong>一个接口的同一个方向，只能调用一个 ACL</strong></li><li><strong>一个 ACL 里面可以有多个 rule 规则，从上往下依次执行</strong></li><li><strong>数据包一旦被某 rule 匹配，就不再继续向下匹配</strong></li><li><strong>默认隐含放过所有（华为的 ACL 用来拒绝数据包时）</strong></li></ol><h1 id="五、NAT（Network-Address-Translation）"><a href="#五、NAT（Network-Address-Translation）" class="headerlink" title="五、NAT（Network Address Translation）"></a>五、NAT（Network Address Translation）</h1><blockquote><p>网络地址转换主要用于实现位于内部网络的主机访问外部网络的功能。当局域网内的主机需要访问外部网络时，通过 NAT 技术可以将其私网地址转换为公网地址，并且多个私网地址可以共用一个公网地址，这样既能保证网络互通，有节省公网地址。</p></blockquote><ul><li>NAT 一般部署在连接内网和外网的网关设备上</li></ul><p><strong>私有地址：任何人都能使用</strong></p><p>A 10.0.0.0/8</p><p>B 172.16.0.0-172.31.255.255</p><p>C 192.168.0.0/16</p><h2 id="5-1-Static-NAT-配置"><a href="#5-1-Static-NAT-配置" class="headerlink" title="5.1 Static NAT 配置"></a>5.1 Static NAT 配置</h2><blockquote><p>一对一（一一映射），一个私网地址对应一个公网地址，外网的用户可以访问内网的主机</p></blockquote><p><img src="/img/Huawei_route/Huawei_route_base_32.jpg"></p><p>基础配置：</p><ol><li>配置好 IP 地址</li><li>出口配置缺省路由<code>[OUT]ip route-static 0.0.0.0 0 12.1.1.6</code></li><li>在企业路由WAN端口（GE 0/0/1）配置 Static NAT</li></ol><pre><code class="hljs routeros">[OUT]int gi 0/0/1[OUT-GigabitEthernet0/0/1]nat static ?  <span class="hljs-builtin-name">enable</span>    <span class="hljs-builtin-name">Enable</span> function  global    Specify global information of<span class="hljs-built_in"> NAT</span>#全局公网地址  protocol  Specify protocol[OUT-GigabitEthernet0/0/1]nat static global 12.1.1.2 ?  inside  Specify inside information of<span class="hljs-built_in"> NAT </span> #内部网络[OUT-GigabitEthernet0/0/1]nat static global 12.1.1.2 inside 192.168.1.2 #将私网地址 1.2 和 12.1.1.2 做一对一映射[OUT-GigabitEthernet0/0/1]dis this[V200R003C00]<span class="hljs-comment">#</span>interface GigabitEthernet0/0/1 description TO_wan<span class="hljs-built_in"> ip address </span>12.1.1.1 255.255.255.248 <span class="hljs-built_in"> nat </span>static global 12.1.1.2 inside 192.168.1.2 netmask 255.255.255.255<span class="hljs-comment">#</span>return</code></pre><p>用内网 PC 192.168.1.2 Ping 百度（9.9.9.9），从企业路由WAN端口（GE 0/0/1）出抓包：</p><p><img src="/img/Huawei_route/Huawei_route_base_33.jpg"></p><p>发现此时内网地址 192.168.1.2 已经被转换为 12.1.1.2 </p><p>调试：查看 NAT 转换过程：</p><pre><code class="hljs routeros">[OUT]dis<span class="hljs-built_in"> nat </span>session protocol icmp <span class="hljs-built_in"> NAT </span>Session Table Information:     Protocol          : ICMP(1)     SrcAddr   Vpn     : 192.168.1.2                                         DestAddr  Vpn     : 9.9.9.9                                            <span class="hljs-built_in"> Type </span>Code IcmpId  : 0   8   49311     NAT-Info       New SrcAddr     : 12.1.1.2              New DestAddr    : ----       New IcmpId      : ----</code></pre><h2 id="5-2-NAPT-Network-Address-Port-Translation"><a href="#5-2-NAPT-Network-Address-Port-Translation" class="headerlink" title="5.2 NAPT (Network Address Port Translation)"></a>5.2 NAPT (Network Address Port Translation)</h2><p>由于NAT实现是私有IP和NAT的公共IP之间的转换，那么，私有网中同时与公共网进行通信的主机数量就受到NAT的公共IP地址数量的限制。为了克服 这种限制，NAT被进一步扩展到在进行IP地址转换的同时进行Port的转换，这就是网络地址端口转换NAPT（Network Address Port Translation）技术。<br>    NAPT与NAT的区别在于，NAPT不仅转换IP包中的IP地址，还对IP包中TCP和UDP的Port进行转换。这使得多台私有网主机利用1个NAT公共IP就可以同时和公共网进行通信。（NAPT多了对TCP和UDP的端口号的转换）</p><pre><code>私有网主机192.168.1.2要访问公共网中的 Http服务器166.111.80.200。首先，要建立TCP连接，假设分配的TCP Port是1010，发送了1个IP包（Des=166.111.80.200:80,Src=192.168.1.2:1010）,当IP包经过NAT 网关时，NAT会将IP包的源IP转换为NAT的公共IP，同时将源Port转换为NAT动态分配的1个Port。然后，转发到公共网，此时IP包 （Des=166.111.80.200：80，Src=202.204.65.2:2010）已经不含任何私有网IP和Port的信息。由于IP包的源 IP和Port已经被转换成NAT的公共IP和Port，响应的IP包 （Des=202.204.65.2:,Src=2010166.111.80.200:80）将被发送到NAT。这时NAT会将IP包的目的IP转换成 私有网主机的IP，同时将目的Port转换为私有网主机的Port，然后将IP包 （Des=192.168.1.2:1010，Src=166.111.80.200:80）转发到私网。对于通信双方而言，这种IP地址和Port的转 换是完全透明的。</code></pre><h2 id="5-3-NAT-–-Easy-IP"><a href="#5-3-NAT-–-Easy-IP" class="headerlink" title="5.3 NAT – Easy IP"></a>5.3 NAT – Easy IP</h2><p>Easy IP 方式的实现原理与上节介绍的地址池NAPT 转换原理类似，可以算是NAPT的一种特例，不同的是Easy IP 方式可以实现自动根据路由器上WAN 接口的公网IP 地址实现与私网IP 地址之间的映射（无需创建公网地址池）。<br>Easy IP 主要应用于将路由器WAN 接口IP 地址作为要被映射的公网IP 地址的情形，特别适合小型局域网接入Internet 的情况。这里的小型局域网主要指中小型网吧、小型办公室等环境，一般具有以下特点：内部主机较少、出接口通过拨号方式获得临时（或固定）公网IP 地址以供内部主机访问Internet。图6-3 所示为Easy IP 方式的实现原理，具体过程如下。<br><img src="/img/Huawei_route/Huawei_route_base_57.jpg"><br>① 假设私网中的Host A 主机要访问公网的Server，首先要向Router 发送一个请求报文（即Outbound 方向），此时报文中的源地址是10.1.1.100，端口号1540。<br>② Router 在收到请求报文后自动利用公网侧WAN 接口临时或者固定的“公网IP地址:端口号”（162.10.2.8:5480），建立与内网侧报文“源IP 地址:源端口号”间的Easy IP转换表项（也包括正、反两个方向），并依据正向Easy IP 表项的查找结果将报文转换后向公网侧发送。此时，转换后的报文源地址和源端口号由原来的（10.1.1.100:1540）转换成了（162.10.2.8:5480）。<br>③ Server 在收到请求报文后需要向Router 发送响应报文（即Inbound 方向），此时只须将收到的请求报文中的源IP 地址、源端口号和目的IP 地址、目的端口号对调即可，即此时的响应报文中的目的IP 地址、目的端口号为162.10.2.8:5480。<br>④ Router 在收到公网侧Server 的回应报文后，根据其“目的IP 地址:目的端口号”查找反向Easy IP 表项，并依据查找结果将报文转换后向内网侧发送。即转换后的报文中的目的IP 地址为10.1.1.100，目的端口号为1540，与Host A 发送请求报文中的源IP地址和源端口完全一样。<br>如果私网中的Host B 也要访问公网，则它所利用的公网IP 地址与Host A 一样，都是路由器WAN 口的公网IP 地址，但转换时所用的端口号一定要与Host A 转换时所用的端口不一样。</p><blockquote><p>允许多个私网地址转换成一个公网 IP ，常用</p></blockquote><p><img src="/img/Huawei_route/Huawei_route_base_32.jpg"></p><p>基础配置：</p><ol><li><p>首先配置 ACL 匹配内网私网地址段</p><pre><code class="hljs angelscript">[OUT]acl <span class="hljs-number">2000</span>[OUT-acl-basic<span class="hljs-number">-2000</span>]rule permit source <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span>[OUT-acl-basic<span class="hljs-number">-2000</span>]dis <span class="hljs-keyword">this</span>[V200R003C00]#acl number <span class="hljs-number">2000</span>   rule <span class="hljs-number">5</span> permit source <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.255</span> #<span class="hljs-keyword">return</span>[OUT-acl-basic<span class="hljs-number">-2000</span>]</code></pre></li></ol><p><font color=red>注：ACL 用来做匹配范围时，没有默认隐含允许所有的规则</font></p><ol start="2"><li><pre><code>[OUT-GigabitEthernet0/0/1]nat ?  outbound  Specify net address translation        #Easy IP，配置 NAT 地址池的转换策略，可以选择匹配ACL模式或不匹配ACL两种模式  server    Specify NAT server            #可以将某服务器的某端口映射出去（安全）  static    Specify static NAT            #静态 NAT，一对一 [OUT-GigabitEthernet0/0/1]nat outbound ?  INTEGER&lt;2000-3999&gt;  Apply basic or advanced ACL        #配置的 ACL 编号[OUT-GigabitEthernet0/0/1]nat outbound 2000 <pre><code class="hljs routeros">   原理：内网私网地址出包时转换成公网接口 WAN（GE 0/0/1）当前的<span class="hljs-built_in"> IP </span>地址<span class="hljs-comment">### 5.3.1 NAT -- Server</span>&gt; 可以将某服务器的某端口映射出去（安全）配置：![](/img/Huawei_route/Huawei_route_base_34.jpg)</code></pre>[OUT-GigabitEthernet0/0/1]nat server protocol tcp global 12.1.1.3 www inside 192.168.1.254 www         #将服务器的80端口映射成公网地址的80端口[OUT-GigabitEthernet0/0/1]dis this[V200R003C00]#interface GigabitEthernet0/0/1description TO_wanip address 12.1.1.1 255.255.255.248 nat server protocol tcp global 12.1.1.3 www inside 192.168.1.254 www#return<pre><code class="hljs http"># 六、广域网封装协议&gt; 广域网中经常会使用串行链路来提供远距离的数据传输，高级数据链路控制 HDLC （  High-Level Data Link Control  ）和点对点协议 PPP （  Point to Point Protocol ）是两种典型的串口封装协议。 ## 6.1 PPP（  Point to Point Protocol ）&gt; PPP （点对点协议）协议是一种点到点链路层协议，主要用于在全双工的同异步链路上进行点到点的数据传输### 6.1.1 PPP 配置![](/img/Huawei_route/Huawei_route_base_35.jpg)</code></pre>[R1]int Serial 4/0/0[R1-Serial4/0/0]ip add 12.1.1.1 24[R1-Serial4/0/0]dis this[V200R003C00]#interface Serial4/0/0link-protocol pppip address 12.1.1.1 255.255.255.0 #return[R1]ping 12.1.1.2PING 12.1.1.2: 56  data bytes, press CTRL_C to break Reply from 12.1.1.2: bytes=56 Sequence=1 ttl=255 time=20 ms Reply from 12.1.1.2: bytes=56 Sequence=2 ttl=255 time=30 ms</code></pre></li></ol><pre><code class="hljs awk">抓包，PPP的封装方式：![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_36.jpg) &lt;font color=red&gt;注：PPP 可以对链路做认证&lt;/font&gt;：PAP 认证、CHAP 认证<span class="hljs-comment">#### PAP认证配置（密码明文传输，两次握手）</span>![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_37.jpg)</code></pre><p>#认证端（服务端）<br>[R2]aaa<br>[R2-aaa]local-user HCNP password cipher hcnp123        #创建本地用户名和密码<br>Info: Add a new user.<br>[R2-aaa]local-user hcnp service-type ppp            #创建的账户用作 ppp 认证<br>[R2]int Serial 4/0/0<br>[R2-Serial4/0/0]ppp authentication-mode pap            #进入接口开启认证</p><p>#被认证端（客户端）<br>[R1]int Serial 4/0/0<br>[R1-Serial4/0/0]ppp pap local-user HCNP password ?<br>  cipher  Display the current password with cipher text<br>  simple  Display the current password with plain text<br>[R1-Serial4/0/0]ppp pap local-user HCNP password simple hcnp123 #发送 pap 用户名密码认证</p><pre><code class="hljs http">#### CHAP 认证配置（三次握手，加密传输）![](/img/Huawei_route/Huawei_route_base_37.jpg)</code></pre><p>#认证端（服务端）<br>[R2-Serial4/0/0]ppp authentication-mode chap<br>[R2-Serial4/0/0]dis this<br>[V200R003C00]<br>#<br>interface Serial4/0/0<br> link-protocol ppp<br> ppp authentication-mode chap<br> ip address 12.1.1.2 255.255.255.0<br>#<br>return</p><p>#被认证端（客户端）<br>[R1-Serial4/0/0]ppp chap user HCNP<br>[R1-Serial4/0/0]ppp chap password simple hcnp123</p><pre><code class="hljs http">## 6.2 HDLC（High-Level Data Link Control ）&gt; HDLC（高级数据链路控制） 是高级数据链路控制协议，是一种数据链路层的协议。HDLC 是一个 ISO 标准的面向位的数据链路协议，其在同步串行数据链路上封装数据，最常用于点对点链接### 6.2.1 HDLC 配置![](/img/Huawei_route/Huawei_route_base_35.jpg)</code></pre><p>[R1]int s4/0/0<br>[R1-Serial4/0/0]dis this<br>[V200R003C00]<br>#<br>interface Serial4/0/0<br> link-protocol ppp                    #华为、H3C 串口默认封装方式为 PPP，思科为 HDLC<br> ip address 12.1.1.1 255.255.255.0<br>#<br>return<br>[R1-Serial4/0/0]link-protocol ?<br>  fr    Select FR as line protocol<br>  hdlc  Enable HDLC protocol<br>  lapb  LAPB(X.25 level 2 protocol)<br>  ppp   Point-to-Point protocol<br>  sdlc  SDLC(Synchronous Data Line Control) protocol<br>  x25   X.25 protocol<br>[R1-Serial4/0/0]link-protocol hdlc         #手动修改成 HDLC<br>Warning: The encapsulation protocol of the link will be changed. Continue? [Y/N]<br>:y<br>[R1-Serial4/0/0]dis this<br>[V200R003C00]<br>#<br>interface Serial4/0/0<br> link-protocol hdlc<br> ip address 12.1.1.1 255.255.255.0<br>#<br>return</p><pre><code class="hljs awk">&lt;font color=red&gt;注：两个相连端口封装方式需要一致，不然无法通信，所以路由 R2 需要做相同配置。&lt;/font&gt;通信抓包：![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_35.jpg)<span class="hljs-comment">## 6.3 FR（Frame-relay）</span>&gt; 帧中继<span class="hljs-comment">### 6.3.1 FR 配置</span>![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_39.jpg)</code></pre><p>[R1-Serial4/0/0]dis this<br>[V200R003C00]<br>#<br>interface Serial4/0/0<br> link-protocol fr<br> ip address 12.1.1.1 255.255.255.0<br>#<br>return</p><p>#查看映射<br>[R1]dis fr map-info<br>Map Statistics for interface Serial4/0/0 (DTE)<br>  DLCI = 102, IP INARP 12.1.1.2, Serial4/0/0<br>    create time = 2020/08/07 09:25:46, status = ACTIVE<br>    encapsulation = ietf, vlink = 2, broadcast</p><pre><code class="hljs shell">抓包：![](/img/Huawei_route_base_40.jpg)<span class="hljs-meta">#</span><span class="bash"> 七、链路聚合</span><span class="hljs-meta">&gt;</span><span class="bash">链路捆绑、端口聚合、eth-channel</span><span class="hljs-meta">&gt;</span><span class="hljs-meta">&gt;</span><span class="bash">随着网络规模不断扩大，用户对骨干链路的带宽和可靠性提出了越来越高的要求。在传统技术中，常用更换高速率的接口板或更换支持高速率接口板的设备的方式来增加带宽，但这种方案需要付出高额的费用，而且不够灵活。</span><span class="hljs-meta">&gt;</span><span class="bash">采用链路聚合技术可以在不进行硬件升级的条件下，通过将多个物理接口捆绑为一个逻辑接口，来达到增加链路带宽的目的。在实现增大带宽目的的同时，链路聚合采用备份链路的机制，可以有效的提高设备之间链路的可靠性。</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## 配置</span></span>![](/img/Huawei_route_base_41.jpg)</code></pre><p>#现状态<br>[SW1]dis stp brief<br> MSTID  Port                        Role  STP State     Protection<br>   0    GigabitEthernet0/0/1        ROOT  FORWARDING      NONE        #FORWARDING：转发<br>   0    GigabitEthernet0/0/2        ALTE  DISCARDING      NONE        #DISCARDING：丢弃<br>   0    GigabitEthernet0/0/3        ALTE  DISCARDING      NONE<br>   0    GigabitEthernet0/0/4        DESI  FORWARDING      NONE</p><p>#配置链路聚合<br>[SW1]int Eth-Trunk 1                #创建逻辑捆绑接口组 1<br>[SW1-GigabitEthernet0/0/1]eth-trunk 1    #进入接口，将接口加入 Eth-Trunk 1<br>[SW1-GigabitEthernet0/0/2]eth-trunk 1<br>[SW1-GigabitEthernet0/0/3]eth-trunk 1<br>#查看配置<br>[SW1]dis eth-trunk<br>Eth-Trunk1’s state information is:<br>WorkingMode: NORMAL         Hash arithmetic: According to SIP-XOR-DIP<br>Least Active-linknumber: 1  Max Bandwidth-affected-linknumber: 8  #最多能捆绑8个链路<br>Operate status: up         Number Of Up Port In Trunk: 3                     </p><hr><p>PortName                      Status      Weight<br>GigabitEthernet0/0/1          Up          1<br>GigabitEthernet0/0/2          Up          1<br>GigabitEthernet0/0/3          Up          1   </p><p>[SW1]dis stp brief<br> MSTID  Port                        Role  STP State     Protection<br>   0    GigabitEthernet0/0/4        DESI  FORWARDING      NONE<br>   0    Eth-Trunk1                  ROOT  FORWARDING      NONE<br>#交换机 R2 同样配置</p><pre><code class="hljs http"># 八、VRRP&gt; Virtual Router Redundancy [rɪˈdʌndənsi] Protocol，**虚拟网关冗余协议**&gt;&gt; 三层网关冗余技术，对用户的网关做冗余## 8.1 配置![](/img/Huawei_route/Huawei_route_base_42.jpg)#### 基础配置- 核心的 IP 地址- 接入层交换机无需配置- 用户网关配置成 192.168.10.1#### VRRP 配置</code></pre><p>#核心1<br>[core1]int gi 0/0/0            #下联用户接口配置<br>[core1-GigabitEthernet0/0/0]vrrp ?<br>  arp       Gratuitous arp<br>  un-check  Uncheck VRRP packet TTL value<br>  vrid      Specify virtual router identifier<br>[core1-GigabitEthernet0/0/0]vrrp vrid ?            #指定虚拟路由器标识符（Specify virtual router identifier）<br>  INTEGER&lt;1-255&gt;  Virtual router identifier<br>[core1-GigabitEthernet0/0/0]vrrp vrid 1 ?<br>  authentication-mode  Specify password and authentication mode<br>  preempt-mode         Specify preempt mode<br>  priority             Specify priority<br>  timer                Specify timer<br>  track                Specify the track configuration<br>  version-3            Specify the device to support V3 for VRRP<br>  virtual-ip           Specify virtual IP address<br>#创建虚拟组1，并指定虚拟 IP 地址，该虚拟地址作为用户网关<br>[core1-GigabitEthernet0/0/0]vrrp vrid 1 virtual-ip 192.168.10.1<br>[core1-GigabitEthernet0/0/0]dis this<br>[V200R003C00]<br>#<br>interface GigabitEthernet0/0/0<br> ip address 192.168.10.253 255.255.255.0<br> vrrp vrid 1 virtual-ip 192.168.10.1<br>#<br>return<br>#核心2同样配置<br>[core2-GigabitEthernet0/0/0]vrrp vrid 1 priority 105    #将优先级改为105作为主路由器，优先级默认是100。数字越大越优先<br>[core2-GigabitEthernet0/0/0]dis this<br>[V200R003C00]<br>#<br>interface GigabitEthernet0/0/0<br> ip address 192.168.10.254 255.255.255.0<br> vrrp vrid 1 virtual-ip 192.168.10.1<br> vrrp vrid 1 priority 105<br>#<br>return<br>#查看 VRRP 状态<br>[core1]dis vrrp brief<br>Total:1     Master:0     Backup:1     Non-active:0<br>VRID  State        Interface                Type     Virtual IP     </p><hr><p>1     Backup       GE0/0/0                  Normal   192.168.10.1 </p><p>[core2]dis vrrp brief<br>Total:1     Master:1     Backup:0     Non-active:0<br>VRID  State        Interface                Type     Virtual IP     </p><hr><p>1     Master       GE0/0/0                  Normal   192.168.10.1 、</p><p>#查看 VRRP 详细信息<br>[core2]dis vrrp<br>  GigabitEthernet0/0/0 | Virtual Router 1<br>    State : Master<br>    Virtual IP : 192.168.10.1<br>    Master IP : 192.168.10.254<br>    PriorityRun : 105<br>    PriorityConfig : 105<br>    MasterPriority : 105<br>    Preempt : YES   Delay Time : 0 s<br>    TimerRun : 1 s<br>    TimerConfig : 1 s<br>    Auth type : NONE                #认证信息<br>    Virtual MAC : 0000-5e00-0101<br>    Check TTL : YES<br>    Config type : normal-vrrp<br>    Backup-forward : disabled<br>    Create time : 2020-08-10 12:19:35 UTC-08:00<br>    Last change time : 2020-08-10 12:24:04 UTC-08:00</p><p>#配置如上联接口断开，降低 master 优先级<br>##配置跟踪上联接口 GE 0/0/1 状态，当发现 GE 0/0/1 口 down 时，将自动降低此路由的优先级-10，以让出 master 的位置<br>[core2-GigabitEthernet0/0/0]vrrp vrid 1 track interface  GigabitEthernet 0/0/1<br>[core2-GigabitEthernet0/0/0]dis this<br>[V200R003C00]<br>#<br>interface GigabitEthernet0/0/0<br> ip address 192.168.10.254 255.255.255.0<br> vrrp vrid 1 virtual-ip 192.168.10.1<br> vrrp vrid 1 priority 105<br> vrrp vrid 1 track（跟踪） interface GigabitEthernet0/0/1<br>#<br>return<br>[core2]dis vrrp<br>  GigabitEthernet0/0/0 | Virtual Router 1<br>    State : Backup<br>    Virtual IP : 192.168.10.1<br>    Master IP : 192.168.10.253<br>    PriorityRun : 95        &lt;—降低后的优先级<br>    PriorityConfig : 105<br>    MasterPriority : 100<br>    Preempt : YES   Delay Time : 0 s<br>    TimerRun : 1 s<br>    TimerConfig : 1 s<br>    Auth type : NONE<br>    Virtual MAC : 0000-5e00-0101<br>    Check TTL : YES<br>    Config type : normal-vrrp<br>    Backup-forward : disabled<br>    Track IF : GigabitEthernet0/0/1   Priority reduced : 10    &lt;—降低优先级10<br>    IF state : DOWN        &lt;—上联端口断开<br>    Create time : 2020-08-10 12:19:35 UTC-08:00<br>    Last change time : 2020-08-10 13:17:30 UTC-08:00</p><p>#开启简单的密码认证，两个核心都需要配置（可选配置）<br>[core2-GigabitEthernet0/0/0]vrrp vrid 1 authentication-mode simple plain 123  #配置简单明文密码123</p><pre><code class="hljs routeros"><span class="hljs-comment">#### 工作原理</span>抓取核心1 GE 0/0/0 口报文![](/img/Huawei_route/Huawei_route_base_43.jpg)核心路由器会每隔一段时间（约1S）发送一个特定的<span class="hljs-built_in"> VRRP </span>报文。如果一段时间没有收到对方发来的<span class="hljs-built_in"> VRRP </span>报文，就认定对方 master 设备出现故障。此时 backup 会总动切换成 master<span class="hljs-comment"># 九、STP （Spanning Tree Protocol）</span>&gt;为了提高网络可靠性，交换网络中通常会使用冗余链路。然而，冗余链路会给交换网络带来环路风险，并导致广播风暴以及 MAC 地址表不稳定等问题，进而会影响到用户的通信质量。生成树协议 STP 可以在提高可靠性的同时又能避免环路带来的各种问题。&lt;font <span class="hljs-attribute">color</span>=red&gt;**作用：防止交换环路**&lt;/font&gt;![](/img/Huawei_route/Huawei_route_base_44.jpg)华为交换机默认开机启动 STP<span class="hljs-comment">## 9.1 实验</span>将交换机 STP 关闭，抓包：![](/img/Huawei_route/Huawei_route_base_44.jpg)</code></pre><p>[SW1]stp disable </p><pre><code class="hljs clean">PC ping ip <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.255</span> ，为广播地址，其目标 MAC 地址为 ff:ff:ff:ff:ff:ff（交换机靠 MAC 转发）![](/img/Huawei_route/Huawei_route_base_45.jpg)### <span class="hljs-number">9.1</span><span class="hljs-number">.1</span> 引发各种问题#### 广播风暴![](/img/Huawei_route/Huawei_route_base_46.jpg)#### MAC 地址表震荡![](/imgHuawei_route<span class="hljs-comment">//Huawei_route_base_47.jpg)</span>## <span class="hljs-number">9.2</span> 工作原理STP通过阻塞端口来消除环路，并能够实现链路备份的目的。查看阻塞端口：</code></pre><p>[SW1]dis stp brief<br> MSTID  Port                        Role  STP State     Protection<br>   0    GigabitEthernet0/0/1        DESI  DISCARDING      NONE<br>   0    GigabitEthernet0/0/2        DESI  DISCARDING      NONE<br>   0    GigabitEthernet0/0/3        ROOT  FORWARDING      NONE</p><pre><code class="hljs angelscript">## <span class="hljs-number">9.3</span> STP 算法先选出不被阻塞的接口，剩下的接口都会被阻塞。### <span class="hljs-number">9.3</span><span class="hljs-number">.1</span> 过程<span class="hljs-number">1.</span> 整个网络（广播域）先选出根桥（根交换机），先比较优先级（默认<span class="hljs-number">32768</span>），再比较 MAC 地址，越小越优先。根桥上面的端口都是**指定端口**![](/img/Huawei_route/Huawei_route_base_48.jpg)显示：</code></pre><p><SW1>dis stp<br>——-[CIST Global Info][Mode MSTP]——-<br>CIST Bridge         :32768.4c1f-cc6b-2dc9     #桥ID（优先级+MAC）<br>Config Times        :Hello 2s MaxAge 20s FwDly 15s MaxHop 20<br>Active Times        :Hello 2s MaxAge 20s FwDly 15s MaxHop 20<br>CIST Root/ERPC      :32768.4c1f-cc5f-2395 / 20000   #显示根桥信息<br>CIST RegRoot/IRPC   :32768.4c1f-cc6b-2dc9 / 0<br>CIST RootPortId     :128.3<br>BPDU-Protection     :Disabled<br>TC or TCN received  :5<br>TC count per hello  :0<br>STP Converge Mode   :Normal<br>Time since last TC  :0 days 0h:17m:53s<br>Number of TC        :6<br>Last TC occurred    :GigabitEthernet0/0/1<br>—-[Port1(GigabitEthernet0/0/1)][FORWARDING]—-<br> Port Protocol       :Enabled<br> Port Role           :Designated Port<br> Port Priority       :128<br> Port Cost(Dot1T )   :Config=auto / Active=20000<br> Designated Bridge/Port   :32768.4c1f-cc6b-2dc9 / 128.1<br> Port Edged          :Config=default / Active=disabled<br> Point-to-point      :Config=auto / Active=true<br> Transit Limit       :147 packets/hello-time<br> Protection Type     :None<br>  —- More —-</p><pre><code class="hljs">2. 非根桥上面选举根端口（根端口有且仅有一个）到达根桥最近的端口当选为根端口非根交换机在选举根端口时分别依据该端口的根路劲开销、对端BID（桥ID）、对端 PID 和本端 PID![](/img/Huawei_route_base_49.jpg)3. 每段链路必须选举一个指定端口（且只有一个），桥 ID （优先级+MAC）较小的交换机上面的端口当选为指定端口![](/img/Huawei_route_base_50.jpg)4. 剩下的端口全部被阻塞![](/img/Huawei_route_base_51.jpg)查看状态：</code></pre><p><SW2>dis stp brief<br> MSTID  Port                        Role  STP State     Protection<br>   0    GigabitEthernet0/0/1        ALTE  DISCARDING      NONE    #阻塞<br>   0    GigabitEthernet0/0/2        ROOT  FORWARDING      NONE</p><pre><code class="hljs">## 9.4 更改交换机的优先级</code></pre><p>[SW2]stp priority ?<br>  INTEGER&lt;0-61440&gt;  Bridge priority, in steps of 4096   #需要4096的倍数</p><p>[SW2]stp priority 0   #将优先级改为0<br>#或者直接设置为根桥<br>[SW2]stp root ?<br>  primary    Primary root switch    #设置为根桥<br>  secondary  Secondary root switch  #设备备份根桥</p><pre><code class="hljs elixir">![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_51.jpg)----------------&gt;![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_52.jpg)<span class="hljs-comment">## 9.5 BPDU 报文</span>BPDU 包含桥 ID、路径开销、端口 ID、计数器等参数![](<span class="hljs-regexp">/img/</span>Huawei_route/Huawei_route_base_53.jpg)<span class="hljs-comment">## 9.6 端口重启过程</span>down ---&gt; listening ---&gt; learning ---&gt; forwarding此过程大概 <span class="hljs-number">30</span>slistening：监听端口learning：检测该端口是否需要阻塞，如要阻塞，则阻塞端口，防止环路设置边缘端口：建议将接 PC 的接口配置为边缘端口（减少接口的收敛时间）</code></pre><p>[SW1-GigabitEthernet0/0/1]stp edged-port enable</p><pre><code class="hljs dts"><span class="hljs-meta">## 9.7 STP 根保护</span>一旦使能根保护功能的指定端口收到优先级更低的 BPUD 时，端口状态将进入 Discarding 状态，不再转发报文。经过一段时间（通常为两倍的 Forward Delay）,如果端口一直没有再收到优先级较高（数值低）的 BPUD，端口会自动恢复到正常的 Forwarding 状态。<span class="hljs-params">&lt;font color=red&gt;</span>注：该指令只能在指定端口配置才会生效<span class="hljs-params">&lt;/font&gt;</span>![](<span class="hljs-meta-keyword">/img/</span>Huawei_route/Huawei_route_base_54.jpg)在根桥上的两个端口设置根保护，在 SW1 上接个优先级为 <span class="hljs-number">0</span> 的交换机</code></pre><p>[SW2-GigabitEthernet0/0/1]stp root-protection<br>[SW2-GigabitEthernet0/0/2]stp root-protection<br>#接上优先级为0的交换机，发现根桥设置根保护的端口为阻塞状态<br>[SW2]dis stp brief<br> MSTID  Port                        Role  STP State     Protection<br>   0    GigabitEthernet0/0/1        DESI  DISCARDING      ROOT<br>   0    GigabitEthernet0/0/2        DESI  DISCARDING      ROOT</p><pre><code class="hljs dts"><span class="hljs-meta">## 9.8 STP BPDU 防护</span>作用：保护根桥（全局），开启 BPDU 保护后，如果从<span class="hljs-params">&lt;font color=red&gt;</span>边缘端口<span class="hljs-params">&lt;/font&gt;</span>收到 STP 报文，交换机会自动将该接口 shutdown，从而确保根桥不会被抢占，同时确保不会出现环路。![](<span class="hljs-meta-keyword">/img/</span>Huawei_route/Huawei_route_base_54.jpg)</code></pre><p>#首先在 SW1 上的 GE 0/0/1 口配置边缘接口<br>[SW1-GigabitEthernet0/0/1]stp edged-port enable<br>在交换机 SW1 上配置 STP BPUD 防护<br>[SW1]stp bpdu-protection<br>#30S 后自动 up ，自动恢复机制<br>[SW1]error-down auto-recovery cause bpdu-protection interval 30</p><pre><code class="hljs clean">## <span class="hljs-number">9.9</span> RSTPRapaid STP  快速的生成树协议，STP 升级版设置:</code></pre><p>[SW2]stp mode rstp    #将 STP 模式切换为 RSTP</p><pre><code class="hljs http"># 十、IPV6&gt;Internal protocol version 6ipv4 32bit 地址个数为 2^32ipv6 128bit 地址个数为 2^128ipv6 实例：**2001:0DB8:0000:0000:0000:0000:0346:8D58**ipv6 由8个字段组成，每个字段占16个 bit上面地址简写：2001:DB8:0:0:0:0:346:8D58 ---&gt; 2001:DB8::346:8D58## 10.1 特殊 ipv6 地址1. ::1 本地环回地址2. :: 相当于 ipv4 0.0.0.03. FF 开头 组播 v6 地址 例如：FF::5 类似于224.0.0.5## 10.2 ipv6 静态路由配置![](/img/Huawei_route/Huawei_route_base_56.jpg)</code></pre><p>[R1]ipv6      #全局使能 ipv6 功能<br>[R1-GigabitEthernet0/0/1]ipv6 enable<br>[R1-GigabitEthernet0/0/1]ipv6 address 12::1 ?<br>  INTEGER&lt;1-128&gt;  IPv6 prefix length &lt;1-128&gt;<br>  link-local      Use link-local address<br>[R1-GigabitEthernet0/0/1]ipv6 address 12::1 64  #设置 ipv6 地址和前缀长度64<br>#查看路由器接口信息<br>[R1]dis ipv6 int brief<br>*down: administratively down<br>(l): loopback<br>(s): spoofing<br>Interface                    Physical              Protocol<br>GigabitEthernet0/0/0         up                    up<br>[IPv6 Address] 2001::1<br>GigabitEthernet0/0/1         up                    up<br>[IPv6 Address] 12::1<br>#查看路由表<br>[R1]dis ipv6 routing-table<br>#配置静态路由<br>[R1]ipv6 route-static 2002:: 64 12::2<br>#在 R2 配置缺省路由<br>[R2]ipv6 route-static :: 0 12::1<br>#查看 R1 路由表<br>[R1]dis ipv6 routing-table<br>Routing Table : Public<br>    Destinations : 7    Routes : 7</p><p> Destination  : ::1                             PrefixLength : 128<br> NextHop      : ::1                             Preference   : 0<br> Cost         : 0                               Protocol     : Direct<br> RelayNextHop : ::                              TunnelID     : 0x0<br> Interface    : InLoopBack0                     Flags        : D</p><p> Destination  : 2002::                          PrefixLength : 64<br> NextHop      : 12::2                           Preference   : 60<br> Cost         : 0                               Protocol     : Static<br> RelayNextHop : ::                              TunnelID     : 0x0<br> Interface    : GigabitEthernet0/0/1            Flags        : RD</p><pre><code>ipv6 报文：![](/img/Huawei_route/Huawei_route_base_54.jpg)## 10.3 IPV6 地址分类#### 单播#### 组播#### 任意播（取消广播概念）ipv6 无状态自动配置：PC 会通过发送特定类型的 icmp 报文请求路由器接口前缀，结合自己的 MAC 地址自动生成全球独一无二的 ipv6 地址ipv6 中以 FE80:: 开头的地址都属于本地链路地址（Link-local），只有在本地链路有效。启用了 ipv6 功能的接口都会自动生成相应的 Link-local 地址。</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HCNA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP UDP 的区别</title>
    <link href="/2020/07/24/tcp_udp/"/>
    <url>/2020/07/24/tcp_udp/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>可靠传输、面向连接：速度慢，但是准确性高 </p><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><p>客户端收到报文后，需要发送 TCP 的 ACK 确认包，并告诉服务端接下来要收到的报文的序号。同时该过程确定了两者传输的 “Windows 窗口”大小。</p><h2 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h2><p>如果某应用层协议的四层使用 TCP 端口，那么在正式的数据报文传输之前，需要先建立完连接后才可以传输数据。</p><p>建立连接：<font color=red>三次握手</font>—面向连接的高层协议在正式传输数据之前需要先建立连接，建立连接的过程需要来回交互三个报文（[SYN]-[SYN,ACK]-[ACK]）</p><p><img src="/img/tcp_udp/tcp_udp_4.jpg"> </p><p>①次握手 客户端–SYN–&gt;服务器</p><p><img src="/img/tcp_udp/tcp_udp_1.jpg"> </p><p>②次握手 服务器–SYN+ACK–&gt;客户端</p><p><img src="/img/tcp_udp/tcp_udp_2.jpg"> </p><p>③次握手 客户端–ACK–&gt;服务器</p><p><img src="/img/tcp_udp/tcp_udp_3.jpg"> </p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>不可靠传输，非面向连接：速度快，但准确性差</p><h1 id="Wireshark-过滤规则"><a href="#Wireshark-过滤规则" class="headerlink" title="Wireshark 过滤规则"></a>Wireshark 过滤规则</h1><p>ip.addr == 59.36.202.3 过滤出包含 59.36.202.3 的报文</p><p>ip.src == x.x.x.x 源地址</p><p>ip.dst == x.x.x.x 目标</p><p>tcp.dstport == 80 过滤出目标端口为 80 端口</p><p>tcp.srcport == 80 过滤出源端口为 80 端口</p><p>eth.dst == 48:89:e7:ae:71:53 过滤出目标 MAC 地址</p><p>eth.src == 48:89:e7:ae:71:53 过滤出源 MAC 地址</p><p>http 过滤高层协议</p><p>and or not 同时过滤–&gt; tcp or http and (not xxx)</p><h1 id="常用协议端口号"><a href="#常用协议端口号" class="headerlink" title="常用协议端口号"></a>常用协议端口号</h1><p>HTTP : tcp 80 网页浏览</p><p>telnet : tcp 23 远程控制</p><p>FTP : tcp 20 21 文件传输</p><p>RDP : tcp 3389 远程桌面</p><h1 id="用-telnet-测试某个端口是否开放"><a href="#用-telnet-测试某个端口是否开放" class="headerlink" title="用 telnet 测试某个端口是否开放"></a>用 telnet 测试某个端口是否开放</h1><p>未打开：</p><pre><code class="hljs routeros">[root@localhost ~]# telnet 192.168.2.89 3389Trying 192.168.2.89<span class="hljs-built_in">..</span>.telnet: connect <span class="hljs-keyword">to</span><span class="hljs-built_in"> address </span>192.168.2.89: <span class="hljs-literal">No</span><span class="hljs-built_in"> route </span><span class="hljs-keyword">to</span> host</code></pre><p>打开状态：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# telnet <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.98</span> <span class="hljs-number">3389</span>Trying <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.98</span>...</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP 子网划分</title>
    <link href="/2020/07/22/ip_netmask/"/>
    <url>/2020/07/22/ip_netmask/</url>
    
    <content type="html"><![CDATA[<h2 id="IP地址（Internet-Protocol）"><a href="#IP地址（Internet-Protocol）" class="headerlink" title="IP地址（Internet Protocol）"></a>IP地址（Internet Protocol）</h2><p>在互联网漫游的计算机的身份ID。唯一标识一台网络设备的身份ID。</p><p>IP 地址为：网络位 + 主机位 -&gt; 子网掩码下详解</p><p>IPV4地址：点分十进制 32bit</p><p>192.168.1.1-&gt;11000000.10101000.00000001.00000001</p><table><thead><tr><th align="center">1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td align="center">2<sup>7</sup>=128</td><td>2<sup>6</sup>=64</td><td>2<sup>5</sup>=32</td><td>2<sup>4</sup>=16</td><td>2<sup>3</sup>=8</td><td>2<sup>2</sup>=4</td><td>2<sup>1</sup>=2</td><td>2<sup>0</sup>=1</td></tr><tr><td align="center">128</td><td>192</td><td>224</td><td>240</td><td>248</td><td>252</td><td>254</td><td>255</td></tr></tbody></table><a id="more"></a><h2 id="子网掩码（Netmask）"><a href="#子网掩码（Netmask）" class="headerlink" title="子网掩码（Netmask）"></a>子网掩码（Netmask）</h2><p>子网掩码是一个32位地址，用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在广域网上。</p><p><strong>例子：</strong>  </p><p>ip：192.168.1.1</p><p>二进制：11000000.10101000.00000001.00000001</p><p>netmask：255.255.255.0</p><p>二进制：<font color=green > 11111111.11111111.11111111</font>.<font color=blue > 00000000</font></p><p>根据二进制子网掩码，绿色为网络位，蓝色为主机位，即：</p><p>网络位：子网掩码1 bit 对应的位</p><p>主机位：子网掩码0 bit 对应的位</p><p>网络位为：192.168.1-&gt;11000000.10101000.00000001</p><p>主机位：00000001</p><p>主机位全0：子网地址</p><p>主机位全1：子网广播地址</p><p><font color=red >注：主机位全 0 全1 的 ip 地址和掩码的组合是无效的。</font></p><p><strong>例子：</strong></p><p>192.168.1.127 255.255.255.128</p><p>192.168.1.0—1111111</p><p>255.255.255.1—0000000</p><h2 id="网段"><a href="#网段" class="headerlink" title="网段"></a>网段</h2><p>具有<font color=red >相同网络位</font>的ip和掩码的组合称为同一个网段（局域网、子网）</p><p><font color=red >注：同一网段的PC互通不需要网关。</font></p><p><strong>例子：</strong></p><p>已知某个网络的掩码是 255.255.248.0，下面属于同一网段的是:</p><p>A. 10.110.16.1 和 10.110.25.1</p><p>B. 10.76.129.21 和 10.76.137.1</p><p>C.  10.52.57.34 和 10.52.62.2</p><p>D. 10.33.23.2 和 10.33.31.1</p><p>解：</p><p>子网掩码 255.255.248.0 -&gt; </p><p>-&gt;二进制 <font color=green >255.255.11111</font>   <font color=blue >000.0</font></p><p><font color=green >绿色：网络位</font>         <font color=blue >蓝色：主机位</font></p><p>A.</p><p><font color=green >10.110.  00010</font>   <font color=blue >000.1</font><br><font color=green >10.110.  00011</font>   <font color=blue >001.1</font></p><p>B.</p><p><font color=green >10.76.    10000</font>   <font color=blue >001.21</font><br><font color=green >10.76.    10001</font>   <font color=blue >001.1</font>  </p><p>C.</p><p><font color=green >10.52.    00111</font>   <font color=blue >001.34</font><br><font color=green >10.52.    00111</font>   <font color=blue >110.2</font></p><p>D.</p><p><font color=green >10.22.    00010</font>   <font color=blue >111.2</font><br><font color=green >10.33.    00011</font>   <font color=blue >111.1</font></p><p><strong>例子：</strong></p><p>172.16.0.0/16 分成6个子网段：</p><p>2^n&gt;=6 n=3 需要3个 bit 的子网位 </p><p>172.16.<font color=red ><strong>000</strong></font>00000.0</p><ol><li>172.16.<font color=red ><strong>000</strong></font>00000.0 –&gt; 172.16.0.0/19</li><li>172.16.<font color=red ><strong>001</strong></font>00000.0 –&gt; 172.16.32.0/19</li><li>172.16.<font color=red ><strong>010</strong></font>00000.0 –&gt; 172.16.64.0/19</li><li>172.16.<font color=red ><strong>011</strong></font>00000.0 </li><li>172.16.<font color=red ><strong>100</strong></font>00000.0 </li><li>172.16.<font color=red ><strong>101</strong></font>00000.0 </li><li>172.16.<font color=red ><strong>110</strong></font>00000.0 </li><li>172.16.<font color=red ><strong>111</strong></font>00000.0 </li></ol><h2 id="网关（Gateway）"><a href="#网关（Gateway）" class="headerlink" title="网关（Gateway）"></a>网关（Gateway）</h2><p>当 PC 访问不同网段的服务时，需要将数据交给网关处理</p><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p>time to live：生命周期，指定IP包被路由器丢弃之前允许通过的最大网段数量。</p><h2 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h2><p>测试本地到达目标所经过的三层设备</p><pre><code class="hljs angelscript">C:\Users\ecarry&gt;tracert www.baidu.com通过最多 <span class="hljs-number">30</span> 个跃点跟踪到 www.a.shifen.com [<span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span>] 的路由:  <span class="hljs-number">1</span>     *        *       &lt;<span class="hljs-number">1</span> 毫秒 OPENWRT [<span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.3</span>]  <span class="hljs-number">2</span>     <span class="hljs-number">1</span> ms    &lt;<span class="hljs-number">1</span> 毫秒   &lt;<span class="hljs-number">1</span> 毫秒 RT-AC1200G+<span class="hljs-number">-3220</span> [<span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>]  <span class="hljs-number">3</span>     <span class="hljs-number">1</span> ms     <span class="hljs-number">1</span> ms    &lt;<span class="hljs-number">1</span> 毫秒 SMBSHARE [<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>]  <span class="hljs-number">4</span>    <span class="hljs-number">15</span> ms    <span class="hljs-number">22</span> ms     <span class="hljs-number">4</span> ms  <span class="hljs-number">100.64</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  <span class="hljs-number">5</span>     *        *        *     请求超时。  <span class="hljs-number">6</span>     <span class="hljs-number">7</span> ms     <span class="hljs-number">7</span> ms     <span class="hljs-number">6</span> ms  <span class="hljs-number">120.36</span><span class="hljs-number">.57</span><span class="hljs-number">.29</span>  <span class="hljs-number">7</span>     *        *        *     请求超时。  <span class="hljs-number">8</span>    <span class="hljs-number">22</span> ms    <span class="hljs-number">22</span> ms    <span class="hljs-number">23</span> ms  <span class="hljs-number">113.96</span><span class="hljs-number">.4</span><span class="hljs-number">.126</span>  <span class="hljs-number">9</span>    <span class="hljs-number">23</span> ms    <span class="hljs-number">23</span> ms     *     <span class="hljs-number">98.96</span><span class="hljs-number">.135</span><span class="hljs-number">.219</span>.broad.fs.gd.dynamic<span class="hljs-number">.163</span>data.com.cn [<span class="hljs-number">219.135</span><span class="hljs-number">.96</span><span class="hljs-number">.98</span>] <span class="hljs-number">10</span>    <span class="hljs-number">20</span> ms    <span class="hljs-number">20</span> ms    <span class="hljs-number">20</span> ms  <span class="hljs-number">14.29</span><span class="hljs-number">.117</span><span class="hljs-number">.246</span> <span class="hljs-number">11</span>     *        *        *     请求超时。 <span class="hljs-number">12</span>     *        *        *     请求超时。 <span class="hljs-number">13</span>    <span class="hljs-number">19</span> ms    <span class="hljs-number">19</span> ms    <span class="hljs-number">18</span> ms  <span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span></code></pre><h2 id="ARP-Address-Resolution解析-Protocol"><a href="#ARP-Address-Resolution解析-Protocol" class="headerlink" title="ARP(Address Resolution解析 Protocol)"></a>ARP(Address Resolution解析 Protocol)</h2><p>通过目的 IP 地址，请求对方 MAC 地址的过程</p><p><img src="/img/ip_netmask/ip_netmask_0.jpg"></p><p>一台主机向另外一台主机发送 ARP Request 的目的 MAC 地址为<font color=red >广播 MAC 地址</font>（FFFF.FFFF.FFFF），其请求包（request）结构为</p><p><img src="/img/ip_netmask/ip_netmask_1.jpg"></p><p>查看 APR 缓存表，通过命令<code>arp -a</code>查看，通过<code>arp -d</code>删除缓存表</p><pre><code class="hljs routeros">PC&gt;arp -a  Internet<span class="hljs-built_in"> Address </span>     Physical<span class="hljs-built_in"> Address </span>     Type  192.168.1.30          00d0.582e.0b9b        dynamic</code></pre><p>ARP 回应包（reply）结构：</p><p><img src="/img/ip_netmask/ip_netmask_2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 Linux 分区的小事</title>
    <link href="/2020/06/09/Linux_part/"/>
    <url>/2020/06/09/Linux_part/</url>
    
    <content type="html"><![CDATA[<h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><blockquote><p>分区是为了在逻辑上将某些柱面隔开形成边界。它是以柱面为单位来划分的，但是从CentOS 7开始，是按照扇区进行划分的。</p><p>在磁盘数据量非常大的情况下，划分分区的好处是扫描块位图等更快速：不用再扫描整块磁盘的块位图，只需扫描对应分区的块位图。</p></blockquote><h2 id="分区方法（MBR、GPT）"><a href="#分区方法（MBR、GPT）" class="headerlink" title="分区方法（MBR、GPT）"></a>分区方法（MBR、GPT）</h2><h3 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h3><p>MBR格式的磁盘中，会维护磁盘第一个扇区——MBR扇区，在该扇区中第446字节之后的64字节是分区表，每个分区占用16字节，所以限制了一块磁盘最多只能有4个主分区(Primary,P)，如果多于4个区，只能将主分区少于4个，通过建立扩展分区(Extend,E)，然后在扩展分区建立逻辑分区(Logical,L)的方式来突破4个分区的限制，逻辑分区的数量不限制。</p><p>在Linux中，MBR格式的磁盘主分区号从1-4，扩展分区号从2-4，逻辑分区号从5开始。</p><p><strong>例如</strong>，一块盘想分成6个分区，可以：</p><p>1P+5L：sda1+sda5+sda6+sda7+sda8+sda9</p><p>2P+4L：sda1+sda2+sda5+sda6+sda7+sda8</p><p>3P+3L：sda1+sda2+sda3+sda5+sda6+sda7</p><h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h3><p>GPT格式突破了MBR的限制，它不再限制只能存储4个分区表条目，而是使用了类似MBR扩展分区表条目的格式，它允许有128个主分区，这也使得它可以对超过2TB的磁盘进行分区。</p><h2 id="MBR-和-GPT-分区表信息"><a href="#MBR-和-GPT-分区表信息" class="headerlink" title="MBR 和 GPT 分区表信息"></a>MBR 和 GPT 分区表信息</h2><p>在MBR格式分区表中，MBR扇区占用512个字节，前446个字节是主引导记录，即boot loader。中间64字节记录着分区表信息，每个主分区信息占用16字节，因此最多只能有4个主分区，最后2个字节是有效标识位。如果使用扩展分区，则扩展分区对应的16字节记录的是指向扩展分区中扩展分区表的指针。</p><p><img src="/img/linux_part/linux_part_1.png"></p><p>在MBR磁盘上，分区和启动信息是保存在一起的，如果这部分数据被覆盖或破坏，只能重建MBR。而GPT在整个磁盘上保存多个这部分信息的副本，因此它更为健壮，并可以恢复被破坏的这部分信息。GPT还为这些信息保存了循环冗余校验码(CRC)以保证其完整和正确，如果数据被破坏，GPT会发现这些破坏，并从磁盘上的其他地方进行恢复。</p><p>下面是GPT格式的分区表信息，大致约占17个字节。</p><p><img src="/img/linux_part/linux_part_2.png"></p><p>EFI部分可以分为4个区域：EFI信息区(GPT头)、分区表、GPT分区区域和备份区域。</p><ul><li>EFI信息区(GPT头)：起始于磁盘的LBA1，通常也只占用这个单一扇区。其作用是定义分区表的位置和大小。GPT头还包含头和分区表的校验和，这样就可以及时发现错误。</li><li>分区表：分区表区域包含分区表项。这个区域由GPT头定义，一般占用磁盘LBA2～LBA33扇区，每扇区可存储4个主分区的分区信息，所以共能分128个主分区。分区表中的每个分区项由起始地址、结束地址、类型值、名字、属性标志、GUID值组成。分区表建立后，128位的GUID对系统来说是唯一的。</li><li>GPT分区：最大的区域，由分配给分区的扇区组成。这个区域的起始和结束地址由GPT头定义。</li><li>备份区：备份区域位于磁盘的尾部，包含GPT头和分区表的备份。它占用GPT结束扇区和EFI结束扇区之间的33个扇区。其中最后一个扇区用来备份1号扇区的EFI信息，其余的32个扇区用来备份LBA2～LBA33扇区的分区表。</li></ul><h2 id="添加磁盘"><a href="#添加磁盘" class="headerlink" title="添加磁盘"></a>添加磁盘</h2><p>正常情况下，添加磁盘后需要重启系统才能被内核识别，在 /dev/ 下才有对应的设备号，使用 fdisk -l 才会显示出来。但是有时候不方便重启，所以下面介绍一种磁盘热插拔方式。</p><h3 id="Linux上磁盘热插拔"><a href="#Linux上磁盘热插拔" class="headerlink" title="Linux上磁盘热插拔"></a>Linux上磁盘热插拔</h3><p>获取 SCSI 设备信息：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# lsscsi[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]    cd/dvd  QEMU     QEMU DVD-ROM     <span class="hljs-number">2.5</span>+  /dev/sr0 [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]    disk    WD       Elements SE <span class="hljs-number">25</span>FE <span class="hljs-number">1021</span>  /dev/sdb [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]    enclosu WD       SES Device       <span class="hljs-number">1021</span>  -        [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]    disk    QEMU     QEMU HARDDISK    <span class="hljs-number">2.5</span>+  /dev/sda</code></pre><p>有些操作系统没有 lsscsi 命令，则可以使用下面的方法获取 scsi 设备信息：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# ll /sys/bus/scsi/drivers/sd/总用量 <span class="hljs-number">0</span>lrwxrwxrwx. <span class="hljs-number">1</span> root root    <span class="hljs-number">0</span> <span class="hljs-number">8</span>月   <span class="hljs-number">9</span> <span class="hljs-number">15</span>:<span class="hljs-number">54</span> <span class="hljs-number">2</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span> -&gt; ../../../../devices/pci0000:<span class="hljs-number">00</span>/<span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">1</span>e<span class="hljs-number">.0</span>/<span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">1</span>b<span class="hljs-number">.0</span>/usb3/<span class="hljs-number">3</span><span class="hljs-number">-1</span>/<span class="hljs-number">3</span><span class="hljs-number">-1</span>:<span class="hljs-number">1.0</span>/host2/target2:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>/<span class="hljs-number">2</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>lrwxrwxrwx. <span class="hljs-number">1</span> root root    <span class="hljs-number">0</span> <span class="hljs-number">8</span>月   <span class="hljs-number">9</span> <span class="hljs-number">15</span>:<span class="hljs-number">54</span> <span class="hljs-number">3</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span> -&gt; ../../../../devices/pci0000:<span class="hljs-number">00</span>/<span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">05.0</span>/virtio1/host3/target3:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>/<span class="hljs-number">3</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>--w-------. <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> <span class="hljs-number">8</span>月   <span class="hljs-number">9</span> <span class="hljs-number">15</span>:<span class="hljs-number">54</span> bind--w-------. <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> <span class="hljs-number">7</span>月  <span class="hljs-number">20</span> <span class="hljs-number">18</span>:<span class="hljs-number">39</span> uevent--w-------. <span class="hljs-number">1</span> root root <span class="hljs-number">4096</span> <span class="hljs-number">8</span>月   <span class="hljs-number">9</span> <span class="hljs-number">15</span>:<span class="hljs-number">54</span> unbind[<span class="hljs-symbol">root@</span>localhost ~]# ll /sys/bus/scsi/drivers/sd/<span class="hljs-number">2</span>\:<span class="hljs-number">0</span>\:<span class="hljs-number">0</span>\:<span class="hljs-number">0</span>/block/总用量 <span class="hljs-number">0</span>drwxr-xr-x. <span class="hljs-number">8</span> root root <span class="hljs-number">0</span> <span class="hljs-number">7</span>月  <span class="hljs-number">20</span> <span class="hljs-number">18</span>:<span class="hljs-number">39</span> sdb</code></pre><p>然后查看 /proc/scsi/scsi 文件，获取对应scsi设备的详细信息：</p><pre><code class="hljs tcl">[root@localhost ~]# cat /<span class="hljs-keyword">proc</span>/scsi/scsi Attached<span class="hljs-title"> devices:</span><span class="hljs-title">Host:</span> scsi1<span class="hljs-title"> Channel:</span> 00<span class="hljs-title"> Id:</span> 00<span class="hljs-title"> Lun:</span> 00<span class="hljs-title">  Vendor:</span> QEMU<span class="hljs-title">     Model:</span> QEMU<span class="hljs-title"> DVD-ROM</span> <span class="hljs-title">    Rev:</span> 2.5+<span class="hljs-title">  Type:</span> <span class="hljs-title">  CD-ROM</span> <span class="hljs-title">                          ANSI</span> <span class="hljs-title"> SCSI</span> revision: 05Host:<span class="hljs-title"> scsi3</span> Channel: 00<span class="hljs-title"> Id:</span> 00<span class="hljs-title"> Lun:</span> 00&lt;-----/dev/sda<span class="hljs-title">  Vendor:</span> QEMU<span class="hljs-title">     Model:</span> QEMU<span class="hljs-title"> HARDDISK</span> <span class="hljs-title">   Rev:</span> 2.5+<span class="hljs-title">  Type:</span> <span class="hljs-title">  Direct-Access</span> <span class="hljs-title">                   ANSI</span> <span class="hljs-title"> SCSI</span> revision: 05Host:<span class="hljs-title"> scsi2</span> Channel: 00<span class="hljs-title"> Id:</span> 00<span class="hljs-title"> Lun:</span> 00&lt;-----/dev/sdb<span class="hljs-title">  Vendor:</span> WD<span class="hljs-title">       Model:</span> Elements<span class="hljs-title"> SE</span> 25FE<span class="hljs-title"> Rev:</span> 1021<span class="hljs-title">  Type:</span> <span class="hljs-title">  Direct-Access</span> <span class="hljs-title">                   ANSI</span> <span class="hljs-title"> SCSI</span> revision: 06Host:<span class="hljs-title"> scsi2</span> Channel: 00<span class="hljs-title"> Id:</span> 00<span class="hljs-title"> Lun:</span> 01<span class="hljs-title">  Vendor:</span> WD<span class="hljs-title">       Model:</span> SES<span class="hljs-title"> Device</span> <span class="hljs-title">      Rev:</span> 1021<span class="hljs-title">  Type:</span> <span class="hljs-title">  Enclosure</span> <span class="hljs-title">                       ANSI</span> <span class="hljs-title"> SCSI</span> revision: 06</code></pre><p>在此处，有两块<strong>直连</strong>(<strong>Direct-Access</strong>)的 scsi 磁盘，一块通过光驱cd-rom连接的光盘。我们只考虑 scsi 磁盘，所以这两块磁盘在 scsi 中的定位符为2:0:0:0和3:0:0:0。<strong>如果继续插入一块盘，那么新盘在scsi中的定位符可能为4:0:0:0</strong>，这个数值串非常重要。</p><h4 id="热插"><a href="#热插" class="headerlink" title="热插"></a>热插</h4><p>在向计算机中插入一块磁盘后，内核因为识别不了它所以不会产生任何事件通知，因此在 /sys 目录中不会产生任何文件，任何工具也就读取不了它。重启系统肯定是可以解决的，但是Linux支持热插。</p><p>热插新盘的方式是向 /proc/scsi/scsi 中写入新 scsi 设备的信息。方式如下：</p><p><code>echo &quot;scsi add-single-device a b c d&quot; &gt;/proc/scsi/scsi</code></p><p>其中：</p><p>   a == hostadapter id (first one being 0)</p><p>   b == SCSI channel on hostadapter (first one being 0)</p><p>   c == ID</p><p>   d == LUN (first one being 0)</p><p>例如上面的例子，应该添加如下信息：</p><p><code>[root@localhost ~]# echo &quot;scsi add-single-device 4:0:0:0&quot; &gt;/proc/scsi/scsi</code></p><p>重新扫描 scsi 总线也可以实现热插的功能，查看主机 SCSI 总线号：</p><pre><code class="hljs gradle">[root@localhost ~]# ls <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host0  host1  host2  host3#重新扫描scsi总线以热插拔方式添加新设备。[root@localhost ~]# echo <span class="hljs-string">&quot;- - -&quot;</span> &gt; <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host0/scan[root@localhost ~]# echo <span class="hljs-string">&quot;- - -&quot;</span> &gt; <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host1/scan[root@localhost ~]# echo <span class="hljs-string">&quot;- - -&quot;</span> &gt; <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host2/scan[root@localhost ~]# echo <span class="hljs-string">&quot;- - -&quot;</span> &gt; <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host3/scan[root@localhost ~]# fdisk -l      # 再查看就有了</code></pre><p>如果 scsi_host 目录系很多hostN目录，则使用循环来完成：</p><pre><code class="hljs gradle">[root@localhost ~]# ls <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host0   host11  host14  host17  host2   host22  host25  host28  host30  host4  host7host1   host12  host15  host18  host20  host23  host26  host29  host31  host5  host8host10  host13  host16  host19  host21  host24  host27  host3   host32  host6  host9[root@localhost ~]# <span class="hljs-keyword">for</span> i in <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/scsi_host/</span>host*/scan;<span class="hljs-keyword">do</span> echo <span class="hljs-string">&quot;- - -&quot;</span> &gt;$i;done</code></pre><p>热插之后，fdisk -l等命令就可以识别到该磁盘了。</p><h4 id="热拔"><a href="#热拔" class="headerlink" title="热拔"></a>热拔</h4><p>热拔磁盘的方式是在 /proc/scsi/scsi 中移除对应 scsi 设备的信息。方式如下：</p><p><code>echo &quot;scsi remove-single-device a b c d&quot; &gt;/proc/scsi/scsi</code></p><p>例如删除2:0:0:0这块磁盘：</p><p><code>[root@localhost ~]# echo &quot;scsi remove-single-device 2 0 0 0&quot; &gt;/proc/scsi/scsi</code></p><p>因为要删除的设备已经存在，/sys中已经有它完整的信息，所以也从其自身设备上进行删除。</p><p>首先查看scsi设备信息:</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# lsscsi[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]    cd/dvd  QEMU     QEMU DVD-ROM     <span class="hljs-number">2.5</span>+  /dev/sr0 [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]    disk    WD       Elements SE <span class="hljs-number">25</span>FE <span class="hljs-number">1021</span>  /dev/sdb [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]    enclosu WD       SES Device       <span class="hljs-number">1021</span>  -        [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]    disk    QEMU     QEMU HARDDISK    <span class="hljs-number">2.5</span>+  /dev/sda</code></pre><p> 例如要删除 /dev/sdb，即2:0:0:0。先看看它的文件信息：</p><pre><code class="hljs routeros">[root@localhost ~]# ls /sys/bus/scsi/drivers/sd/2\:0\:0\:0/block           driver                        evt_mode_parameter_change_reported  ioerr_cnt      queue_depth  scsi_generic  ueventbsg             eh_timeout                    evt_soft_threshold_reached          iorequest_cnt  queue_type   scsi_level    unpriv_sgiodelete          evt_capacity_change_reported  generic                             max_sectors    rescan       state         vendordevice_blocked  evt_inquiry_change_reported   inquiry                             modalias       rev          subsystem     vpd_pg80device_busy     evt_lun_change_reported       iocounterbits                       model          scsi_device  timeout       vpd_pg83dh_state        evt_media_change              iodone_cnt                          power          scsi_disk   <span class="hljs-built_in"> type </span>         wwid</code></pre><p>在其中有3个文件：delete、rescan和state。其中state记录了该设备是否正在运行中。而delete和rescan文件则用于删除和重新扫描该设备。</p><p>例如，删除该设备，即热拔：</p><p><code>[root@localhost ~]# echo 1 &gt; /sys/bus/scsi/drivers/sd/2\:0\:0\:0/delete</code></p><h2 id="使用-fdisk-分区工具"><a href="#使用-fdisk-分区工具" class="headerlink" title="使用 fdisk 分区工具"></a>使用 fdisk 分区工具</h2><p>fdisk 工具用来分 MBR 磁盘上的区。要分 GPT 磁盘上的区，可以使用 gdisk。parted工具对这两种格式的磁盘分区都支持。</p><p>如果一个存储设备已经分过区，那么它可能是mbr格式的，也可能是gpt格式的，如果已经是mbr格式的，则只能继续使用fdisk进行分区，如果已经是gpt格式的，则只能使用gdisk进行分区。当然，无论什么格式的都可以使用parted进行分区，只不过也只能划分和已存在分区格式一样的分区，因为无论何种格式的分区，它的分区表和分区标识是已经固定的。</p><p>使用fdisk分区，它只能实现MBR格式的分区：</p><pre><code class="hljs sql">[root@localhost ~]<span class="hljs-comment"># fdisk /dev/sda</span>欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：m命令操作   a   toggle a bootable flag   b   edit bsd disklabel   c   toggle the dos compatibility flag   d   <span class="hljs-keyword">delete</span> a <span class="hljs-keyword">partition</span>   g   <span class="hljs-keyword">create</span> a <span class="hljs-keyword">new</span> <span class="hljs-keyword">empty</span> GPT <span class="hljs-keyword">partition</span> <span class="hljs-keyword">table</span><span class="hljs-comment">#新版本 fdisk 开始支持 GPT 分区了</span>   G   <span class="hljs-keyword">create</span> an IRIX (SGI) <span class="hljs-keyword">partition</span> <span class="hljs-keyword">table</span>   l   <span class="hljs-keyword">list</span> known <span class="hljs-keyword">partition</span> types   m   print this menu   n   <span class="hljs-keyword">add</span> a <span class="hljs-keyword">new</span> <span class="hljs-keyword">partition</span>   o   <span class="hljs-keyword">create</span> a <span class="hljs-keyword">new</span> <span class="hljs-keyword">empty</span> DOS <span class="hljs-keyword">partition</span> <span class="hljs-keyword">table</span>   p   print the <span class="hljs-keyword">partition</span> <span class="hljs-keyword">table</span>   q   quit <span class="hljs-keyword">without</span> saving changes   s   <span class="hljs-keyword">create</span> a <span class="hljs-keyword">new</span> <span class="hljs-keyword">empty</span> Sun disklabel   t   <span class="hljs-keyword">change</span> a <span class="hljs-keyword">partition</span><span class="hljs-string">&#x27;s system id</span><span class="hljs-string">   u   change display/entry units</span><span class="hljs-string">   v   verify the partition table</span><span class="hljs-string">   w   write table to disk and exit</span><span class="hljs-string">   x   extra functionality (experts only)</span><span class="hljs-string"></span><span class="hljs-string">命令(输入 m 获取帮助)：p</span><span class="hljs-string"></span><span class="hljs-string">磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区</span><span class="hljs-string">Units = 扇区 of 1 * 512 = 512 bytes</span><span class="hljs-string">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><span class="hljs-string">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><span class="hljs-string">磁盘标签类型：dos</span><span class="hljs-string">磁盘标识符：0x000c7ad0</span><span class="hljs-string"></span><span class="hljs-string">   设备 Boot      Start         End      Blocks   Id  System</span><span class="hljs-string">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><span class="hljs-string">/dev/sda2         2099200    41943039    19921920   8e  Linux LVM</span><span class="hljs-string"></span><span class="hljs-string">命令(输入 m 获取帮助)：n#新建分区</span><span class="hljs-string">Partition type:</span><span class="hljs-string">   p   primary (2 primary, 0 extended, 2 free)#总共可建4个主分区，现有2个，还剩可建两个</span><span class="hljs-string">   e   extended#扩展分区</span><span class="hljs-string">Select (default p): p</span><span class="hljs-string">分区号 (3,4，默认 3)：</span><span class="hljs-string">#建立完分区注意保存</span><span class="hljs-string">Command (m for help): w  </span><span class="hljs-string">The partition table has been altered!</span><span class="hljs-string"></span><span class="hljs-string">Calling ioctl() to re-read partition table.</span><span class="hljs-string">Syncing disks.</span></code></pre><p>上面的 fdisk 操作全部是在内存中执行的，必须保存生效。保存后，内核还未识别该分区，可以查看 /proc/partition 目录下存在的文件，这些文件是能被内核识别的分区。运行<strong>partprobe</strong>或<strong>partx</strong>命令重新读取分区表让内核识别新的分区，内核识别后才可以格式化。而且分区结束时按w保存分区表有时候会失败，提示重启，这时候运行partprobe命令可以代替重启就生效。</p><pre><code class="hljs gradle">[root@localhost ~]# partprobe <span class="hljs-regexp">/dev/</span>sdb#也可指定在 <span class="hljs-regexp">/dev/</span>sdb 上重加载分区表</code></pre><h2 id="使用-gdisk-分区工具"><a href="#使用-gdisk-分区工具" class="headerlink" title="使用 gdisk 分区工具"></a>使用 gdisk 分区工具</h2><p>使用 gdsik 需要安装这个工具包：</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># yum -y install gdisk</span></code></pre><p>分区的时候直接带上设备即可。以下是对新硬盘划分gpt分区的过程：</p><pre><code class="hljs sql">[root@localhost ~]<span class="hljs-comment"># gdisk /dev/sdb</span>GPT fdisk (gdisk) version 0.8.10Partition table scan:  MBR: not present  BSD: not present  APM: not present  GPT: not presentCreating new GPT entries.Command (? for <span class="hljs-keyword">help</span>): ?b       back up GPT <span class="hljs-keyword">data</span> <span class="hljs-keyword">to</span> a <span class="hljs-keyword">file</span>c       <span class="hljs-keyword">change</span> a <span class="hljs-keyword">partition</span><span class="hljs-string">&#x27;s name</span><span class="hljs-string">d       delete a partition                               # 删除分区</span><span class="hljs-string">i       show detailed information on a partition         # 列出分区详细信息</span><span class="hljs-string">l       list known partition types                       # 列出所以已知的分区类型</span><span class="hljs-string">n       add a new partition                              # 添加新分区</span><span class="hljs-string">o       create a new empty GUID partition table (GPT)    # 创建一个新的空的guid分区表</span><span class="hljs-string">p       print the partition table                        # 输出分区表信息</span><span class="hljs-string">q       quit without saving changes                      # 退出gdisk工具</span><span class="hljs-string">r       recovery and transformation options (experts only) </span><span class="hljs-string">s       sort partitions                                </span><span class="hljs-string">t       change a partition&#x27;</span>s <span class="hljs-keyword">type</span> code                   <span class="hljs-comment"># 修改分区类型</span>v       <span class="hljs-keyword">verify</span> diskw       write <span class="hljs-keyword">table</span> <span class="hljs-keyword">to</span> disk <span class="hljs-keyword">and</span> <span class="hljs-keyword">exit</span>                     <span class="hljs-comment"># 将分区信息写入到磁盘</span>x       extra functionality (experts <span class="hljs-keyword">only</span>)             ?       print this menuCommand (? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>): n   <span class="hljs-comment">#添加一个新分区</span><span class="hljs-keyword">Partition</span> <span class="hljs-built_in">number</span> (<span class="hljs-number">1</span><span class="hljs-number">-128</span>, <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>):<span class="hljs-keyword">First</span> sector (<span class="hljs-number">34</span><span class="hljs-number">-41943006</span>, <span class="hljs-keyword">default</span> = <span class="hljs-number">2048</span>) <span class="hljs-keyword">or</span> &#123;+-&#125;<span class="hljs-keyword">size</span>&#123;KMGTP&#125;:<span class="hljs-keyword">Last</span> sector (<span class="hljs-number">2048</span><span class="hljs-number">-41943006</span>, <span class="hljs-keyword">default</span> = <span class="hljs-number">41943006</span>) <span class="hljs-keyword">or</span> &#123;+-&#125;<span class="hljs-keyword">size</span>&#123;KMGTP&#125;: +<span class="hljs-number">10</span>G<span class="hljs-keyword">Current</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span><span class="hljs-keyword">Hex</span> code <span class="hljs-keyword">or</span> GUID (L <span class="hljs-keyword">to</span> <span class="hljs-keyword">show</span> codes, Enter = <span class="hljs-number">8300</span>):<span class="hljs-keyword">Changed</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">partition</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> Command (? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>): pDisk /dev/sdb: <span class="hljs-number">41943040</span> sectors, <span class="hljs-number">20.0</span> GiB<span class="hljs-keyword">Logical</span> sector <span class="hljs-keyword">size</span>: <span class="hljs-number">512</span> <span class="hljs-keyword">bytes</span>Disk identifier (GUID): F8AE925F<span class="hljs-number">-515</span>F<span class="hljs-number">-4807</span><span class="hljs-number">-92</span>ED<span class="hljs-number">-4109</span>D0827191<span class="hljs-keyword">Partition</span> <span class="hljs-keyword">table</span> holds up <span class="hljs-keyword">to</span> <span class="hljs-number">128</span> entries<span class="hljs-keyword">First</span> <span class="hljs-keyword">usable</span> sector <span class="hljs-keyword">is</span> <span class="hljs-number">34</span>, <span class="hljs-keyword">last</span> <span class="hljs-keyword">usable</span> sector <span class="hljs-keyword">is</span> <span class="hljs-number">41943006</span><span class="hljs-keyword">Partitions</span> will be aligned <span class="hljs-keyword">on</span> <span class="hljs-number">2048</span>-sector boundariesTotal free <span class="hljs-keyword">space</span> <span class="hljs-keyword">is</span> <span class="hljs-number">20971453</span> sectors (<span class="hljs-number">10.0</span> GiB) <span class="hljs-built_in">Number</span>  <span class="hljs-keyword">Start</span> (sector)    <span class="hljs-keyword">End</span> (sector)  <span class="hljs-keyword">Size</span>       Code  <span class="hljs-keyword">Name</span>   <span class="hljs-number">1</span>            <span class="hljs-number">2048</span>        <span class="hljs-number">20973567</span>   <span class="hljs-number">10.0</span> GiB    <span class="hljs-number">8300</span>  Linux filesystemCommand (? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>): i   <span class="hljs-comment"># 查看分区详细信息</span><span class="hljs-keyword">Using</span> <span class="hljs-number">1</span><span class="hljs-keyword">Partition</span> GUID code: <span class="hljs-number">0</span>FC63DAF<span class="hljs-number">-8483</span><span class="hljs-number">-4772</span><span class="hljs-number">-8E79</span><span class="hljs-number">-3</span>D69D8477DE4 (Linux filesystem)<span class="hljs-keyword">Partition</span> <span class="hljs-keyword">unique</span> GUID: B2452103<span class="hljs-number">-4</span>F32<span class="hljs-number">-4</span>B60-AEF7<span class="hljs-number">-4</span>BA42B7BF089<span class="hljs-keyword">First</span> sector: <span class="hljs-number">2048</span> (<span class="hljs-keyword">at</span> <span class="hljs-number">1024.0</span> KiB)<span class="hljs-keyword">Last</span> sector: <span class="hljs-number">20973567</span> (<span class="hljs-keyword">at</span> <span class="hljs-number">10.0</span> GiB)<span class="hljs-keyword">Partition</span> <span class="hljs-keyword">size</span>: <span class="hljs-number">20971520</span> sectors (<span class="hljs-number">10.0</span> GiB)<span class="hljs-keyword">Attribute</span> flags: <span class="hljs-number">0000000000000000</span><span class="hljs-keyword">Partition</span> <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;Linux filesystem&#x27;</span>Command (? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>): w <span class="hljs-comment">#保存分区表到磁盘</span><span class="hljs-keyword">Final</span> checks complete. About <span class="hljs-keyword">to</span> write GPT data. THIS WILL OVERWRITE EXISTING<span class="hljs-keyword">PARTITIONS</span>!!<span class="hljs-keyword">Do</span> you want <span class="hljs-keyword">to</span> proceed? (Y/N): YOK; writing new GUID partition table (GPT) to /dev/sdb.The operation has completed successfully.<span class="hljs-comment">#执行partprobe重新读取分区表信息</span>[root@localhost ~]<span class="hljs-comment"># partprobe /dev/sdb</span></code></pre><h2 id="使用-parted-分区"><a href="#使用-parted-分区" class="headerlink" title="使用 parted 分区"></a>使用 parted 分区</h2><p>parted 支持 mbr 格式和 gpt 格式的磁盘分区。它的强大在于可以一步到位而不需要不断的交互式输入(也可以交互式)。</p><p>parted分区工具是实时的，所以每一步操作都是直接写入磁盘而不是写进内存，它不像 fdisk/gdisk 还需要 w 命令将内存中的结果保存到磁盘中。</p><pre><code class="hljs pgsql">[root@localhost ~]# parted /dev/sdcGNU Parted <span class="hljs-number">2.1</span><span class="hljs-keyword">Using</span> /dev/sdcWelcome <span class="hljs-keyword">to</span> GNU Parted! <span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">view</span> a list <span class="hljs-keyword">of</span> commands. (parted) help                                                               align-<span class="hljs-keyword">check</span> <span class="hljs-keyword">TYPE</span> N                      <span class="hljs-keyword">check</span> <span class="hljs-keyword">partition</span> N <span class="hljs-keyword">for</span> <span class="hljs-keyword">TYPE</span>(min|opt) alignment  <span class="hljs-keyword">check</span> NUMBER                            <span class="hljs-keyword">do</span> a simple <span class="hljs-keyword">check</span> <span class="hljs-keyword">on</span> the file <span class="hljs-keyword">system</span>(centos <span class="hljs-number">7</span>上已删除该功能)  cp [<span class="hljs-keyword">FROM</span>-DEVICE] <span class="hljs-keyword">FROM</span>-NUMBER <span class="hljs-keyword">TO</span>-NUMBER  <span class="hljs-keyword">copy</span> file <span class="hljs-keyword">system</span> <span class="hljs-keyword">to</span> another <span class="hljs-keyword">partition</span>(centos <span class="hljs-number">7</span>上已删除该功能)  help [COMMAND]                          print general help, <span class="hljs-keyword">or</span> help <span class="hljs-keyword">on</span> COMMAND  mklabel,mktable LABEL-<span class="hljs-keyword">TYPE</span>              <span class="hljs-keyword">create</span> a <span class="hljs-built_in">new</span> disklabel (<span class="hljs-keyword">partition</span> <span class="hljs-keyword">table</span>)  mkfs NUMBER FS-<span class="hljs-keyword">TYPE</span>                     make a FS-<span class="hljs-keyword">TYPE</span> file <span class="hljs-keyword">system</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">partition</span> NUMBER (centos <span class="hljs-number">7</span>上已删除改该功能)   mkpart PART-<span class="hljs-keyword">TYPE</span> [FS-<span class="hljs-keyword">TYPE</span>] <span class="hljs-keyword">START</span> <span class="hljs-keyword">END</span>    make a <span class="hljs-keyword">partition</span>  mkpartfs PART-<span class="hljs-keyword">TYPE</span> FS-<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">START</span> <span class="hljs-keyword">END</span>    make a <span class="hljs-keyword">partition</span> <span class="hljs-keyword">with</span> a file <span class="hljs-keyword">system</span>(centos <span class="hljs-number">7</span>上已删除该功能)     <span class="hljs-keyword">move</span> NUMBER <span class="hljs-keyword">START</span> <span class="hljs-keyword">END</span>                   <span class="hljs-keyword">move</span> <span class="hljs-keyword">partition</span> NUMBER(centos <span class="hljs-number">7</span>上已删除该功能)   <span class="hljs-type">name</span> NUMBER <span class="hljs-type">NAME</span>                        <span class="hljs-type">name</span> <span class="hljs-keyword">partition</span> NUMBER <span class="hljs-keyword">as</span> <span class="hljs-type">NAME</span>  print [devices|free|list,<span class="hljs-keyword">all</span>|NUMBER]    display the <span class="hljs-keyword">partition</span> <span class="hljs-keyword">table</span>,available devices,free space, <span class="hljs-keyword">all</span> <span class="hljs-built_in">found</span> partitions,<span class="hljs-keyword">or</span> a particular <span class="hljs-keyword">partition</span>  quit                                    <span class="hljs-keyword">exit</span> program  rescue <span class="hljs-keyword">START</span> <span class="hljs-keyword">END</span>                        rescue a lost <span class="hljs-keyword">partition</span> near <span class="hljs-keyword">START</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">END</span>  resize NUMBER <span class="hljs-keyword">START</span> <span class="hljs-keyword">END</span>                 resize <span class="hljs-keyword">partition</span> NUMBER <span class="hljs-keyword">and</span> its file <span class="hljs-keyword">system</span>(修改分区大小(centos <span class="hljs-number">7</span>上已删除该功能))  rm NUMBER                               <span class="hljs-keyword">delete</span> <span class="hljs-keyword">partition</span> NUMBER (删除分区)               <span class="hljs-keyword">select</span> DEVICE                           choose the device <span class="hljs-keyword">to</span> edit (重选磁盘进入parted状态)    <span class="hljs-keyword">set</span> NUMBER FLAG STATE                   change the FLAG <span class="hljs-keyword">on</span> <span class="hljs-keyword">partition</span> NUMBER(设置分区状态，如将其<span class="hljs-keyword">off</span>或<span class="hljs-keyword">on</span>)    toggle [NUMBER [FLAG]]                  toggle the state <span class="hljs-keyword">of</span> FLAG <span class="hljs-keyword">on</span> <span class="hljs-keyword">partition</span> NUMBER(修改文件系统类型，如swap、lvm)    unit UNIT                               <span class="hljs-keyword">set</span> the <span class="hljs-keyword">default</span> unit <span class="hljs-keyword">to</span> UNIT(修改默认单位，kB/MB/GB等)  <span class="hljs-keyword">version</span>                                 display the <span class="hljs-keyword">version</span> number <span class="hljs-keyword">and</span> copyright information <span class="hljs-keyword">of</span> GNU Parted</code></pre><p>常用的命令是mklabel、rm、print、mkpart、help、quit</p><p>parted分区的前提是磁盘已经有分区表(partition table)或磁盘标签(disk label)，否则将显示”unrecognised disk label”，这是和fdisk/gdisk不同的地方，所以需要先使用mklabel创建标签或分区表，最常见的标签(分区表)为”msdos”和”gpt”，其中msdos分区就是MBR格式的分区表，也就是会有主分区、扩展分区和逻辑分区的概念和限制。</p><p>下面使用 parted 对 /dev/sdc 创建 msdos 的新分区：</p><pre><code class="hljs routeros">[root@localhost ~]# parted /dev/sdcGNU Parted 2.1Using /dev/sdbWelcome <span class="hljs-keyword">to</span> GNU Parted!<span class="hljs-built_in"> Type </span><span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">to</span> view a list of commands.(parted) mklabel             # 创建磁盘分区标签(分区表类型)                                               New disk label type? msdos   # 选择msdos即MBR类型                                 # 上面的两步也可以直接一步进行：(parted) mklabel msdos      (parted) mkpart              # 开始进行分区     Partition type?  primary/extended? p     # 创建主分区File<span class="hljs-built_in"> system </span>type?  [ext2]? ext4          # 创建ext4文件系统                                         # (注意，这里虽然指明了文件系统，但没有任何意义，后面还是需要手动格式化并选择文件系统类型)Start? 1                                 # 分区开始位置，默认是M为单位，表示从1M开始，也可直接指定1G这种方式End? 1024                                # 分区结束位置，<span class="hljs-attribute">1024-1</span>=1023M(parted) p                   # print，查看分区信息Model: VMware, VMware Virtual S (scsi)Disk /dev/sdc: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosNumber  Start   End     Size   <span class="hljs-built_in"> Type </span>    File<span class="hljs-built_in"> system </span> Flags 1      1049kB  1024MB  1023MB  primary<span class="hljs-comment"># 可以一步完成一个命令中的多个动作</span>(parted) mkpart p ext4 1026M 4096M       # 可以一步完成，也可以一步完成到任何位置，然后继续交互下一步                                         # 可能会提示分区未对齐<span class="hljs-string">&quot;Warning: The resulting partition is not properly aligned for best performance.&quot;</span>，忽略它(parted) mkpart e 4098 -1    # 创建扩展分区，注意创建扩展分区时不指定文件系统类型；-1表示剩余的全部分配给该分区(parted) p                                                               Model: VMware, VMware Virtual S (scsi)Disk /dev/sdc: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdos Number  Start   End     Size   <span class="hljs-built_in"> Type </span>     File<span class="hljs-built_in"> system </span> Flags 1      1049kB  1024MB  1023MB  primary 2      1026MB  4096MB  3070MB  primary 3      4098MB  21.5GB  17.4GB  extended               lba(parted) mkpart l ext4 4099 8194     # 创建逻辑分区，指定ext4(parted) mkpart l ext4 8195 -1       # 继续创建逻辑分区(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdc: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosNumber  Start   End     Size   <span class="hljs-built_in"> Type </span>     File<span class="hljs-built_in"> system </span> Flags 1      1049kB  1024MB  1023MB  primary 2      1026MB  4096MB  3070MB  primary 3      4098MB  21.5GB  17.4GB  extended               lba 5      4099MB  8194MB  4095MB  logical 6      8195MB  21.5GB  13.3GB  logical(parted) rm 5    # 删除5号分区(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdc: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosNumber  Start   End     Size   <span class="hljs-built_in"> Type </span>     File<span class="hljs-built_in"> system </span> Flags 1      1049kB  1024MB  1023MB  primary 2      1026MB  4096MB  3070MB  primary 3      4098MB  21.5GB  17.4GB  extended               lba 5      8195MB  21.5GB  13.3GB  logical(parted) quit                                    # 退出parted工具Information: You may need <span class="hljs-keyword">to</span> update /etc/fstab.  # 提示你要更新/etc/fstab中的配置，说明该工具是可以在线分区的</code></pre><p><font color=red>注：虽然parted工具中指定了文件系统，但是并没有意义，它仍需要手动进行格式化并指定分区类型。</font></p><h1 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h1><h2 id="mkfs-工具"><a href="#mkfs-工具" class="headerlink" title="mkfs 工具"></a>mkfs 工具</h2><p>mkfs命令通常用于在设备硬件分区上创建linux文件系统。mkfs 命令支持建立多种 Linux 文件系统，如 ext系列，xfs等等。实际上mkfs是支持多种文件系统构建命令<code>mkfs. TYPE</code>的前部分，mkfs命令通常执行的时候也是调用<code>mkfs. TYPE</code>来执行，如mkfs.ext2，mkfs.vfs，mkfs.vfat等等。</p><pre><code class="hljs css"><span class="hljs-selector-attr">[root@localhost ~]</span># <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-tag">mkfs</span>         <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.btrfs</span>   <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.cramfs</span>  <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.ext2</span>    <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.ext3</span>    <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.ext4</span>    <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.minix</span>   <span class="hljs-selector-tag">mkfs</span><span class="hljs-selector-class">.xfs</span></code></pre><h2 id="mke2fs-工具"><a href="#mke2fs-工具" class="headerlink" title="mke2fs 工具"></a>mke2fs 工具</h2><p>mkfs.ext2、mkfs.ext3、mkfs.ext4 或 mkfs -t extX 其实都是在调用mke2fs工具。</p><p>该工具创建文件系统时，会从 /etc/mke2fs.conf 配置中读取默认的配置项：</p><pre><code class="hljs mipsasm">mke<span class="hljs-symbol">2f</span>s [ -c ] [ -<span class="hljs-keyword">b </span><span class="hljs-keyword">block-size </span>] [ -f fragment-size ] [ -g <span class="hljs-keyword">blocks-per-group </span>] [ -G number-of-groups ]        [ -i <span class="hljs-keyword">bytes-per-inode </span>] [ -I inode-size ] [ -<span class="hljs-keyword">j </span>] [ -N number-of-inodes ] [ -m reserved-<span class="hljs-keyword">blocks-percentage </span>]        [ -q ] [ -r fs-revision-level ] [ -v ] [ -L volume-label ] [ -S ] [ -t fs-type ] device [ <span class="hljs-keyword">blocks-count </span>]选项说明：-t fs-type         ：指定要创建的文件系统类型(<span class="hljs-keyword">ext2,ext3 </span><span class="hljs-keyword">ext4)，若不指定，则从/etc/mke2fs.conf中获取默认的文件系统类型。</span><span class="hljs-keyword">-b </span><span class="hljs-keyword">block-size </span>     ：指定每个<span class="hljs-keyword">block的大小，有效值有1024、2048和4096，单位是字节。</span><span class="hljs-keyword">-I </span>inode-size      ：指定inode大小，单位为字节。必须为<span class="hljs-number">2</span>的幂次方，且大于等于<span class="hljs-number">128</span>字节。值越大，说明inode的集合体inode table占用越多的空                     间，这不仅会挤占文件系统中的可用空间，还会降低性能，因为要扫描inode table需要消耗更多时间，但是在linux kernel <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>                     之后，由于使用inode存储了很多扩展的额外属性，所以<span class="hljs-number">128</span>字节已经不够用了，因此<span class="hljs-keyword">ext4默认的inode </span>size已经变为<span class="hljs-number">256</span>，尽管                     inode大小增大了，但因为使用inode存储扩展属性带来的性能提升远高于inode size变大导致的负面影响，所以仍建议使用<span class="hljs-number">256</span>字                     节的inode。-i <span class="hljs-keyword">bytes-per-inode </span>：指定每多少个字节就为其分配一个inode号。值越大，说明一个文件系统中分配的inode号越少，更适用于存储大量大文件，值越                     小，inode号越多，更适用于存储大量小文件。该值不能小于一个<span class="hljs-keyword">block的大小，因为这样会造成inode多余。</span><span class="hljs-keyword"> </span>                    注意，创建文件系统后该值就不能再改变了。-c                 ：创建文件系统前先检查设备是否有<span class="hljs-keyword">bad </span><span class="hljs-keyword">blocks。</span><span class="hljs-keyword">-f </span>fragment-size   ：指定fragments的大小，单位字节。-g <span class="hljs-keyword">blocks-per-group：指定每个块组中的block数量。不建议修改此项。</span><span class="hljs-keyword">-G </span>number-of-groups：该选项用于<span class="hljs-keyword">ext4文件系统(严格地说是启用了flex_bg特性)，指定虚拟块组(即一个extent)中包含的块组个数，必须为2的幂次方。</span><span class="hljs-keyword"> </span>                    对于<span class="hljs-keyword">ext4文件系统来说，使用extent的功能能极大提升其性能。</span><span class="hljs-keyword">-j </span>                ：创建带有日志功能的文件系统，即<span class="hljs-keyword">ext3。如果要指定关于日志方面的设置，在-j的基础上再使用-J指定，不过一般默认即可，具体可</span><span class="hljs-keyword"> </span>                    指定的选项看man文档。 -L new-volume-label：指定卷标名称，名称不得超出<span class="hljs-number">16</span>字节。-m reserved-<span class="hljs-keyword">blocks-percentage：指定文件系统保留block数量的比例，保留一部分block，可以降低物理碎片。默认比例为5%。</span><span class="hljs-keyword">-N </span>number-of-inodes ：强制指定该文件系统应该分配多少个inode号，它会覆盖通过计算得出inode数量的结果(根据<span class="hljs-keyword">block大小、数量和每多少字节分配</span><span class="hljs-keyword"> </span>                     一个inode得出Inode数量)，但是不建议这么做。-q                  ：安静模式，可用于脚本中-S                  ：重建superblock和group descriptions。在所有的superblock和备份的superblock都损坏时有用。它会重新初始化superblock和                      group descriptions，但不会改变inode table、<span class="hljs-keyword">bmap和imap(若真的改变，该分区数据就全丢了，还不如重新格式化)。在重建</span><span class="hljs-keyword"> </span>                     superblock后，应该执行e<span class="hljs-symbol">2f</span>sck来保证文件系统的一致性。但要注意，应该完全正确地指定<span class="hljs-keyword">block的大小，其改选项并不能完全保</span><span class="hljs-keyword"> </span>                     证数据不丢失。-v                  ：输出详细执行过程</code></pre><p><strong>所以，有可能用到的选项也就 “-t” 指定文件系统类型，”-b” 指定 block 大小，”-I” 指定 inode 大小，”-i” 指定分配 inode 的比例。</strong></p><p>例如：</p><pre><code class="hljs routeros">[root@localhost ~]# mke2fs -t ext4 -I 256 /dev/sdb2 -b 4096mke2fs 1.41.12 (17-May-2010)Filesystem label=OS type: LinuxBlock <span class="hljs-attribute">size</span>=4096 (<span class="hljs-attribute">log</span>=2)Fragment <span class="hljs-attribute">size</span>=4096 (<span class="hljs-attribute">log</span>=2)<span class="hljs-attribute">Stride</span>=0 blocks, Stripe <span class="hljs-attribute">width</span>=0 blocks655360 inodes, 2621440 blocks131072 blocks (5.00%) reserved <span class="hljs-keyword">for</span> the super userFirst data <span class="hljs-attribute">block</span>=0Maximum filesystem <span class="hljs-attribute">blocks</span>=268435456080 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Writing inode tables: done                           Creating journal (32768 blocks): doneWriting superblocks <span class="hljs-keyword">and</span> filesystem<span class="hljs-built_in"> accounting </span>information: doneThis filesystem will be automatically checked every 39 mounts <span class="hljs-keyword">or</span>180 days, whichever comes first.  Use tune2fs -c <span class="hljs-keyword">or</span> -i <span class="hljs-keyword">to</span> override.</code></pre><h1 id="查看文件系统状态信息"><a href="#查看文件系统状态信息" class="headerlink" title="查看文件系统状态信息"></a>查看文件系统状态信息</h1><h2 id="lsblk-list-block-devices"><a href="#lsblk-list-block-devices" class="headerlink" title="lsblk(list block devices)"></a>lsblk(list block devices)</h2><blockquote><p>用于列出设备及其状态，主要列出非空的存储设备。其实它只会列出/sys/dev/block中的主次设备号文件，且默认只列出非空设备。</p></blockquote><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               <span class="hljs-number">8</span>:<span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">20</span>G  <span class="hljs-number">0</span> disk ├─sda1            <span class="hljs-number">8</span>:<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>G  <span class="hljs-number">0</span> part /boot└─sda2            <span class="hljs-number">8</span>:<span class="hljs-number">2</span>    <span class="hljs-number">0</span>   <span class="hljs-number">19</span>G  <span class="hljs-number">0</span> part   ├─centos-root <span class="hljs-number">253</span>:<span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">17</span>G  <span class="hljs-number">0</span> lvm  /  └─centos-swap <span class="hljs-number">253</span>:<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">2</span>G  <span class="hljs-number">0</span> lvm  [SWAP]sdb               <span class="hljs-number">8</span>:<span class="hljs-number">16</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1.8</span>T  <span class="hljs-number">0</span> disk └─sdb1            <span class="hljs-number">8</span>:<span class="hljs-number">17</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1.8</span>T  <span class="hljs-number">0</span> part sr0              <span class="hljs-number">11</span>:<span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">4.5</span>G  <span class="hljs-number">0</span> rom</code></pre><p>其中上面的几列意义如下：</p><p>NAME：设备名称；</p><p>MAJ:MIN：主设备号和此设备号；</p><p>RM：是否为可卸载设备，1表示可卸载设备。可卸载设备如光盘、USB等。并非能够umount的就是可卸载的；</p><p>SIZE：设备总空间大小；</p><p>RO：是否为只读；</p><p>TYPE：是磁盘disk，还是分区part，亦或是rom，还有loop设备；</p><p>mountpoint：挂载点。</p><p>另外常用的一个选项是”-f”，它可以查看到文件系统类型，和文件系统的uuid和挂载点：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# lsblk -fNAME            FSTYPE      LABEL           UUID                                   MOUNTPOINTsda                                                                                ├─sda1          xfs                         <span class="hljs-number">39</span>b6f37f<span class="hljs-number">-531f</span><span class="hljs-number">-41</span>c2-a498-dbe216fcfc4b   /boot└─sda2          LVM2_member                 BVd9cM-wbZz-QBn3<span class="hljs-number">-8</span>IOg-A8Xc-NZ5w-u98gYr   ├─centos-root xfs                         <span class="hljs-number">0</span>a8b095d<span class="hljs-number">-743e-494</span>b-a4e3<span class="hljs-number">-1</span>dca4211d9bb   /  └─centos-swap swap                        b83b56ce<span class="hljs-number">-37f</span>2<span class="hljs-number">-460</span>a-bbd1<span class="hljs-number">-8</span>d4da4624493   [SWAP]sdb                                                                                └─sdb1          ext4                        <span class="hljs-number">2</span>bc92060-a128<span class="hljs-number">-4</span>ad5-bfbe<span class="hljs-number">-9</span>cfb61dc1870   sr0             iso9660     CentOS <span class="hljs-number">7</span> x86_64 <span class="hljs-number">2020</span><span class="hljs-number">-04</span><span class="hljs-number">-22</span><span class="hljs-number">-00</span><span class="hljs-number">-54</span><span class="hljs-number">-00</span><span class="hljs-number">-00</span></code></pre><p><font color=red>注：每个已经格式化的文件系统都有其类型和uuid，而没有格式化的设备(如/dev/sdb3)，将只显示一个Name结果，表示该设备还未进行格式化。</font></p><h2 id="blkid"><a href="#blkid" class="headerlink" title="blkid"></a>blkid</h2><p>查看文件系统类型和uuid：</p><pre><code class="hljs routeros">[root@localhost ~]# blkid/dev/sr0: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;2020-04-22-00-54-00-00&quot;</span> <span class="hljs-attribute">LABEL</span>=<span class="hljs-string">&quot;CentOS 7 x86_64&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;iso9660&quot;</span> <span class="hljs-attribute">PTTYPE</span>=<span class="hljs-string">&quot;dos&quot;</span> /dev/sda1: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;39b6f37f-531f-41c2-a498-dbe216fcfc4b&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;xfs&quot;</span> /dev/sda2: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;BVd9cM-wbZz-QBn3-8IOg-A8Xc-NZ5w-u98gYr&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;LVM2_member&quot;</span> /dev/mapper/centos-root: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;0a8b095d-743e-494b-a4e3-1dca4211d9bb&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;xfs&quot;</span> /dev/mapper/centos-swap: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;b83b56ce-37f2-460a-bbd1-8d4da4624493&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;swap&quot;</span> /dev/sdb1: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;2bc92060-a128-4ad5-bfbe-9cfb61dc1870&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;ext4&quot;</span></code></pre><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><blockquote><p>du命令用于评估文件的空间占用情况，它会统计每个文件的大小，统计时会递归统计目录中的文件，也就是说，它会遍历整个待统计目录，所以统计速度上可能并不理想。</p></blockquote><pre><code class="hljs jboss-cli">du [OPTION]<span class="hljs-string">...</span> [FILE]<span class="hljs-string">...</span>选项说明：-a, <span class="hljs-params">--all</span>：列出目录中所有文件的统计信息，默认只会列出目录中子目录的统计信息，而不列出文件的统计信息-h, <span class="hljs-params">--human-readable</span>：人性化显示大小-0, <span class="hljs-params">--null</span>：以空字符结尾，即<span class="hljs-string">&quot;\0&quot;</span>而非换行的<span class="hljs-string">&quot;\n&quot;</span>-S, <span class="hljs-params">--separate-dirs</span>：不包含子目录的大小-s, <span class="hljs-params">--summarize</span>：对目录做总的统计，不列出目录内文件的大小信息-c,<span class="hljs-params">--total</span>：对给出的文件或目录做总计。在统计非同一个目录文件大小时非常有用。见下文例子。-d,<span class="hljs-params">--max-depth</span>：指定显示时的目录深度，默认会递归显示所有层次<span class="hljs-params">--max-depth=N</span>：只列出给定层次的目录统计，如果N=0，则等价于<span class="hljs-string">&quot;-s&quot;</span>-x, <span class="hljs-params">--one-file-system</span>：忽略不同文件系统上的文件，不对它们进行统计-X, <span class="hljs-params">--exclude-from=FILE</span>：从文件中读取要排除的文件<span class="hljs-params">--exclude=PATTERN</span>：指定要忽略不统计的文件</code></pre><pre><code class="hljs gradle">[root@localhost ~]# du -sh <span class="hljs-regexp">/etc/</span><span class="hljs-number">35</span>M     <span class="hljs-regexp">/etc/</span></code></pre><pre><code class="hljs gradle">[root@localhost ~]# du -ah <span class="hljs-regexp">/tmp/</span><span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>.Test-unix<span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>.font-unix<span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>.ICE-unix<span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>.XIM-unix<span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>.X11-unix<span class="hljs-number">4.0</span>K    <span class="hljs-regexp">/tmp/</span>oraysl.status<span class="hljs-number">4.0</span>K    <span class="hljs-regexp">/tmp/</span>oraynewph.status<span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>systemd-<span class="hljs-keyword">private</span>-dd51c630d55b47ac953c22e69a6c1240-mariadb.service-jPbRmD/tmp<span class="hljs-number">0</span>       <span class="hljs-regexp">/tmp/</span>systemd-<span class="hljs-keyword">private</span>-dd51c630d55b47ac953c22e69a6c1240-mariadb.service-jPbRmD<span class="hljs-number">8.0</span>K    <span class="hljs-regexp">/tmp/</span></code></pre><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>df 用于报告磁盘空间使用率，默认显示的大小是1K大小block数量，也就是以k为单位。</p><p>和 du 不同的是，df 是读取每个文件系统的 superblock 信息，所以评估速度非常快。由于是读取 superblock，所以如果目录下挂载了另一个文件系统，是不会将此挂载的文件系统计入目录大小的。<strong>注意，du 和 df 统计的结果是不一样的。</strong></p><p>如果用 df 统计某个文件的空间使用情况，将会转而统计该文件所在文件系统的空间使用情况。</p><pre><code class="hljs angelscript">df [OPTION]... [FILE]...选项说明：-h：人性化转换大小的显示单位-i：统计inode使用情况而非空间使用情况-l, --local：只列出本地文件系统的使用情况，不列出网络文件系统信息-T, --print-type：同时输出文件系统类型-t, --type=TYPE：只列出给定文件系统的统计信息-x, --exclude-type=TYPE：指定不显示的文件系统类型的统计信息[<span class="hljs-symbol">root@</span>localhost ~]# df -hT文件系统                类型      容量  已用  可用 已用% 挂载点devtmpfs                devtmpfs  <span class="hljs-number">908</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">908</span>M    <span class="hljs-number">0</span>% /devtmpfs                   tmpfs     <span class="hljs-number">919</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">919</span>M    <span class="hljs-number">0</span>% /dev/shmtmpfs                   tmpfs     <span class="hljs-number">919</span>M   <span class="hljs-number">33</span>M  <span class="hljs-number">887</span>M    <span class="hljs-number">4</span>% /runtmpfs                   tmpfs     <span class="hljs-number">919</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">919</span>M    <span class="hljs-number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root xfs        <span class="hljs-number">17</span>G  <span class="hljs-number">2.4</span>G   <span class="hljs-number">15</span>G   <span class="hljs-number">14</span>% //dev/sda1               xfs      <span class="hljs-number">1014</span>M  <span class="hljs-number">211</span>M  <span class="hljs-number">804</span>M   <span class="hljs-number">21</span>% /boottmpfs                   tmpfs     <span class="hljs-number">184</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">184</span>M    <span class="hljs-number">0</span>% /run/user/<span class="hljs-number">0</span>[<span class="hljs-symbol">root@</span>localhost ~]# df -i文件系统                  Inode 已用(I) 可用(I) 已用(I)% 挂载点devtmpfs                 <span class="hljs-number">232254</span>     <span class="hljs-number">405</span>  <span class="hljs-number">231849</span>       <span class="hljs-number">1</span>% /devtmpfs                    <span class="hljs-number">235193</span>       <span class="hljs-number">1</span>  <span class="hljs-number">235192</span>       <span class="hljs-number">1</span>% /dev/shmtmpfs                    <span class="hljs-number">235193</span>     <span class="hljs-number">542</span>  <span class="hljs-number">234651</span>       <span class="hljs-number">1</span>% /runtmpfs                    <span class="hljs-number">235193</span>      <span class="hljs-number">16</span>  <span class="hljs-number">235177</span>       <span class="hljs-number">1</span>% /sys/fs/cgroup/dev/mapper/centos-root <span class="hljs-number">8910848</span>   <span class="hljs-number">78419</span> <span class="hljs-number">8832429</span>       <span class="hljs-number">1</span>% //dev/sda1                <span class="hljs-number">524288</span>     <span class="hljs-number">339</span>  <span class="hljs-number">523949</span>       <span class="hljs-number">1</span>% /boottmpfs                    <span class="hljs-number">235193</span>       <span class="hljs-number">1</span>  <span class="hljs-number">235192</span>       <span class="hljs-number">1</span>% /run/user/<span class="hljs-number">0</span></code></pre><h1 id="挂载和卸载文件系统"><a href="#挂载和卸载文件系统" class="headerlink" title="挂载和卸载文件系统"></a>挂载和卸载文件系统</h1><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><blockquote><p>mount用来显示挂载信息或者进行文件系统挂载，它的功能及其的强大(强大到离谱)，它不仅支持挂载非常多种文件系统，如ext/xfs/nfs/smbfs/cifs (win上的共享目录)等，还支持共享挂载点、继承挂载点(父子关系)、绑定挂载点、移动挂载点等等功能。在本文只介绍其最简单的挂载功能。</p></blockquote><pre><code class="hljs routeros">mount # 将显示当前已挂载信息mount [-t 欲挂载文件系统类型 ] [-o 特殊选项] 设备名 挂载目录选项说明：-a  将/etc/fstab文件里指定的挂载选项重新挂载一遍。-t  支持ext2/ext3/ext4/vfat/fat/iso9660(光盘默认格式)。 不用-t时默认会调用blkid来获取文件系统类型。-n  不把挂载记录写在/etc/mtab文件中，一般挂载会在/proc/mounts中记录下挂载信息，然后同步到/etc/mtab，指定-n表示不同步该挂载信息。-o  指定挂载特殊选项。下面是两个比较常用的：    loop  挂载镜像文件，如iso文件    ro  只读挂载    rw  读写挂载    auto  相当于mount -a    dev 如果挂载的文件系统中有设备访问入口则启用它，使其可以作为设备访问入口   <span class="hljs-built_in"> default </span>rw,suid,dev,exec,auto,nouser,async,<span class="hljs-keyword">and</span> relatime    async   异步挂载，只写到内存    sync    同步挂载，通过挂载位置写入对方硬盘    atime   修改访问时间，每次访问都修改atime会导致性能降低，所以默认是noatime    noatime 不修改访问时间，高并发时使用这个选项可以减少磁盘IO    nodiratime  不修改文件夹访问时间，高并发时使用这个选项可以减少磁盘IO    exec/noexec  挂载后的文件系统里的可执行程序是否可执行，默认是可以执行exec， 优先级高于权限的限定    remount  重新挂载，此时可以不用指定挂载点。    suid/nosuid 对挂载的文件系统启用或禁用suid，对于外来设备最好禁用suid    _netdev 需要网络挂载时默认将停留在挂载界面直到加载网络了。使用_netdev可以忽略网络正常挂载。如NFS开机挂载。   <span class="hljs-built_in"> user </span> 允许普通用户进行挂载该目录，但只允许挂载者进行卸载该目录   <span class="hljs-built_in"> users </span> 允许所有用户挂载和卸载该目录    nouser  禁止普通用户挂载和卸载该目录，这是默认的，默认情况下一个目录不指定user/users时，将只有root能挂载</code></pre><p>使用实例：</p><p><strong>(1).挂载CentOS的安装镜像到/mnt。</strong></p><pre><code class="hljs awk">mount <span class="hljs-regexp">/dev/</span>cdrom /mnt</code></pre><p><strong>(2).重新挂载。</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">mount</span> -t ext<span class="hljs-number">4</span> -o remount /dev/sdb<span class="hljs-number">1</span> /data<span class="hljs-number">1</span></code></pre><p><strong>(3).重新挂载文件系统为可读写</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">mount</span> -t ext<span class="hljs-number">4</span> -o rw remount /dev/sdb<span class="hljs-number">1</span> /data<span class="hljs-number">1</span></code></pre><p><strong>(4).挂载windows的共享目录。</strong></p><p>win上共享文件的文件系统是cifs类型，要在Linux上挂载，必须得有mount.cifs命令，如果没有则安装cifs-utils包。</p><p>假设win上共享目录的unc路径为\192.168.100.8\test，共享给的用户名和密码分别为long3:123，要挂在linux上的/mydata目录上。</p><pre><code class="hljs awk">mount.cifs -o username=<span class="hljs-string">&quot;long3&quot;</span>,password=<span class="hljs-string">&quot;123&quot;</span> <span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">100.8</span><span class="hljs-regexp">/test /my</span>data</code></pre><p>注意，如果是比较新版本的win10(2017年之后更新的版本)或较新版本的win server，直接mount.cifs会报错：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# mount.cifs -o username=<span class="hljs-string">&quot;long3&quot;</span>,password=<span class="hljs-string">&quot;123&quot;</span> <span class="hljs-comment">//192.168.100.8/test /mnt         </span>mount error(<span class="hljs-number">112</span>): Host <span class="hljs-keyword">is</span> downRefer to the mount.cifs(<span class="hljs-number">8</span>) manual page (e.g. man mount.cifs)</code></pre><p>这是因为2017年微软的一个补丁禁用了SMBv1协议，通过smbclient的报告可知：</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># yum -y install samba-client</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># smbclient -L //192.168.100.8</span>Enter root<span class="hljs-string">&#x27;s password: </span><span class="hljs-string">protocol negotiation failed: NT_STATUS_CONNECTION_RESET</span></code></pre><p>因此，在mount的时候指定cifs(SMB)的版本号为2.0即可：</p><pre><code class="hljs cpp">[root@localhost ~]<span class="hljs-meta"># mount.cifs -o username=<span class="hljs-meta-string">&quot;long3&quot;</span>,password=<span class="hljs-meta-string">&quot;123&quot;</span>,vers=2.0 <span class="hljs-comment">//192.168.100.8/test /mnt</span></span></code></pre><h2 id="挂载镜像文件"><a href="#挂载镜像文件" class="headerlink" title="挂载镜像文件"></a>挂载镜像文件</h2><p>有时候需要挂载CentOS的镜像文件，在虚拟机中经常是将镜像放入虚拟机的CD/DVD虚拟光驱中，然后在Linux上对/dev/cdrom进行挂载。其实/dev/cdrom是/dev/sr0的一个软链接，/dev/sr0是Linux中的光驱，所以上面的过程相当于是将镜像文件通过虚拟软件的虚拟光驱和linux的光驱连接起来，这样只需要挂载Linux中的光驱就可以了。但是，在非虚拟环境中没有虚拟光驱，而且在Linux中的一个镜像文件难道一定要拷贝到主机上通过虚拟光驱进行连接吗？</p><p>mount是一个极其强大的挂载工具，它支持挂载很多种文件类型，其中就支持挂载镜像文件，其实它连挂载目录都支持。</p><pre><code class="hljs angelscript">mount -o loop CentOS<span class="hljs-number">-6.6</span>-x86_64-bin-DVD2.iso /mnt[<span class="hljs-symbol">root@</span>localhost ~]# lsblkNAME     MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTloop0      <span class="hljs-number">7</span>:<span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">1.2</span>G  <span class="hljs-number">0</span> loop /mntsda        <span class="hljs-number">8</span>:<span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">20</span>G  <span class="hljs-number">0</span> disk├─sda1   <span class="hljs-number">8</span>:<span class="hljs-number">1</span>    <span class="hljs-number">0</span>   <span class="hljs-number">250</span>M  <span class="hljs-number">0</span> part /boot├─sda2   <span class="hljs-number">8</span>:<span class="hljs-number">2</span>    <span class="hljs-number">0</span>  <span class="hljs-number">17.8</span>G  <span class="hljs-number">0</span> part /└─sda3   <span class="hljs-number">8</span>:<span class="hljs-number">3</span>    <span class="hljs-number">0</span>     <span class="hljs-number">2</span>G  <span class="hljs-number">0</span> part [SWAP]sr0       <span class="hljs-number">11</span>:<span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">1024</span>M  <span class="hljs-number">0</span> rom</code></pre><h2 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h2><pre><code class="hljs properties"><span class="hljs-attr">umount</span> <span class="hljs-string">设备名或挂载目录</span><span class="hljs-attr">umount</span> <span class="hljs-string">-lf 强制卸载</span></code></pre><h2 id="开机自动挂载-etc-fstab"><a href="#开机自动挂载-etc-fstab" class="headerlink" title="开机自动挂载/etc/fstab"></a>开机自动挂载/etc/fstab</h2><p>通过将挂载选项写入到 /etc/fstab 中，系统会自动挂载该文件中的配置项。但要注意，该文件在开机的前几个过程中就被读取，所以配置错误很可能会导致开机失败。</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# cat /etc/fstab ## /etc/fstab# Created by anaconda on Sat Jun  <span class="hljs-number">6</span> <span class="hljs-number">20</span>:<span class="hljs-number">09</span>:<span class="hljs-number">07</span> <span class="hljs-number">2020</span>## Accessible filesystems, by <span class="hljs-built_in">ref</span>erence, are maintained under <span class="hljs-string">&#x27;/dev/disk&#x27;</span># See man pages fstab(<span class="hljs-number">5</span>), findfs(<span class="hljs-number">8</span>), mount(<span class="hljs-number">8</span>) <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> blkid(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> more info#/dev/mapper/centos-root /                       xfs     defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>UUID=<span class="hljs-number">39</span>b6f37f<span class="hljs-number">-531f</span><span class="hljs-number">-41</span>c2-a498-dbe216fcfc4b /boot                   xfs     defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/mapper/centos-swap swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span></code></pre><p>其中最后两列，它们分别表示备份文件系统和开机自检，一般都可以设置为0。</p><p>由于能用的备份工具众多，没人会在这里设置备份，所以备份列设置为0。</p><p>最后一列是开机自检设置列，开机自检调用的是fsck程序，所有有些ext类文件系统作为”/“时，可能会设置为1，但是fsck是不支持xfs文件系统的，所以对于xfs文件系统而言，该项必须设置为0。</p><p>其实无需考虑那么多，直接将这两列设置为0就可以了。</p><h2 id="修复错误的-etc-fstab"><a href="#修复错误的-etc-fstab" class="headerlink" title="修复错误的/etc/fstab"></a>修复错误的/etc/fstab</h2><p>万一 /etc/fstab 配置错误，导致开机无法加载。这时提示输入 root 密码进入单人维护模式，只不过单人模式下根文件系统是只读的，哪怕是 root 也无法直接修改 /etc/fstab，所以应该将”/“文件系统进行重新挂载。</p><p>执行下面的命令，重挂载根分区，并给读写权限，再去修改错误的 fstab 文件记录，再重启。</p><pre><code class="hljs excel">mount -<span class="hljs-built_in">n</span> -o remount,rw /</code></pre><h1 id="SWAP-分区"><a href="#SWAP-分区" class="headerlink" title="SWAP 分区"></a>SWAP 分区</h1><h2 id="查看哪个分区在充当-swap-分区"><a href="#查看哪个分区在充当-swap-分区" class="headerlink" title="查看哪个分区在充当 swap 分区"></a>查看哪个分区在充当 swap 分区</h2><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               <span class="hljs-number">8</span>:<span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">20</span>G  <span class="hljs-number">0</span> disk ├─sda1            <span class="hljs-number">8</span>:<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>G  <span class="hljs-number">0</span> part /boot└─sda2            <span class="hljs-number">8</span>:<span class="hljs-number">2</span>    <span class="hljs-number">0</span>   <span class="hljs-number">19</span>G  <span class="hljs-number">0</span> part   ├─centos-root <span class="hljs-number">253</span>:<span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">17</span>G  <span class="hljs-number">0</span> lvm  /  └─centos-swap <span class="hljs-number">253</span>:<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">2</span>G  <span class="hljs-number">0</span> lvm  [SWAP]sdb               <span class="hljs-number">8</span>:<span class="hljs-number">16</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1.8</span>T  <span class="hljs-number">0</span> disk └─sdb1            <span class="hljs-number">8</span>:<span class="hljs-number">17</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1.8</span>T  <span class="hljs-number">0</span> part sr0              <span class="hljs-number">11</span>:<span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">4.5</span>G  <span class="hljs-number">0</span> rom [<span class="hljs-symbol">root@</span>localhost ~]# swapon  -s文件名                          类型            大小    已用    权限/dev/dm<span class="hljs-number">-1</span>                               partition       <span class="hljs-number">2097148</span> <span class="hljs-number">0</span>       <span class="hljs-number">-2</span></code></pre><h2 id="添加-swap-分区"><a href="#添加-swap-分区" class="headerlink" title="添加 swap 分区"></a>添加 swap 分区</h2><p>(1).可以新分一个区，在分区时指定其分区的ID号为SWAP类型。</p><p>(2).格式化为swap分区：mkswap</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# mkswap /dev/sdb5Setting up swapspace version <span class="hljs-number">1</span>, size = <span class="hljs-number">1951096</span> KiBno label, UUID=<span class="hljs-number">02e5</span>af44<span class="hljs-number">-2</span>a16<span class="hljs-number">-479</span>d-b689<span class="hljs-number">-4e100</span>af6adf5</code></pre><p>(3).加入swap分区空间(swapon)：</p><pre><code class="hljs yaml">[<span class="hljs-string">root@localhost</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># swapon /dev/sdb5  </span>[<span class="hljs-string">root@localhost</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># free -m</span>             <span class="hljs-string">total</span>       <span class="hljs-string">used</span>       <span class="hljs-string">free</span>     <span class="hljs-string">shared</span>    <span class="hljs-string">buffers</span>     <span class="hljs-string">cached</span><span class="hljs-attr">Mem:</span>          <span class="hljs-number">1861        </span><span class="hljs-number">343</span>       <span class="hljs-number">1517          </span><span class="hljs-number">0</span>         <span class="hljs-number">16</span>        <span class="hljs-number">196</span><span class="hljs-string">-/+</span> <span class="hljs-attr">buffers/cache:</span>        <span class="hljs-number">131</span>       <span class="hljs-number">1730</span><span class="hljs-attr">Swap:</span>         <span class="hljs-number">3953          </span><span class="hljs-number">0</span>       <span class="hljs-number">3953</span></code></pre><p>(4).取消swap分区空间(swapoff)：</p><pre><code class="hljs yaml">[<span class="hljs-string">root@xuexi</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># swapoff /dev/sdb5</span>[<span class="hljs-string">root@xuexi</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># free -m</span>             <span class="hljs-string">total</span>       <span class="hljs-string">used</span>       <span class="hljs-string">free</span>     <span class="hljs-string">shared</span>    <span class="hljs-string">buffers</span>     <span class="hljs-string">cached</span><span class="hljs-attr">Mem:</span>          <span class="hljs-number">1861        </span><span class="hljs-number">343</span>       <span class="hljs-number">1518          </span><span class="hljs-number">0</span>         <span class="hljs-number">16</span>        <span class="hljs-number">196</span><span class="hljs-string">-/+</span> <span class="hljs-attr">buffers/cache:</span>        <span class="hljs-number">130</span>       <span class="hljs-number">1731</span><span class="hljs-attr">Swap:</span>            <span class="hljs-number">0</span>          <span class="hljs-number">0</span>          <span class="hljs-number">0</span></code></pre><p>(5).开机自动加载swap分区：</p><p>修改/etc/fstab，加上一行</p><pre><code class="hljs angelscript">/dev/sda5    swap    swap    defaults    <span class="hljs-number">0</span>    <span class="hljs-number">0</span></code></pre><blockquote><p>学习于[<a href="https://www.cnblogs.com/f-ck-need-u/">骏马金龙</a>]</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 开机详细流程</title>
    <link href="/2020/06/01/Linux_boot/"/>
    <url>/2020/06/01/Linux_boot/</url>
    
    <content type="html"><![CDATA[<p>TODO….</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 简单内核优化</title>
    <link href="/2020/05/13/kernel_modify/"/>
    <url>/2020/05/13/kernel_modify/</url>
    
    <content type="html"><![CDATA[<h1 id="ulimit"><a href="#ulimit" class="headerlink" title="ulimit"></a>ulimit</h1><p>ulimit 为 shell 内建指令，可用来控制shell执行程序的资源。</p><pre><code class="hljs less"><span class="hljs-selector-attr">[root@localhost ~]</span># <span class="hljs-selector-tag">ulimit</span> <span class="hljs-selector-tag">-a</span><span class="hljs-selector-tag">core</span> <span class="hljs-selector-tag">file</span> <span class="hljs-selector-tag">size</span>          (blocks, -c) <span class="hljs-selector-tag">0</span><span class="hljs-selector-tag">data</span> <span class="hljs-selector-tag">seg</span> <span class="hljs-selector-tag">size</span>           (kbytes, -d) <span class="hljs-selector-tag">unlimited</span><span class="hljs-selector-tag">scheduling</span> <span class="hljs-selector-tag">priority</span>             (-e) <span class="hljs-selector-tag">0</span><span class="hljs-selector-tag">file</span> <span class="hljs-selector-tag">size</span>               (blocks, -f) <span class="hljs-selector-tag">unlimited</span><span class="hljs-selector-tag">pending</span> <span class="hljs-selector-tag">signals</span>                 (-i) <span class="hljs-selector-tag">7257</span><span class="hljs-selector-tag">max</span> <span class="hljs-selector-tag">locked</span> <span class="hljs-selector-tag">memory</span>       (kbytes, -l) <span class="hljs-selector-tag">64</span><span class="hljs-selector-tag">max</span> <span class="hljs-selector-tag">memory</span> <span class="hljs-selector-tag">size</span>         (kbytes, -m) <span class="hljs-selector-tag">unlimited</span><span class="hljs-selector-tag">open</span> <span class="hljs-selector-tag">files</span>                      (-n) <span class="hljs-selector-tag">1024</span><span class="hljs-selector-tag">pipe</span> <span class="hljs-selector-tag">size</span>            (<span class="hljs-number">512</span> bytes, -p) <span class="hljs-selector-tag">8</span><span class="hljs-selector-tag">POSIX</span> <span class="hljs-selector-tag">message</span> <span class="hljs-selector-tag">queues</span>     (bytes, -q) <span class="hljs-selector-tag">819200</span><span class="hljs-selector-tag">real-time</span> <span class="hljs-selector-tag">priority</span>              (-r) <span class="hljs-selector-tag">0</span><span class="hljs-selector-tag">stack</span> <span class="hljs-selector-tag">size</span>              (kbytes, -s) <span class="hljs-selector-tag">8192</span><span class="hljs-selector-tag">cpu</span> <span class="hljs-selector-tag">time</span>               (seconds, -t) <span class="hljs-selector-tag">unlimited</span><span class="hljs-selector-tag">max</span> <span class="hljs-selector-tag">user</span> <span class="hljs-selector-tag">processes</span>              (-u) <span class="hljs-selector-tag">7257</span><span class="hljs-selector-tag">virtual</span> <span class="hljs-selector-tag">memory</span>          (kbytes, -v) <span class="hljs-selector-tag">unlimited</span><span class="hljs-selector-tag">file</span> <span class="hljs-selector-tag">locks</span>                      (-x) <span class="hljs-selector-tag">unlimited</span></code></pre><a id="more"></a><h2 id="core-file-size"><a href="#core-file-size" class="headerlink" title="core file size"></a>core file size</h2><p>core 文件其实就是内存的映像，当程序崩溃时，存储内存的相应信息，主用用于对程序进行调试。当程序崩溃时便会产生 core 文件，其实准确的应该说是 core dump 文件,默认生成位置与可执行程序位于同一目录下，文件名为 core.*** ，其中***为数字。</p><p>开启 core 文件生成</p><blockquote><p>查看 core 文件生成是否打开，如果为0，则表示没有打开。<br>[root@localhost ~]#  ulimit -c<br>0</p><p>临时设置（如下设置2G，单位为kbyte）<br>如果生成的信息超过此大小，将会被裁剪，最终生成一个不完整的core文件。在调试此core文件的时候，<strong>gdb</strong>会提示错误。<br>ulimit -c 4194304</p></blockquote><h2 id="file-size"><a href="#file-size" class="headerlink" title="file size"></a>file size</h2><p>文本文件最大容量，可用 <code>ulimit -f</code> + 数字修改，需要限制日志文件大小时，可以修改此项</p><h2 id="open-files"><a href="#open-files" class="headerlink" title="open files"></a>open files</h2><p>系统最大打开文件数量，可用<code>ulimit -n</code> + <strong>数字</strong> 更改，一般设置为65536</p><p><code>ulimit -n 65536</code></p><p>启动任何进程，都会加载文件。针对 Web 服务器、基于java的服务会加载更多的文件，对于这些服务器，需要修改最大打开文件数。</p><h2 id="max-user-processes"><a href="#max-user-processes" class="headerlink" title="max user processes"></a>max user processes</h2><p>用户可使用最多的进程数，可用<code>ulimit -u</code> + <strong>数字</strong> 更改，一般改为65536</p><p><code>ulimit -u 65536</code></p><p><strong><u>以上修改为临时修改，需要永久修改需要修改配置文件<code>/etc/security/limits.conf</code></u></strong></p><p>当修改<code>/etc/security/limits.d/*.conf</code> 下的配置文件是，会优先使用此配置文件</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>规划和安装ESXI</title>
    <link href="/2020/04/07/vSphere_esxi_deploy/"/>
    <url>/2020/04/07/vSphere_esxi_deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="1-规划-vSphere-部署"><a href="#1-规划-vSphere-部署" class="headerlink" title="1. 规划 vSphere 部署"></a>1. 规划 vSphere 部署</h1><h2 id="1-1-服务器平台"><a href="#1-1-服务器平台" class="headerlink" title="1.1 服务器平台"></a>1.1 服务器平台</h2><p>检查设备兼容性：存储控制器或者网络适配器</p><p>可使用 VNware 网上支持搜索的兼容指南（Compatibility Guide）：<a href="http://www.vmware.com/resources/compatibility/">www.vmware.com/resources/compatibility/</a></p><a id="more"></a><h2 id="1-2-存储架构"><a href="#1-2-存储架构" class="headerlink" title="1.2 存储架构"></a>1.2 存储架构</h2><ul><li>基于光纤通道和以太网光纤通道（FCoE）存储</li><li>基于iSCSI的存储</li><li>通过网络文件系统（NFS）访问的存储</li><li>支持在一种解决方案中使用多种存储协议</li></ul><h2 id="1-3-网络基础架构"><a href="#1-3-网络基础架构" class="headerlink" title="1.3 网络基础架构"></a>1.3 网络基础架构</h2><ul><li>ESXI 管理网络至少需要一个NIC（网络接口卡），推荐增加1个 NIC 冗余</li><li>vMotion 需要使用一个NIC ，推荐增加1个 NIC 冗余</li><li>使用 vSphere FT 需要至少一个NIC ，推荐增加1个 NIC 冗余</li><li>在使用 iSCSI 、 NFS 或 VSAN 的部署环境中，至少还需增加一个NIC，最好为2个</li><li>需要2个 NIC 来处理来自虚拟机本身的流量</li></ul><h1 id="2-部署-ESXI"><a href="#2-部署-ESXI" class="headerlink" title="2. 部署 ESXI"></a>2. 部署 ESXI</h1><h2 id="2-1-部署方法"><a href="#2-1-部署方法" class="headerlink" title="2.1 部署方法"></a>2.1 部署方法</h2><ul><li>交互式安装 ESXI</li><li>无人干预（脚本化）安装 ESXI</li><li>自动化分配（vSphere Auto Deploy） ESXI</li></ul><h2 id="2-2-无人干预-ESXI-安装过程的启动项选择"><a href="#2-2-无人干预-ESXI-安装过程的启动项选择" class="headerlink" title="2.2 无人干预 ESXI 安装过程的启动项选择"></a>2.2 无人干预 ESXI 安装过程的启动项选择</h2><table><thead><tr><th align="center">启动选项</th><th align="center">简要说明</th></tr></thead><tbody><tr><td align="center">ks=cdrom:/path</td><td align="center">使用CD-ROM 中指定路径的安装脚本。安装脚本会检查所有CD-ROM驱动器，直到发现与所指定路径相匹配的文件</td></tr><tr><td align="center">ks=usb</td><td align="center">USB设备中根目录下名称为ks.cfg的安装脚本。安装程序会搜索文件格式为FAT16或FAT32的USB设备</td></tr><tr><td align="center">ks=usb:/path</td><td align="center">使用USB设备上指定路径的安装脚本</td></tr><tr><td align="center">ks=protocol:/serverpath</td><td align="center">使用指定网络位置的安装脚本。支持的协议NFS、HTTP、HTTPS、FTP</td></tr></tbody></table><p>使用脚本安装ESXI，能够提高安装速度，有利于保证所有ESXI主机都有统一的配置。</p><h2 id="2-3-自动化分配（vSphere-Auto-Deploy）-ESXI"><a href="#2-3-自动化分配（vSphere-Auto-Deploy）-ESXI" class="headerlink" title="2.3 自动化分配（vSphere Auto Deploy） ESXI"></a>2.3 自动化分配（vSphere Auto Deploy） ESXI</h2><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="vSphere-设计需考虑的网络问题"><a href="#vSphere-设计需考虑的网络问题" class="headerlink" title="vSphere 设计需考虑的网络问题"></a>vSphere 设计需考虑的网络问题</h2><ul><li>VLAN支持</li><li>链路聚合、网络速度（1Gbps或10Gbps）、负载均衡、NIC接口</li></ul><h2 id="使用-vSphere-Auto-Deploy-部署-ESXI-的优缺点"><a href="#使用-vSphere-Auto-Deploy-部署-ESXI-的优缺点" class="headerlink" title="使用 vSphere Auto Deploy 部署 ESXI 的优缺点"></a>使用 vSphere Auto Deploy 部署 ESXI 的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>可以快速分配、快速重分配及在分配过程中快速增加新 ESXI 映像或更新。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>增加复杂性及需要额外的配置，解决部署无状态问题</p>]]></content>
    
    
    <categories>
      
      <category>VMware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux nmcli 使用及网络配置</title>
    <link href="/2020/03/26/linux_nmcli/"/>
    <url>/2020/03/26/linux_nmcli/</url>
    
    <content type="html"><![CDATA[<h1 id="一、nmcli-命令和网络配置文件对应关系"><a href="#一、nmcli-命令和网络配置文件对应关系" class="headerlink" title="一、nmcli 命令和网络配置文件对应关系"></a>一、nmcli 命令和网络配置文件对应关系</h1><table><thead><tr><th align="center">nmcli connection modify *</th><th align="center">ifcfg-* 文件</th></tr></thead><tbody><tr><td align="center">ipv4.method manual</td><td align="center">BOOTPROTO=none</td></tr><tr><td align="center">ipv4.method auto</td><td align="center">BOOTPROTO=dhcp</td></tr><tr><td align="center">ipv4.addresses 192.168.1.1/24</td><td align="center">IPADDR=192.168.2.230,PREFIX=24</td></tr><tr><td align="center">ipv4.dns 8.8.8.8</td><td align="center">DNS1=8.8.8.8</td></tr><tr><td align="center">ipv4.dns-seach example.com</td><td align="center">DOMAIN=example.com</td></tr><tr><td align="center">ipv4.ignore-auto-dns true</td><td align="center">PEERDNS=no</td></tr><tr><td align="center">connection.autoconnect yes</td><td align="center">ONBOOT=yes</td></tr><tr><td align="center">connection.id eth0</td><td align="center">NAME=eth0</td></tr><tr><td align="center">connection.interface-name eth0</td><td align="center">DEVICE=eth0</td></tr><tr><td align="center">802-3-ethernet.mac-address …</td><td align="center">HWADDR=…</td></tr></tbody></table><p><font color=red>注 *：网卡名称</font></p><p>可以使用 <code>nmcli device</code> 查看网卡</p><h2 id="1-1-应用"><a href="#1-1-应用" class="headerlink" title="1.1 应用"></a>1.1 应用</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens18 </span>TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=dhcpDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens18DEVICE=ens18[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection modify ens18 ipv4.addresses 192.168.2.230/24     &lt;---配置ip地址和子网掩码</span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection modify ens18 ipv4.dns 114.114.114.114            &lt;---添加dns</span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection modify ens18 +ipv4.dns 8.8.8.8                   &lt;---添加dns</span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection modify ens18 ipv4.method manual                  &lt;---将ip获取方式改为手动</span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection modify ens18 ipv4.gateway 192.168.2.1            &lt;---配置网关地址</span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens18                   </span>TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=noneDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens18DEVICE=ens18ONBOOT=yesIPADDR=192.168.2.230PREFIX=24DNS1=114.114.114.114DNS2=8.8.8.8GATEWAY=192.168.2.1</code></pre><h1 id="二、主机名"><a href="#二、主机名" class="headerlink" title="二、主机名"></a>二、主机名</h1><p>默认主机名一般为：localhost.localdomain</p><p>修改主机名：</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># hostnamectl set-hostname test</span>[root@localhost ~]<span class="hljs-comment"># cat /etc/hostname</span><span class="hljs-built_in">test</span></code></pre><h1 id="三、nmcli-命令的使用"><a href="#三、nmcli-命令的使用" class="headerlink" title="三、nmcli 命令的使用"></a>三、nmcli 命令的使用</h1><h2 id="3-1-显示网卡或某个网卡具体信息信息"><a href="#3-1-显示网卡或某个网卡具体信息信息" class="headerlink" title="3.1 显示网卡或某个网卡具体信息信息"></a>3.1 显示网卡或某个网卡具体信息信息</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection</span>NAME   UUID                                  TYPE      DEVICE ens18  d43b7a46-0dff-9d53-1068-ccc58c977db3  ethernet  ens18  [root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli con show</span>NAME   UUID                                  TYPE      DEVICE ens18  d43b7a46-0dff-9d53-1068-ccc58c977db3  ethernet  ens18  [root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli con show ens18</span>connection.id:                          ens18connection.uuid:                        d43b7a46-0dff-9d53-1068-ccc58c977db3connection.stable-id:                   --connection.type:                        802-3-ethernetconnection.interface-name:              ens18</code></pre><h2 id="3-2-显示所有设备状态"><a href="#3-2-显示所有设备状态" class="headerlink" title="3.2 显示所有设备状态"></a>3.2 显示所有设备状态</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli device status</span>DEVICE  TYPE      STATE      CONNECTION ens18   ethernet  connected  ens18      lo      loopback  unmanaged  --  `</code></pre><h2 id="3-3-重启网络使配置文件生效"><a href="#3-3-重启网络使配置文件生效" class="headerlink" title="3.3 重启网络使配置文件生效"></a>3.3 重启网络使配置文件生效</h2><ol><li><code>systemctl restart network</code></li><li><code>nmcli connection reload</code></li></ol><h2 id="3-4-显示所有活动连接"><a href="#3-4-显示所有活动连接" class="headerlink" title="3.4 显示所有活动连接"></a>3.4 显示所有活动连接</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># nmcli connection show --active</span>NAME   UUID                                  TYPE      DEVICE ens18  d43b7a46-0dff-9d53-1068-ccc58c977db3  ethernet  ens18</code></pre><h2 id="3-5-删除和添加一个网卡连接"><a href="#3-5-删除和添加一个网卡连接" class="headerlink" title="3.5 删除和添加一个网卡连接"></a>3.5 删除和添加一个网卡连接</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment">#  nmcli connection delete eth0 </span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment">#  nmcli connection add type ethernet con-name eth0 ifname eno33554992</span></code></pre><h2 id="3-6-网络接口的停用和启用"><a href="#3-6-网络接口的停用和启用" class="headerlink" title="3.6 网络接口的停用和启用"></a>3.6 网络接口的停用和启用</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment">#  nmcli connection down eth0 </span>[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment">#  nmcli connection up eth0</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux LVM</title>
    <link href="/2020/03/12/linux_lvm/"/>
    <url>/2020/03/12/linux_lvm/</url>
    
    <content type="html"><![CDATA[<h1 id="一、LVM-Logical-Volume-Manager"><a href="#一、LVM-Logical-Volume-Manager" class="headerlink" title="一、LVM (Logical Volume Manager)"></a>一、LVM (Logical Volume Manager)</h1><p>LVM是逻辑盘卷管理（Logical Volume Manager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM 是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。</p><h1 id="二、LVM-特点"><a href="#二、LVM-特点" class="headerlink" title="二、LVM 特点"></a>二、LVM 特点</h1><p>LVM 将存储<strong>虚拟化</strong>，使用逻辑卷，不会受限于物理磁盘的大小。另外，和硬件相关的存储设置被其隐藏，能不用停止应用或卸载文件系统来调整卷大小或数据迁移。这样能减少操作成本，LVM最大的特点就是可以对磁盘进行动态管理。因为逻辑卷的大小是可以动态调整的，而且不会丢失现有的数据。如果我们新增加了硬盘，其也不会改变现有上层的逻辑卷。作为一个动态磁盘管理机制，逻辑卷技术大大提高了磁盘管理的灵活性。</p><h1 id="三、LVM-工作机制"><a href="#三、LVM-工作机制" class="headerlink" title="三、LVM 工作机制"></a>三、LVM 工作机制</h1><p>LVM就是通过将底层的物理硬盘抽象的封装起来，然后以逻辑卷的方式呈现给上层应用。在传统的磁盘管理机制中，我们的上层应用是直接访问文件系统，从而对底层的物理硬盘进行读取。而在LVM中，其通过对底层的硬盘进行封装，当我们对底层的物理硬盘进行操作时，其不再是针对于分区进行操作，而是通过一个叫做逻辑卷的东西来对其进行底层的磁盘管理操作。</p><h2 id="3-1-逻辑卷管理"><a href="#3-1-逻辑卷管理" class="headerlink" title="3.1 逻辑卷管理"></a>3.1 逻辑卷管理</h2><h3 id="3-1-1-物理卷（PV，Physical-Volume）"><a href="#3-1-1-物理卷（PV，Physical-Volume）" class="headerlink" title="3.1.1 物理卷（PV，Physical Volume）"></a>3.1.1 物理卷（PV，Physical Volume）</h3><p>物理卷就是指磁盘，磁盘分区或从逻辑上和磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有和LVM相关的管理参数。当前 LVM 允许你在每个物理卷上保存这个物理卷的0至2份元数据拷贝，默认为1，保存在设备的开始处。为2时，在设备结束处保存第二份备份。</p><h3 id="3-1-1-卷组（VG，Volume-Group）"><a href="#3-1-1-卷组（VG，Volume-Group）" class="headerlink" title="3.1.1 卷组（VG，Volume Group）"></a>3.1.1 卷组（VG，Volume Group）</h3><p>LVM 卷组类似于非 LVM 系统中的物理硬盘，其由物理卷组成。能在卷组上创建一个或多LVM分区（逻辑卷）， LVM卷组由一个或多个物理卷组成。</p><h3 id="3-1-1-逻辑卷（LV，Logical-Volume）"><a href="#3-1-1-逻辑卷（LV，Logical-Volume）" class="headerlink" title="3.1.1 逻辑卷（LV，Logical Volume）"></a>3.1.1 逻辑卷（LV，Logical Volume）</h3><p>LVM的逻辑卷类似于非 LVM 系统中的硬盘分区，在逻辑卷之上能建立文件系统(比如/home或/usr等)。</p><p>关系图：</p><p><img src="/img/linux_lvm/linux_lvm_1.jpg"></p><h1 id="四、创建-LVM"><a href="#四、创建-LVM" class="headerlink" title="四、创建 LVM"></a>四、创建 LVM</h1><h2 id="4-1-检查系统是否安装-LVM-管理工具"><a href="#4-1-检查系统是否安装-LVM-管理工具" class="headerlink" title="4.1 检查系统是否安装 LVM 管理工具"></a>4.1 检查系统是否安装 LVM 管理工具</h2><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># rpm -qa |grep lvm</span>lvm2-2.02.186-7.el7_8.2.x86_64lvm2-libs-2.02.186-7.el7_8.2.x86_64<span class="hljs-comment">#未安装可使用 yum 安装</span>[root@localhost ~]<span class="hljs-comment"># yum install lvm*</span></code></pre><h2 id="4-2-创建物理卷-PV"><a href="#4-2-创建物理卷-PV" class="headerlink" title="4.2 创建物理卷 PV"></a>4.2 创建物理卷 PV</h2><p>基本 PV 命令：</p><ul><li>pvcreate 将物理分区新建为 PV</li><li>pvs/pvscan 查看系统里有 PV 的磁盘</li><li>pvdisplay 显示系统上 PV 的状态</li><li>pvremove 删除 PV</li></ul><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># lsblk </span>NAME            MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsdb               8:16   0   2G  0 disk sdc               8:32   0   2G  0 disk sdd               8:48   0   2G  0 disk sde               8:64   0   2G  0 disk sdf               8:80   0   2G  0 disk</code></pre><p>准备使用 <strong>sdb</strong>、<strong>sdc</strong> 来创建 LVM：</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># pvcreate /dev/sdb /dev/sdc</span>  Physical volume <span class="hljs-string">&quot;/dev/sdb&quot;</span> successfully created.  Physical volume <span class="hljs-string">&quot;/dev/sdc&quot;</span> successfully created.<span class="hljs-comment">#查看创建的 pv</span>[root@localhost ~]<span class="hljs-comment"># pvs</span>  PV         VG     Fmt  Attr PSize   PFree  /dev/sdb          lvm2 ---    2.00g 2.00g  /dev/sdc          lvm2 ---    2.00g 2.00g</code></pre><h2 id="4-3-创建卷组-VG"><a href="#4-3-创建卷组-VG" class="headerlink" title="4.3 创建卷组 VG"></a>4.3 创建卷组 VG</h2><p>基本 VG 命令：</p><ul><li>vgcreat [-s xM] vg_name /dev/sd.. 新建 vg，-s 后面接 pe 的大小（可选），单位是 M、G。可放多块 pv</li><li>vgextend 扩展 vg，就是增加 pv</li><li>vgs/vgscan 查看系统里有 vg 的磁盘</li><li>vgdisplay 显示系统上的 vg 状态</li><li>vgremove 删除 vg</li><li>vgreduce 在 vg 里删除 pv</li></ul><p>创建名为 vg_test ：</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># vgcreate -s 16M vg_test /dev/sdb</span>  Volume group <span class="hljs-string">&quot;vg_test&quot;</span> successfully created<span class="hljs-comment">#查看创建好的 vg</span>[root@localhost ~]<span class="hljs-comment"># vgs</span>  VG      <span class="hljs-comment">#PV #LV #SN Attr   VSize   VFree</span>  vg_test   1   0   0 wz--n-   1.98g 1.98g</code></pre><h2 id="4-4-创建逻辑卷-lv"><a href="#4-4-创建逻辑卷-lv" class="headerlink" title="4.4 创建逻辑卷 lv"></a>4.4 创建逻辑卷 lv</h2><p>基本 LV 命令：</p><ul><li>lvcreate (-l pe num)/(-L size) -n lv_name vg_name 新建 lv，lv 大小两种可选：1. -l 指定 pe 的个数，创建vg时有指定 pe大小 2.-L直接指定要创建 lv 的容量，单位为 M、G</li><li>lvextend 扩容</li><li>lvs/lvscan 查看系统里有 lv 的磁盘</li><li>lvdisplay 显示系统上 lv 的状态</li><li>lvremove 删除 lv</li><li>lvreduce 在 lv 里减少容量</li></ul><p>创建 lv_test</p><pre><code class="hljs bash"><span class="hljs-comment">#查看 vg_test 状态</span>[root@localhost ~]<span class="hljs-comment"># vgdisplay </span>  --- Volume group ---  VG Name               vg_test  System ID               Format                lvm2  Metadata Areas        1  Metadata Sequence No  1  VG Access             <span class="hljs-built_in">read</span>/write  VG Status             resizable  MAX LV                0  Cur LV                0  Open LV               0  Max PV                0  Cur PV                1  Act PV                1  VG Size               1.98 GiB  PE Size               16.00 MiB  Total PE              127  Alloc PE / Size       0 / 0     Free  PE / Size       127 / 1.98 GiB  VG UUID               Oge6D2-KPLh-RqNA-cRJ8-mc1y-0rkC-aoXmVt<span class="hljs-comment">#见 pe可用127,我们使用100个 pe</span>[root@localhost ~]<span class="hljs-comment"># lvcreate -l 100 -n lv_test vg_test</span>  Logical volume <span class="hljs-string">&quot;lv_test&quot;</span> created.[root@localhost ~]<span class="hljs-comment"># lvs</span>  LV      VG      Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert                                                   lv_test vg_test -wi-a-----   1.56g</code></pre><p><strong>格式化刚创建的 lv_test</strong></p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># mkfs.ext4 /dev/vg_test/lv_test </span>mke2fs 1.42.9 (28-Dec-2013)Discarding device blocks: <span class="hljs-keyword">done</span>                            Filesystem label=OS <span class="hljs-built_in">type</span>: LinuxBlock size=4096 (<span class="hljs-built_in">log</span>=2)Fragment size=4096 (<span class="hljs-built_in">log</span>=2)Stride=0 blocks, Stripe width=0 blocks102544 inodes, 409600 blocks20480 blocks (5.00%) reserved <span class="hljs-keyword">for</span> the super userFirst data block=0Maximum filesystem blocks=41943040013 block groups32768 blocks per group, 32768 fragments per group7888 inodes per groupSuperblock backups stored on blocks:         32768, 98304, 163840, 229376, 294912Allocating group tables: <span class="hljs-keyword">done</span>                            Writing inode tables: <span class="hljs-keyword">done</span>                            Creating journal (8192 blocks): <span class="hljs-keyword">done</span>Writing superblocks and filesystem accounting information: <span class="hljs-keyword">done</span></code></pre><p><strong>挂载使用；</strong></p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># mount /dev/vg_test/lv_test /mnt</span>[root@localhost ~]<span class="hljs-comment"># mount</span>/dev/mapper/vg_test-lv_test on /mnt <span class="hljs-built_in">type</span> ext4 (rw,relatime,seclabel,data=ordered)</code></pre><h1 id="五、LVM-在线扩展"><a href="#五、LVM-在线扩展" class="headerlink" title="五、LVM 在线扩展"></a>五、LVM 在线扩展</h1><p>先在 lv_test（/mnt） 下写入数据，测试在线扩展</p><pre><code class="hljs bash">[root@localhost mnt]<span class="hljs-comment"># touch hello_lvm</span>[root@localhost mnt]<span class="hljs-comment"># ls</span>hello_lvm</code></pre><p><font color=red>扩容 lv 分两种情况，第一是在 vg 容量还有的情况下，也就是Free PE Size 够用情况下。第二是在 vg 不够用，得先扩容 vg 的情况</font></p><h2 id="5-1-在-vg-下直接扩容"><a href="#5-1-在-vg-下直接扩容" class="headerlink" title="5.1 在 vg 下直接扩容"></a>5.1 在 vg 下直接扩容</h2><pre><code class="hljs bash"><span class="hljs-comment">#查看 vg 还剩27个 pe</span> [root@localhost ~]<span class="hljs-comment"># vgdisplay </span>  Free  PE / Size       27 / 432.00 MiB<span class="hljs-comment">#现在 lv 大小</span> [root@localhost ~]<span class="hljs-comment">#lvs</span>  LV      VG      Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert                                                    lv_test vg_test -wi-ao----   1.56g   <span class="hljs-comment">#lv 再扩容 20 个 pe，所以要 -l 120，之前给了 100，再扩容加上20，则120</span>[root@localhost ~]<span class="hljs-comment"># lvextend -l 120 /dev/vg_test/lv_test </span>  Size of logical volume vg_test/lv_test changed from 1.56 GiB (100 extents) to &lt;1.88 GiB (120 extents).  Logical volume vg_test/lv_test successfully resized.<span class="hljs-comment">#查看实际的磁盘容量，发现并没改变</span>[root@localhost ~]<span class="hljs-comment"># df -Th</span>Filesystem                  Type      Size  Used Avail Use% Mounted on/dev/mapper/vg_test-lv_test ext4      1.6G  4.7M  1.5G   1% /mnt<span class="hljs-comment">#需要对文件系统进行扩容</span>[root@localhost ~]<span class="hljs-comment"># resize2fs /dev/vg_test/lv_test </span>resize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/vg_test/lv_test is mounted on /mnt; on-line resizing requiredold_desc_blocks = 1, new_desc_blocks = 1The filesystem on /dev/vg_test/lv_test is now 491520 blocks long.[root@localhost ~]<span class="hljs-comment"># df -Th</span>Filesystem                  Type      Size  Used Avail Use% Mounted on/dev/mapper/vg_test-lv_test ext4      1.9G  4.7M  1.8G   1% /mnt</code></pre><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul><li>resize2fs /dev/vg_test/lv_test　　＃更新文件系统的大小，即激活</li><li>resize2fs -f　/dev/vg_test/lv_test　500M　＃强制设置大小</li><li>dump2fs /dev/vgtest/lvtest　　＃查看ext系列文件系统</li></ul><h2 id="5-2-vg-不够用情况，扩容-lv"><a href="#5-2-vg-不够用情况，扩容-lv" class="headerlink" title="5.2 vg 不够用情况，扩容 lv"></a>5.2 vg 不够用情况，扩容 lv</h2><p><strong>vg 空间不够，需先扩展 vg，扩展 vg 就是往 vg 中加 pv</strong></p><p>刚好开始创建 pv 时，多创建了个 sdc，将 pv sdc 加入到 vg_test 里面：</p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># pvs</span>  PV         VG      Fmt  Attr PSize   PFree    /dev/sdb   vg_test lvm2 a--    1.98g 112.00m  /dev/sdc           lvm2 ---    2.00g   2.00g[root@localhost ~]<span class="hljs-comment"># vgextend vg_test /dev/sdc </span>  Volume group <span class="hljs-string">&quot;vg_test&quot;</span> successfully extended[root@localhost ~]<span class="hljs-comment"># vgextend vg_test /dev/sdc </span>  Volume group <span class="hljs-string">&quot;vg_test&quot;</span> successfully extended[root@localhost ~]<span class="hljs-comment"># vgdisplay </span>  --- Volume group ---  VG Name               vg_test  System ID               Format                lvm2  Metadata Areas        2  Metadata Sequence No  4  VG Access             <span class="hljs-built_in">read</span>/write  VG Status             resizable  MAX LV                0  Cur LV                1  Open LV               1  Max PV                0  Cur PV                2  Act PV                2  VG Size               &lt;3.97 GiB  PE Size               16.00 MiB  Total PE              254  Alloc PE / Size       120 / &lt;1.88 GiB  Free  PE / Size       134 / 2.09 GiB          &lt;-----可用容量变多了  VG UUID               Oge6D2-KPLh-RqNA-cRJ8-mc1y-0rkC-aoXmVt<span class="hljs-comment">#将 pe 数量扩容到 220个</span>[root@localhost ~]<span class="hljs-comment"># lvextend -l 220 /dev/vg_test/lv_test </span>  Size of logical volume vg_test/lv_test changed from &lt;1.88 GiB (120 extents) to &lt;3.44 GiB (220 extents).  Logical volume vg_test/lv_test successfully resized.[root@localhost ~]<span class="hljs-comment"># resize2fs /dev/vg_test/lv_test </span>resize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/vg_test/lv_test is mounted on /mnt; on-line resizing requiredold_desc_blocks = 1, new_desc_blocks = 1The filesystem on /dev/vg_test/lv_test is now 901120 blocks long.[root@localhost ~]<span class="hljs-comment"># df -Th</span>Filesystem                  Type      Size  Used Avail Use% Mounted on/dev/mapper/vg_test-lv_test ext4      3.4G  6.3M  3.2G   1% /mnt<span class="hljs-comment">#查看数据是否还存在</span>[root@localhost ~]<span class="hljs-comment"># ll /mnt/</span>-rw-r--r--. 1 root root     0 Aug 29 15:55 hello_lvm</code></pre><h1 id="六、LVM-缩减"><a href="#六、LVM-缩减" class="headerlink" title="六、LVM 缩减"></a>六、LVM 缩减</h1><p>LVM 的缩减需要卸载文件系统–<code>[root@localhost ~]# umount /mnt/</code></p><p><strong>缩减操作：</strong></p><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># lvs</span>  LV      VG      Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert  root    centos  -wi-ao---- &lt;17.00g                                                      swap    centos  -wi-ao----   2.00g                                                      lv_test vg_test -wi-a-----  &lt;3.44g                                                    [root@localhost ~]<span class="hljs-comment"># resize2fs /dev/vg_test/lv_test 2G</span>resize2fs 1.42.9 (28-Dec-2013)Please run <span class="hljs-string">&#x27;e2fsck -f /dev/vg_test/lv_test&#x27;</span> first.<span class="hljs-comment">#需要进行文件系统检测</span>[root@localhost ~]<span class="hljs-comment"># e2fsck -f /dev/vg_test/lv_test </span>e2fsck 1.42.9 (28-Dec-2013)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/vg_test/lv_test: 12/220864 files (8.3% non-contiguous), 23666/901120 blocks[root@localhost ~]<span class="hljs-comment"># resize2fs /dev/vg_test/lv_test 2G</span>resize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/vg_test/lv_test to 524288 (4k) blocks.The filesystem on /dev/vg_test/lv_test is now 524288 blocks long.[root@localhost ~]<span class="hljs-comment"># lvs</span>  LV      VG      Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert                                                   lv_test vg_test -wi-a-----  &lt;3.44g                                                    [root@localhost ~]<span class="hljs-comment"># lvreduce -l 150 /dev/vg_test/lv_test </span>  WARNING: Reducing active logical volume to 2.34 GiB.  THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce vg_test/lv_test? [y/n]: y  Size of logical volume vg_test/lv_test changed from &lt;3.44 GiB (220 extents) to 2.34 GiB (150 extents).  Logical volume vg_test/lv_test successfully resized.[root@localhost ~]<span class="hljs-comment"># lvs</span>  LV      VG      Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert  root    centos  -wi-ao---- &lt;17.00g                                                      swap    centos  -wi-ao----   2.00g                                                      lv_test vg_test -wi-a-----   2.34g                                                    [root@localhost ~]<span class="hljs-comment"># mount /dev/vg_test/lv_test /mnt</span>[root@localhost ~]<span class="hljs-comment"># df -Th</span>Filesystem                  Type      Size  Used Avail Use% Mounted ondevtmpfs                    devtmpfs  908M     0  908M   0% /devtmpfs                       tmpfs     919M     0  919M   0% /dev/shmtmpfs                       tmpfs     919M  8.6M  911M   1% /runtmpfs                       tmpfs     919M     0  919M   0% /sys/fs/cgroup/dev/mapper/centos-root     xfs        17G  2.4G   15G  14% //dev/sda1                   xfs      1014M  211M  804M  21% /boottmpfs                       tmpfs     184M     0  184M   0% /run/user/0/dev/mapper/vg_test-lv_test ext4      2.0G  4.7M  1.9G   1% /mnt<span class="hljs-comment">#查看测试问价</span>[root@localhost ~]<span class="hljs-comment"># ll /mnt/</span>total 16-rw-r--r--. 1 root root     0 Aug 29 15:55 hello_lvm</code></pre><h1 id="七、删除LVM"><a href="#七、删除LVM" class="headerlink" title="七、删除LVM"></a>七、删除LVM</h1><p>要彻底的来移除LVM的话，需要把创建的步骤反过来操作。</p><ol><li>卸载 文件系统</li><li>删除lv</li><li>删除vg</li><li>删除pv</li></ol><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># umount /mnt</span>[root@localhost ~]<span class="hljs-comment"># lvremove /dev/vg_test/lv_test </span>Do you really want to remove active logical volume vg_test/lv_test? [y/n]: y  Logical volume <span class="hljs-string">&quot;lv_test&quot;</span> successfully removed[root@localhost ~]<span class="hljs-comment"># vgremove /dev/vg_test</span>  Volume group <span class="hljs-string">&quot;vg_test&quot;</span> successfully removed[root@localhost ~]<span class="hljs-comment"># pvremove /dev/sdb /dev/sdc</span>  Labels on physical volume <span class="hljs-string">&quot;/dev/sdb&quot;</span> successfully wiped.  Labels on physical volume <span class="hljs-string">&quot;/dev/sdc&quot;</span> successfully wiped.</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7 更改网卡名称</title>
    <link href="/2020/03/02/linux_change_ifname/"/>
    <url>/2020/03/02/linux_change_ifname/</url>
    
    <content type="html"><![CDATA[<p>Redhat 7 官方文档介绍命名规则</p><p>CentOS 7 默认网卡名大多为：ens，已经不是我们熟悉的 eth ，从centos7开始，网卡命名会根据固件，拓扑结构和位置信息来确定。</p><hr><h1 id="一、修改步骤"><a href="#一、修改步骤" class="headerlink" title="一、修改步骤"></a>一、修改步骤</h1><h2 id="1-1-编辑网卡的配置文件"><a href="#1-1-编辑网卡的配置文件" class="headerlink" title="1.1 编辑网卡的配置文件"></a>1.1 编辑网卡的配置文件</h2><pre><code class="hljs bash">[root@<span class="hljs-built_in">test</span> ~]<span class="hljs-comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens18</span>NAME=eth0           &lt;--- 改为想要的名称，如 eth0，下同DEVICE=eth0</code></pre><h2 id="1-2-重命名网卡配置文件"><a href="#1-2-重命名网卡配置文件" class="headerlink" title="1.2 重命名网卡配置文件"></a>1.2 重命名网卡配置文件</h2><pre><code class="hljs bash">[root@localhost network-scripts]<span class="hljs-comment"># mv ifcfg-ens18 ifcfg-eth0</span></code></pre><h2 id="1-3-修改内核参数配置文件"><a href="#1-3-修改内核参数配置文件" class="headerlink" title="1.3 修改内核参数配置文件"></a>1.3 修改内核参数配置文件</h2><p><code>vi /etc/default/grub</code> ，添加红色框内内容，禁用 CentOS7 上的命名规则</p><p><img src="/img/linux_change_ifname/linux_change_ifname_1.jpg"></p><h2 id="1-4-执行命令"><a href="#1-4-执行命令" class="headerlink" title="1.4 执行命令"></a>1.4 执行命令</h2><p><code>grub2-mkconfig -o /boot/grub2/grub.cfg</code> 来重新生成 grub 配置并更新内核参数。重启设备可生效</p><h2 id="1-5-创建网卡接口命名规则"><a href="#1-5-创建网卡接口命名规则" class="headerlink" title="1.5 创建网卡接口命名规则"></a>1.5 创建网卡接口命名规则</h2><p><code>vim /etc/udev/rules.d/70-persistent-ipoib.rules</code></p><p>添加内容如下一行：</p><p><code>UBSYSTEM==&quot;net&quot;,ACTION==&quot;add&quot;,DRIVERS==&quot;?&quot;,ATTR&#123;address&#125;==&quot;&quot;,ATTR&#123;type&#125;==&quot;1&quot;,KERNEL==&quot;eth*&quot;,NAME=&quot;eth0&quot;</code></p><p>这时重启再添加网卡其名称就会自动变成eth1、eth2 … 依次类推。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核及系统日志分析</title>
    <link href="/2020/02/18/kernel_sys_log_cat/"/>
    <url>/2020/02/18/kernel_sys_log_cat/</url>
    
    <content type="html"><![CDATA[<h1 id="由系统服务-rsyslogd-统一管理"><a href="#由系统服务-rsyslogd-统一管理" class="headerlink" title="由系统服务 rsyslogd 统一管理"></a>由系统服务 rsyslogd 统一管理</h1><ul><li>软件包：rsyslogd-x.x.x_0.x86_64</li><li>主要程序：/sbin/rsyslogd</li><li>配置文件：/etc/rsyslog.conf</li></ul><h1 id="日志消息级别"><a href="#日志消息级别" class="headerlink" title="日志消息级别"></a>日志消息级别</h1><ul><li>0 EMERG （紧急）：导致主机系统不可用的情况</li><li>1 ALERT（警告）：必须马上采取措施解决的问题</li><li>2 CRIT（严重）：比较严重的情况</li><li>3 ERR（错误）：运行出现错误</li><li>4 WARNING（提醒）：可能会影响系统功能的时间</li><li>5 NOTICE（注意）：不会影响系统但是值得注意</li><li>6 INFO（信息）：一般信息</li><li>7 DEBUG（调试）：程序或系统调试信息等</li></ul><h1 id="日志记录的一般格式"><a href="#日志记录的一般格式" class="headerlink" title="日志记录的一般格式"></a>日志记录的一般格式</h1><pre><code class="hljs shell">[root@localhost ~]# tail -f /var/log/messagesJul 19 06:06:33 localhost ModemManager[905]: &lt;warn&gt; Couldn&#x27;t find support for device at &#x27;/sys/devices..&#x27;</code></pre><table><thead><tr><th align="center">Jul 19 06:06:33</th><th align="center">localhost</th><th align="center">ModemManager[905]</th><th align="center">&lt;warn&gt;</th><th align="center">Couldn’t find</th></tr></thead><tbody><tr><td align="center">时间戳</td><td align="center">主机名</td><td align="center">子系统</td><td align="center">消息级别</td><td align="center">消息字段内容</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文件系统的选择</title>
    <link href="/2020/02/11/linux_fs/"/>
    <url>/2020/02/11/linux_fs/</url>
    
    <content type="html"><![CDATA[<h1 id="文件系统类型"><a href="#文件系统类型" class="headerlink" title="文件系统类型"></a>文件系统类型</h1><ul><li>ext2：linux 下标准文件系统，无日志记录（inode）功能。</li><li>ext3：在 ext2 基础上增加了日志记录功能（inode），仅支持32000个子目录。</li><li>exit4：ext4 的后续版本，linux 2.6.28 内核开始支持。无限子目录支持，快速 fsck。</li><li>xfs：高性能文件系统，linux3.10 内核开始默认支持。</li></ul><p><img src="/img/linux_fs/linux.jpg"></p><h2 id="查看-linux-内核版本"><a href="#查看-linux-内核版本" class="headerlink" title="查看 linux 内核版本"></a>查看 linux 内核版本</h2><pre><code class="hljs bash">[root@blog ~]<span class="hljs-comment"># uname -a</span>Linux blog 3.10.0-1127.el7.x86_64 <span class="hljs-comment">#1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><h3 id="redhat-centos-查看具体版本号"><a href="#redhat-centos-查看具体版本号" class="headerlink" title="redhat/centos 查看具体版本号"></a>redhat/centos 查看具体版本号</h3><pre><code class="hljs bash">[root@blog ~]<span class="hljs-comment"># cat /etc/redhat-release </span>CentOS Linux release 7.8.2003 (Core)</code></pre><h2 id="文件系统选择"><a href="#文件系统选择" class="headerlink" title="文件系统选择"></a>文件系统选择</h2><p>ext4：适用于<strong>读</strong>操作频繁，同时<strong>小文件</strong>众多的业务</p><p>xfs：适用于<strong>写</strong>操作频繁业务</p><p>ext3：适用于对性能要求不高、数据安全要求不高的业务</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redhat/CentOS 7 单用户修改 root 密码</title>
    <link href="/2019/11/01/linux_change_pw/"/>
    <url>/2019/11/01/linux_change_pw/</url>
    
    <content type="html"><![CDATA[<h1 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h1><ol><li><p>重启系统，在 Grub Boot Loader 倒计时读秒结束前，按下任意键</p></li><li><p>选择第一项，并按下 e 键，编辑</p></li></ol><p><img src="/img/linux_change_pw/linux_change_pw_1.jpg"></p><ol start="3"><li>进入编辑界面后，找到 linux16 开头的行，通过 Ctrl + e 可以快速定位到行末，空格键后输入 rd.break</li></ol><p><img src="/img/linux_change_pw/linux_change_pw_2.jpg"></p><ol start="4"><li>编辑好后，按下 Ctrl + x，引导系统，系统将启动到临时内核 shell 界面，输入以下指令即可修改密码</li></ol><p><img src="/img/linux_change_pw/linux_change_pw_3.jpg"></p><p><strong><font color=red>注意：修改密码后，首次重启时间将会比较长，因为系统将对所有文件进行 SeLinux 打标，请勿在打标过程中手动强制重启，否则系统将会永久性损坏导致无法开机。</font></strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 运维故障排查与系统调优技巧</title>
    <link href="/2019/10/24/linux_install_tips_and_fault_detect/"/>
    <url>/2019/10/24/linux_install_tips_and_fault_detect/</url>
    
    <content type="html"><![CDATA[<h1 id="更改主机名（hostname）"><a href="#更改主机名（hostname）" class="headerlink" title="更改主机名（hostname）"></a>更改主机名（hostname）</h1><p>在更改主机名时将主机名添加至 <code>/etc/hosts</code>下，做个映射</p><p><code>127.0.0.1        hostname</code> </p><p>这样能够避免后续安装应用所出现的问题</p><a id="more"></a><h1 id="SSH-设置"><a href="#SSH-设置" class="headerlink" title="SSH 设置"></a>SSH 设置</h1><p>ssh 配置文件路径，修改配置文件前记得备份文件</p><p><code>cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</code></p><p><code>/etc/ssh/sshd_config</code></p><h2 id="关闭-GSSAPI-验证，可以提高-ssh-连接速度"><a href="#关闭-GSSAPI-验证，可以提高-ssh-连接速度" class="headerlink" title="关闭 GSSAPI 验证，可以提高 ssh 连接速度"></a>关闭 GSSAPI 验证，可以提高 ssh 连接速度</h2><p> <code>GSSAPIAuthentication no</code></p><h2 id="不使用-DNS-反查，可以提高-ssh-连接速度"><a href="#不使用-DNS-反查，可以提高-ssh-连接速度" class="headerlink" title="不使用 DNS 反查，可以提高 ssh 连接速度"></a>不使用 DNS 反查，可以提高 ssh 连接速度</h2><p> <code>UseDNS no</code></p><h1 id="yum-设置"><a href="#yum-设置" class="headerlink" title="yum 设置"></a>yum 设置</h1><h2 id="常用-yum-源"><a href="#常用-yum-源" class="headerlink" title="常用 yum 源"></a>常用 yum 源</h2><ul><li>epel源：<a href="https://fedoraproject.org/wiki/EPEL">https://fedoraproject.org/wiki/EPEL</a> </li><li>repoforge 源：<a href="http://repoforge.org/use/">http://repoforge.org/use/</a> </li></ul><h1 id="排障关注点"><a href="#排障关注点" class="headerlink" title="排障关注点"></a>排障关注点</h1><ul><li>/var/log/messages    #应用日志查询</li><li>/var/log/secure         #登录日志查询</li><li>dmesg                        #系统日志查询</li><li>/var/tmp 、/tmp       #容易攻击点查询</li><li>crontab -l 、/etc/crontab    #计划任务查询（经常攻击对象）</li></ul><h2 id="dmesg-命令、文件"><a href="#dmesg-命令、文件" class="headerlink" title="dmesg 命令、文件"></a>dmesg 命令、文件</h2><p>直接输出当前最新的系统日志。</p><p>系统每次开机将日志保存到<code>/var/log/dmesg</code></p><p>旧的日志会保存到<code>/var/log/dmesg.old</code></p><h2 id="secure-文件"><a href="#secure-文件" class="headerlink" title="secure 文件"></a>secure 文件</h2><p>ssh 登录日志</p><p>可以通过过滤查看登录成功的日志</p><p><code>tail -1000 /var/log/secure |grep Accepted</code></p><h2 id="temp-文件夹（-var-tmp-、-tmp-）"><a href="#temp-文件夹（-var-tmp-、-tmp-）" class="headerlink" title="temp 文件夹（/var/tmp 、/tmp ）"></a>temp 文件夹（/var/tmp 、/tmp ）</h2><p>通过<code>ls -al</code>查看 temp 文件是否有异常文件</p><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>通过<code>crontab -l</code>查看是否有异常的计划任务</p><p>系统计划任务配置文件在<code>/ect/crontab</code>，目录<code>/etc/cron.*/</code>里放的脚本科自动执行，也要检查</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系统性能分析标准</title>
    <link href="/2019/09/17/linux_performance_analysis/"/>
    <url>/2019/09/17/linux_performance_analysis/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">影响性能因素</th><th align="center">评判标准</th><th align="center">评判标准</th><th align="center">评判标准</th></tr></thead><tbody><tr><td align="center"></td><td align="center">好</td><td align="center">坏</td><td align="center">糟糕</td></tr><tr><td align="center">CPU</td><td align="center">user% + sys% &lt; 70%</td><td align="center">user% + sys% = 85%</td><td align="center">user% + sys% &gt;= 90%</td></tr><tr><td align="center">内存</td><td align="center">Swap In(si) &amp; Out(so)=0</td><td align="center">Per CPU with 10 page/s</td><td align="center">more Swap In &amp;Swap Out</td></tr><tr><td align="center">磁盘</td><td align="center">iowait% &lt; 20%</td><td align="center">iowait% = 35%</td><td align="center">iowait% &gt;= 50%</td></tr></tbody></table><h3 id="其中"><a href="#其中" class="headerlink" title="其中"></a>其中</h3><p>%user：表示 CPU 处在用户模式下的时间百分比。<br>%sys：表示 CPU 处在系统模式下的时间百分比。<br>%iowait：表示 CPU 等待输入输出完成时间的百分比。<br>swap in：即si，表示虚拟内存的页导入，即从SWAP DISK 交换到 RAM。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系统权限不正常导致系统无法启动</title>
    <link href="/2019/08/17/linux_sys_root_bad/"/>
    <url>/2019/08/17/linux_sys_root_bad/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h2 id="系统卡在登录界面，debug-模式显示多项-FAILED"><a href="#系统卡在登录界面，debug-模式显示多项-FAILED" class="headerlink" title="系统卡在登录界面，debug 模式显示多项 [FAILED]"></a>系统卡在登录界面，debug 模式显示多项 [FAILED]</h2><p><img src="/img/linux_sys_root_bad/linux_sys_root_bad_1.jpg"></p><a id="more"></a><h1 id="告警信息"><a href="#告警信息" class="headerlink" title="告警信息"></a>告警信息</h1><h2 id="1-远程ssh普通用户能够登入，但是无法切换-root-用户"><a href="#1-远程ssh普通用户能够登入，但是无法切换-root-用户" class="headerlink" title="1 远程ssh普通用户能够登入，但是无法切换 root 用户"></a>1 远程ssh普通用户能够登入，但是无法切换 root 用户</h2><pre><code class="hljs routeros">[user@location~]$ sudo su -sudo: unknow user:rootsudo: unable <span class="hljs-keyword">to</span> initialize<span class="hljs-built_in"> policy </span>plugin</code></pre><h2 id="2-普通用户下使用-ps-ef-查看用户进程-UID-显示为-ixdba"><a href="#2-普通用户下使用-ps-ef-查看用户进程-UID-显示为-ixdba" class="headerlink" title="2 普通用户下使用 ps -ef 查看用户进程 UID 显示为 ixdba"></a>2 普通用户下使用 ps -ef 查看用户进程 UID 显示为 ixdba</h2><p><img src="/img/linux_sys_root_bad/linux_sys_root_bad_2.jpg"></p><p>正常为：</p><p><img src="/img/linux_sys_root_bad/linux_sys_root_bad_3.jpg"></p><h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><h2 id="1-查看-etc-passwd"><a href="#1-查看-etc-passwd" class="headerlink" title="1 查看 /etc/passwd"></a>1 查看 /etc/passwd</h2><p>发现 <code>root:x:0:0:root:/root:/bin/bash</code>-&gt; <code>ixdba:x:0:0:root:/root:/bin/bash</code></p><h2 id="2-将-root-用户名改回"><a href="#2-将-root-用户名改回" class="headerlink" title="2 将 root 用户名改回"></a>2 将 root 用户名改回</h2><p>进单用户模式，修改  /etc/passwd <code>ixdba:x:0:0:root:/root:/bin/bash</code>-&gt; <code>root:x:0:0:root:/root:/bin/bash</code></p><h1 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h1><p>root 用户被改成其他名称，如本例中的 ixdba。</p><p>服务在启动过程中，需要 root 用户名及 root 组来授权（root，root），修改后，服务找不到 root 用户，无法得到授权，所以很多服务系统无法启动。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>将 root用户名称改回 root，避免修改 root 用户名。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系统资源 ulimit 设置不正确导致无法登录</title>
    <link href="/2019/07/15/linux_ulimit_bad/"/>
    <url>/2019/07/15/linux_ulimit_bad/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h2 id="本地及远程-ssh-无法登录"><a href="#本地及远程-ssh-无法登录" class="headerlink" title="本地及远程 ssh 无法登录"></a>本地及远程 ssh 无法登录</h2><p>ssh登录有显示 last login，但是会闪断，重连。</p><p>本地登录为一直重复输入用户名密码。</p><a id="more"></a><h1 id="告警信息"><a href="#告警信息" class="headerlink" title="告警信息"></a>告警信息</h1><p>进入单用户模式，查看登录日志 <code>tail -f /var/log/secure</code></p><p><img src="/img/linux_ulimit_bad/linux_ulimit_bad_1.jpg"></p><p>关键信息</p><p>error: PAM: pam_open_session(): Permission denied</p><p>pam_limits(sshd:session): Could not set limit for ‘nofile’: Operation not permitted</p><h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><p>查看 ulimit 配置是否异常：<code>ulimit -a</code></p><pre><code class="hljs gradle">[user@localhost~]# cat <span class="hljs-regexp">/etc/</span>security/limits.conf |<span class="hljs-keyword">grep</span> -v <span class="hljs-string">&quot;#&quot;</span></code></pre><p>查看 ulimit 配置<code> /etc/security/limits.conf</code> <code>/etc/security/limits.d/*.conf</code></p><pre><code class="hljs yaml">[<span class="hljs-string">user@localhost~</span>]<span class="hljs-comment"># cat /etc/security/limits.d/20-nproc.conf </span><span class="hljs-comment"># Default limit for number of user&#x27;s processes to prevent</span><span class="hljs-comment"># accidental fork bombs.</span><span class="hljs-comment"># See rhbz #432903 for reasoning.</span><span class="hljs-string">*</span>          <span class="hljs-string">soft</span>    <span class="hljs-string">nproc</span>     <span class="hljs-number">4096</span><span class="hljs-string">root</span>       <span class="hljs-string">soft</span>    <span class="hljs-string">nproc</span>     <span class="hljs-string">unlimited</span><span class="hljs-string">*</span>          <span class="hljs-string">soft</span>    <span class="hljs-string">nofile</span>    <span class="hljs-number">65536000</span><span class="hljs-string">*</span>          <span class="hljs-string">hard</span>    <span class="hljs-string">nofile</span>    <span class="hljs-number">65536000</span></code></pre><p>将 nofile 数值改小到 65536</p><h1 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h1><p>nofile 数值设置太大导致溢出，无权限设置过大  Could not set limit for ‘nofile’: Operation not permitted</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>无法登录情况，需要进入单用户模式查看系统配置是否正确：<br>如：/root/.bash_profile<br>本例中，设置资源配置文件 <code> /etc/security/limits.conf</code> <code>/etc/security/limits.d/*.conf</code> nofile 设置过大溢出，导致系统无法分配 open files 权限，无法登陆。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MegaRAID卡无法清除VD ( Discard Cache) 创建raid</title>
    <link href="/2019/06/21/MegaRAID_not_clear_raid/"/>
    <url>/2019/06/21/MegaRAID_not_clear_raid/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h2 id="1-开机提示VD丢失"><a href="#1-开机提示VD丢失" class="headerlink" title="1.开机提示VD丢失"></a>1.开机提示VD丢失</h2><p><img src="/img/megaraid/VD_lost_1.png"></p><h2 id="2-点击discard-cache无效，无法清除VD，点清除后还是提示有丢失的vd"><a href="#2-点击discard-cache无效，无法清除VD，点清除后还是提示有丢失的vd" class="headerlink" title="2.点击discard cache无效，无法清除VD，点清除后还是提示有丢失的vd"></a>2.点击discard cache无效，无法清除VD，点清除后还是提示有丢失的vd</h2><p><img src="/img/megaraid/VD_lost_2.png"><img src="/img/megaraid/VD_lost_3.png"></p><a id="more"></a><h2 id="3-创建raid报错，无法正常创建raid配置"><a href="#3-创建raid报错，无法正常创建raid配置" class="headerlink" title="3.创建raid报错，无法正常创建raid配置"></a>3.创建raid报错，无法正常创建raid配置</h2><p><img src="/img/megaraid/VD_lost_4.png"></p><h1 id="告警信息"><a href="#告警信息" class="headerlink" title="告警信息"></a>告警信息</h1><p>you cannot perform that operation because the contronller has preserved cache.you must either discard the preserved cache by going to the manage preserved cache operation or import the virtual drives that have preserved cache</p><h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><p>硬核处理过程：<br>服务器下电，把阵列卡电池拔出放电</p><p>或者<br>1、下载tookit工具引导进去tookit命令行</p><p>linux: ~ #./storcli64 -help | grep -i preserved<br>storcli /cx show preservedcache<br>storcli /cx/vx delete preservedcache[force]</p><p>1../storcli64 /c0 show preservedcache</p><p>可以看到是哪个VD有preservedcache</p><p>2.根据上面的命令查到的VD编号，例如VD：0，执行：</p><p>./storcli64 /c0/v0 delete preservedcache force</p><p>清除完成后到raid卡的webbios里把boot error handling恢复原来的设置</p><h1 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h1><p>RAID卡Cache中存在数据，重启服务器或者更换硬盘后，Cache中的数据无法写到硬盘中，导致出现上述问题。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>Cache 数据的保护，一般都依赖于镜像与电池 ( 或者是 UPS)，要是discard cache无效，可以试着拔出阵列卡电池试试。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unexpected inconsistency run fsck 处理报告</title>
    <link href="/2018/10/20/Linux_RUN_fsck/"/>
    <url>/2018/10/20/Linux_RUN_fsck/</url>
    
    <content type="html"><![CDATA[<h1 id="1、故障摘要"><a href="#1、故障摘要" class="headerlink" title="1、故障摘要"></a>1、故障摘要</h1><p>机器意外宕机重启，出现报错，无法进入系统，如图</p><p><img src="/img/linux_fsck/Linux_1.png"></p><h1 id="2、故障具体情况"><a href="#2、故障具体情况" class="headerlink" title="2、故障具体情况"></a>2、故障具体情况</h1><p>提示按CTRL+D继续，按了CTRL+D会重启，再次回到这个界面。<br><img src="/img/linux_fsck/Linux_2.png"></p><pre><code>Give root passwd for maintenance</code></pre><p>根据提示输入密码进行维护。</p><h1 id="3、故障分析及处理"><a href="#3、故障分析及处理" class="headerlink" title="3、故障分析及处理"></a>3、故障分析及处理</h1><p>正确输入密码后，进入到维护模式。<br><img src="/img/linux_fsck/Linux_3.png"><br>在修复模式下，键入命令<code>fsck –y</code>（后面可加其报错目录，每个报错目录都不相同）<br><img src="/img/linux_fsck/Linux_4.png"><br>输入后，系统会检测修复硬盘，检测修复时间根据硬盘里数据多少而定，最后检测完毕。输入reboot重启。<br>一般情况下重启完毕就可以进入登陆界面。</p><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><p>fsck的命令的几个使用方法</p><p>指令：fsck</p><p>使用权限 : 超级使用者</p><p>使用方式 : fsck [-sACVRP] [-t fstype] [–] [fsck-options] filesys […]</p><p>说明 ： 检查与修复 Linux 档案系统，可以同时检查一个或多个 Linux 档案系统</p><p>参数 ：</p><p>filesys ： device 名称(eg./dev/sda1)，mount 点 (eg. / 或 /usr)</p><p>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</p><p>-s : 依序一个一个地执行 fsck 的指令来检查</p><p>-A : 对/etc/fstab 中所有列出来的 partition 做检查</p><p>-C : 显示完整的检查进度</p><p>-d : 列印 e2fsck 的 debug 结果</p><p>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</p><p>-R : 同时有 -A 条件时，省略 / 不检查</p><p>-V : 详细显示模式</p><p>-a : 如果检查有错则自动修复</p><p>-r : 如果检查有错则由使用者回答是否修复</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Cookbook Note</title>
    <link href="/2018/02/26/python_cookbook_note/"/>
    <url>/2018/02/26/python_cookbook_note/</url>
    
    <content type="html"><![CDATA[<h1 id="1、数据结构和算法"><a href="#1、数据结构和算法" class="headerlink" title="1、数据结构和算法"></a>1、数据结构和算法</h1><h2 id="1-1-将不用的变量使用任意变量名去占位，然后丢弃，取其想要的部分"><a href="#1-1-将不用的变量使用任意变量名去占位，然后丢弃，取其想要的部分" class="headerlink" title="1.1 将不用的变量使用任意变量名去占位，然后丢弃，取其想要的部分"></a>1.1 将不用的变量使用任意变量名去占位，然后丢弃，取其想要的部分</h2><pre><code class="hljs python">data = [<span class="hljs-string">&#x27;ACME&#x27;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">91.1</span>,(<span class="hljs-number">2018</span>, <span class="hljs-number">2</span>, <span class="hljs-number">26</span>)]_,shares,price,_ = dataprint(shares)&gt;&gt;&gt;<span class="hljs-number">50</span></code></pre><h2 id="1-2-星号解压语法在字符串操作"><a href="#1-2-星号解压语法在字符串操作" class="headerlink" title="1.2 星号解压语法在字符串操作"></a>1.2 星号解压语法在字符串操作</h2><pre><code class="hljs python">line = <span class="hljs-string">&#x27;nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false&#x27;</span>uname,*fields,homedir,sh = line.split(<span class="hljs-string">&#x27;:&#x27;</span>)                         print(uname)                                                       print(homedir)    &gt;&gt;&gt;nobody&gt;&gt;&gt;/var/empty</code></pre><h2 id="1-3-当要解压一写元素后丢弃它们，不能使用-的时候，可以使用普通废弃名称，比如-或ign-ignore"><a href="#1-3-当要解压一写元素后丢弃它们，不能使用-的时候，可以使用普通废弃名称，比如-或ign-ignore" class="headerlink" title="1.3 当要解压一写元素后丢弃它们，不能使用*的时候，可以使用普通废弃名称，比如_或ign(ignore)"></a>1.3 当要解压一写元素后丢弃它们，不能使用*的时候，可以使用普通废弃名称，比如_或ign(ignore)</h2><pre><code class="hljs python">c = [(<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">2018</span>),<span class="hljs-string">&#x27;星期一&#x27;</span>,<span class="hljs-string">&#x27;晴&#x27;</span>]   (_,_,d),e,f = c               print(d)                      <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2018</span></code></pre><h2 id="1-4-使用heapq模块来查找最大或最小的N个元素列表"><a href="#1-4-使用heapq模块来查找最大或最小的N个元素列表" class="headerlink" title="1.4 使用heapq模块来查找最大或最小的N个元素列表"></a>1.4 使用heapq模块来查找最大或最小的N个元素列表</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> heapq                         nums = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">21</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">63</span>,<span class="hljs-number">-14</span>]   <span class="hljs-comment">#打印出最大或最小的3个元素 </span>print(heapq.nlargest(<span class="hljs-number">3</span>,nums))        print(heapq.nsmallest(<span class="hljs-number">3</span>,nums))&gt;&gt;&gt;[<span class="hljs-number">63</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>]&gt;&gt;&gt;[<span class="hljs-number">-14</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>]</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么写出一手漂亮的代码-转载（菜鸟学Python）</title>
    <link href="/2018/02/08/How_to_code_Python/"/>
    <url>/2018/02/08/How_to_code_Python/</url>
    
    <content type="html"><![CDATA[<blockquote><p>菜鸟学Python的第138篇原创文章</p></blockquote><h1 id="1-打印index"><a href="#1-打印index" class="headerlink" title="1.打印index"></a>1.打印index</h1><p>对于一个列表，或者说一个序列我们经常需要打印它的index,一般传统的做法或者说比较low的写法：</p><pre><code class="hljs python"><span class="hljs-comment"># Bad way</span>cities = [<span class="hljs-string">&#x27;Shanghai&#x27;</span>,<span class="hljs-string">&#x27;Beijing&#x27;</span>,<span class="hljs-string">&#x27;Shenzhen&#x27;</span>,<span class="hljs-string">&#x27;Chengdu&#x27;</span>]i = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cities:    print(i + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;--&gt;&#x27;</span>,c)    i += <span class="hljs-number">1</span>&gt;&gt;&gt;1 --&gt; Shanghai2 --&gt; Beijing3 --&gt; Shenzhen4 --&gt; Chengdu</code></pre><p>优雅写法是多用<strong>enumerate</strong></p><pre><code class="hljs python"><span class="hljs-comment"># Good way</span><span class="hljs-keyword">for</span> i ,city <span class="hljs-keyword">in</span> enumerate(cities):    print(i + <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,city)&gt;&gt;&gt;1 --&gt; Shanghai2 --&gt; Beijing3 --&gt; Shenzhen4 --&gt; Chengdu</code></pre><h2 id="Python内置enumerate-函数"><a href="#Python内置enumerate-函数" class="headerlink" title="Python内置enumerate()函数"></a>Python内置enumerate()函数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>enumerate(sequence, [start=0])</code></p><ul><li>sequence – 一个序列、迭代器或其他支持迭代对象。</li><li>start – 下标起始位置。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 enumerate(枚举) 对象。</p><h1 id="2-两个序列的循环"><a href="#2-两个序列的循环" class="headerlink" title="2.两个序列的循环"></a>2.两个序列的循环</h1><p>我们会经常对两个序列进行计算或者处理，比较low的方法是用下标去循环处理：</p><pre><code class="hljs python">names = [<span class="hljs-string">&#x27;leo&#x27;</span>,<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-string">&#x27;james&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;yellow&#x27;</span>]<span class="hljs-comment"># Bad way</span>n = min(len(names),len(colors))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):    print(names[i],<span class="hljs-string">&#x27;--&gt;&#x27;</span>,colors[i])&gt;&gt;&gt;leo --&gt; redjack --&gt; greenjohn --&gt; bluejames --&gt; yellow</code></pre><p>更优雅一点的方法:用<strong>zip</strong>轻松搞定:</p><pre><code class="hljs python">names = [<span class="hljs-string">&#x27;leo&#x27;</span>,<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-string">&#x27;james&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;yellow&#x27;</span>]<span class="hljs-comment"># Good way</span><span class="hljs-keyword">for</span> name ,color <span class="hljs-keyword">in</span> zip(names,colors):    print(name,<span class="hljs-string">&#x27;--&gt;&#x27;</span>,color)&gt;&gt;&gt;leo --&gt; redjack --&gt; greenjohn --&gt; bluejames --&gt; yellow</code></pre><h1 id="3-变换变量"><a href="#3-变换变量" class="headerlink" title="3.变换变量"></a>3.变换变量</h1><p>多个变量之间的交换，相信很多有c,c++语言基础的同学对这个再熟悉不过了，比如我们经典的冒泡排序，就会用这一招，看看比较传统的做法先:</p><pre><code class="hljs python">x = <span class="hljs-number">1</span>y = <span class="hljs-number">2</span><span class="hljs-comment"># Bad way</span>print(<span class="hljs-string">&#x27;&gt;&gt;Before:x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.format(x,y))tmp = yy = xx = tmpprint(<span class="hljs-string">&#x27;&gt;&gt;After:x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.format(x,y))&gt;&gt;&gt;&gt;&gt;Before:x=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>&gt;&gt;After:x=<span class="hljs-number">2</span>,y=<span class="hljs-number">1</span></code></pre><p>更优雅的做法是：</p><pre><code class="hljs python">x = <span class="hljs-number">1</span>y = <span class="hljs-number">2</span><span class="hljs-comment"># Good way</span>print(<span class="hljs-string">&#x27;&gt;&gt;Before:x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.format(x,y))x,y = y,xprint(<span class="hljs-string">&#x27;&gt;&gt;After:x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.format(x,y))&gt;&gt;&gt;&gt;&gt;Before:x=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>&gt;&gt;After:x=<span class="hljs-number">2</span>,y=<span class="hljs-number">1</span></code></pre><h1 id="4-字典的读取"><a href="#4-字典的读取" class="headerlink" title="4.字典的读取"></a>4.字典的读取</h1><p>字典是我们经常使用的数据结构，对于字典的访问和读取，如果我们的读取的字典的key为空怎么办，一般我们需要一个缺省值,菜鸟的写法:</p><pre><code class="hljs python">students=&#123;    <span class="hljs-string">&#x27;LILI&#x27;</span>:<span class="hljs-number">18</span>,    <span class="hljs-string">&#x27;Sam&#x27;</span>:<span class="hljs-number">25</span>&#125;<span class="hljs-comment">#Bad way</span><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Susan&#x27;</span> <span class="hljs-keyword">in</span> students:    student = students[<span class="hljs-string">&#x27;Susan&#x27;</span>]<span class="hljs-keyword">else</span>:    student=<span class="hljs-string">&#x27;unknow&#x27;</span>print(<span class="hljs-string">&#x27;Susan is &#123;&#125; years old&#x27;</span>.format(student))&gt;&gt;&gt;Susan <span class="hljs-keyword">is</span> unknow years old</code></pre><p>比较优雅的做法是:</p><pre><code class="hljs python">students=&#123;    <span class="hljs-string">&#x27;LILI&#x27;</span>:<span class="hljs-number">18</span>,    <span class="hljs-string">&#x27;Sam&#x27;</span>:<span class="hljs-number">25</span>&#125;<span class="hljs-comment"># Good way</span>student = students.get(<span class="hljs-string">&#x27;Susan&#x27;</span>,<span class="hljs-string">&#x27;unknow&#x27;</span>)print(<span class="hljs-string">&#x27;Susan is &#123;&#125; years old&#x27;</span>.format(student))</code></pre><p>巧妙的利用了字典get的用法，如果字典里面没有Susan这个key,则用unknow来表示缺省值！</p><h1 id="5-文件读取查找"><a href="#5-文件读取查找" class="headerlink" title="5.文件读取查找"></a>5.文件读取查找</h1><p>通常来说，我们要打开一个文件，然后对文件的内容进行循环读取和处理，菜鸟的写法如下：</p><pre><code class="hljs python"><span class="hljs-comment">#Bad way</span>f = open(<span class="hljs-string">&#x27;data.txt&#x27;</span>)<span class="hljs-keyword">try</span>:    text = f.read()    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> text.split(<span class="hljs-string">&#x27;\n&#x27;</span>):        print(line)<span class="hljs-keyword">finally</span>:    f.close()</code></pre><p>更优雅的写法：</p><pre><code class="hljs python"><span class="hljs-comment">#Good way</span><span class="hljs-keyword">with</span> open(<span class="hljs-string">&#x27;data.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:        print(line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>))</code></pre><h1 id="6-循环查找"><a href="#6-循环查找" class="headerlink" title="6.循环查找"></a>6.循环查找</h1><p>我们经常会在一个大的循环中作搜索业务，比如从一个文件中搜索关键字，比如从文件名列表中查找一些特殊的文件名，想当然的写法如下：</p><pre><code class="hljs python">target_letter = <span class="hljs-string">&#x27;d&#x27;</span>letters = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<span class="hljs-comment">#Bad way</span>found = <span class="hljs-literal">False</span><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> letters:    <span class="hljs-keyword">if</span> letter == target_letter:        print(<span class="hljs-string">&#x27;Found&#x27;</span>)        found = <span class="hljs-literal">True</span>        <span class="hljs-keyword">break</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:    print(<span class="hljs-string">&#x27;Not found&#x27;</span>)&gt;&gt;&gt;Not found</code></pre><p>更优雅的写法：</p><pre><code class="hljs python">target_letter = <span class="hljs-string">&#x27;d&#x27;</span>letters = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<span class="hljs-comment">#Good way</span><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> letters:    <span class="hljs-keyword">if</span> letter == target_letter:        print(<span class="hljs-string">&#x27;Found&#x27;</span>)        <span class="hljs-keyword">break</span><span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&#x27;Not found&#x27;</span>)&gt;&gt;&gt;Not found</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python操作MySQL数据库</title>
    <link href="/2018/01/25/Python_MySQL/"/>
    <url>/2018/01/25/Python_MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="Python3连接MySQL数据库"><a href="#Python3连接MySQL数据库" class="headerlink" title="Python3连接MySQL数据库"></a>Python3连接MySQL数据库</h1><p>使用Python3的<strong>PyMySQL</strong>库连接MySQL数据库，实现简单的增删改查。</p><h2 id="PyMySQL"><a href="#PyMySQL" class="headerlink" title="PyMySQL"></a>PyMySQL</h2><p>PyMySQL是在Python3中用于连接MySQL服务器的一个库。（Python2使用的是mysqldb。）</p><h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p><strong>实例：</strong>连接test数据库</p><pre><code class="hljs javascript">#encoding=utf-8<span class="hljs-keyword">import</span> pymysql# 打开数据库连接&quot;localhost&quot;:本地服务器,&quot;root&quot;:用户名,&quot;666666&quot;:密码,&quot;test&quot;:数据库名db = pymysql.connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>)# 使用 cursor() 方法创建一个游标对象 cursorcursor = db.cursor()# 使用 execute()  方法执行 SQL 查询cursor.execute(<span class="hljs-string">&quot;SELECT VERSION()&quot;</span>)# 使用 fetchone() 方法获取单条数据.data = cursor.fetchone()print(<span class="hljs-string">&quot;Database version: %s &quot;</span> %data)# 关闭数据库db.close()</code></pre><p>输出的结果为：<code>Database version: 5.6.39 </code></p><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p><strong>实例：</strong>用**execute()**方法来为数据库创建表</p><pre><code class="hljs javascript"># encoding=utf-8<span class="hljs-keyword">import</span> pymysql# 打开数据库连接&quot;localhost&quot;:本地服务器,&quot;root&quot;:用户名,&quot;666666&quot;:密码,&quot;test&quot;:数据库名db = pymysql.connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>)# 使用 cursor() 方法创建一个游标对象 cursorcursor = db.cursor()# 使用 execute() 方法执行 SQL，如果表存在则删除cursor.execute(<span class="hljs-string">&quot;DROP TABLE IF EXISTS testPyMySQL_tbl&quot;</span>)sql = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;CREATE TABLE testPyMySQL_tbl(</span><span class="hljs-string">         FIRST_NAME  CHAR(20) NOT NULL,</span><span class="hljs-string">         LAST_NAME  CHAR(20),</span><span class="hljs-string">         AGE INT,  </span><span class="hljs-string">         SEX CHAR(1),</span><span class="hljs-string">         INCOME FLOAT)&quot;</span><span class="hljs-string">&quot;&quot;</span>cursor.execute(sql)# 关闭数据库连接db.close()</code></pre><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p><strong>实例：</strong>向数据表testPyMySQL_tbl插入数据：</p><pre><code class="hljs javascript">#!<span class="hljs-regexp">/usr/</span>bin/python3#encoding=utf-8#使用执行 SQL INSERT 语句向表 testPyMySQL_tbl 插入记录：<span class="hljs-keyword">import</span> pymysql# 打开数据库连接db = pymysql.connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;test&quot;</span> )# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 插入语句sql = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;INSERT INTO testPyMySQL_tbl(FIRST_NAME,</span><span class="hljs-string">         LAST_NAME, AGE, SEX, INCOME)</span><span class="hljs-string">         VALUES (&#x27;SAO&#x27;, &#x27;A&#x27;, 25, &#x27;M&#x27;, 10000)&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">try</span>:   # 执行sql语句   cursor.execute(sql)   # 提交到数据库执行   db.commit()except:   # 如果发生错误则回滚   db.rollback()# 关闭数据库连接db.close()</code></pre><h2 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h2><p>Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。</p><ul><li><strong>fetchone()</strong>: 该方法获取下一个查询结果集。结果集是一个对象</li><li><strong>fetchall()</strong>: 接收全部的返回结果行.</li><li><strong>rowcount</strong>: 这是一个只读属性，并返回执行execute()方法后影响的行数。</li></ul><p><strong>实例：</strong>查询testPyMySQL_tbl表中工资大于1000的所有数据：</p><pre><code class="hljs javascript">mysql&gt; SELECT * FROM testPyMySQL_tbl;+------------+-----------+------+------+--------+| FIRST_NAME | LAST_NAME | AGE  | SEX  | INCOME |+------------+-----------+------+------+--------+| SAO        | A         |   <span class="hljs-number">25</span> | M    |  <span class="hljs-number">10000</span> || SAO        | B         |   <span class="hljs-number">25</span> | M    |  <span class="hljs-number">10000</span> || SAO        | C         |   <span class="hljs-number">25</span> | M    |  <span class="hljs-number">10000</span> || SAO        | D         |   <span class="hljs-number">25</span> | M    |  <span class="hljs-number">10000</span> || SAO        | F         |   <span class="hljs-number">25</span> | M    |    <span class="hljs-number">500</span> || SAO        | G         |   <span class="hljs-number">25</span> | M    |   <span class="hljs-number">1000</span> || SAO        | H         |   <span class="hljs-number">25</span> | M    |   <span class="hljs-number">1100</span> |+------------+-----------+------+------+--------+<span class="hljs-number">7</span> rows <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.00</span> sec)# encoding=utf-8<span class="hljs-keyword">import</span> pymysql# 打开数据库连接db = pymysql.connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;test&quot;</span> )# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 查询语句sql = <span class="hljs-string">&quot;SELECT * FROM testPyMySQL_tbl \</span><span class="hljs-string">       WHERE INCOME &gt; &#x27;%d&#x27;&quot;</span> % (<span class="hljs-number">1000</span>)<span class="hljs-keyword">try</span>:   # 执行SQL语句   cursor.execute(sql)   # 获取所有记录列表   results = cursor.fetchall()   <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results:      fname = row[<span class="hljs-number">0</span>]      lname = row[<span class="hljs-number">1</span>]      age = row[<span class="hljs-number">2</span>]      sex = row[<span class="hljs-number">3</span>]      income = row[<span class="hljs-number">4</span>]       # 打印结果      print (<span class="hljs-string">&quot;fname=%s,lname=%s,age=%d,sex=%s,income=%d&quot;</span> % \             (fname, lname, age, sex, income ))except:   print (<span class="hljs-string">&quot;Error: unable to fetch data&quot;</span>)# 关闭数据库连接db.close()</code></pre><p>结果：<br>fname=SAO,lname=A,age=25,sex=M,income=10000<br>fname=SAO,lname=B,age=25,sex=M,income=10000<br>fname=SAO,lname=C,age=25,sex=M,income=10000<br>fname=SAO,lname=D,age=25,sex=M,income=10000<br>fname=SAO,lname=H,age=25,sex=M,income=1100</p><h2 id="数据库更新操作"><a href="#数据库更新操作" class="headerlink" title="数据库更新操作"></a>数据库更新操作</h2><p><strong>实例：</strong>#更新操作用于更新数据表的的数据，以下实例将 testPyMySQL_tbl表中的 SEX 为 ‘M’的AGE 字段递增1：</p><pre><code class="hljs javascript">#encoding=utf-8<span class="hljs-keyword">import</span> pymysql# 打开数据库连接db = pymysql.connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;test&quot;</span> )# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 更新语句sql = <span class="hljs-string">&quot;UPDATE testPyMySQL_tbl SET AGE = AGE + 1 WHERE SEX = &#x27;%c&#x27;&quot;</span> % (<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-keyword">try</span>:   # 执行SQL语句   cursor.execute(sql)   # 提交到数据库执行   db.commit()except:   # 发生错误时回滚   db.rollback()# 关闭数据库连接db.close()</code></pre><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>删除表中的数值<br><strong>实例：</strong>删除表中AGE小于18的所有数据：</p><pre><code class="hljs javascript">mysql&gt; SELECT * FROM testPyMySQL_tbl;+------------+-----------+------+------+--------+| FIRST_NAME | LAST_NAME | AGE  | SEX  | INCOME |+------------+-----------+------+------+--------+| SAO        | A         |   <span class="hljs-number">16</span> | M    |  <span class="hljs-number">10000</span> || SAO        | B         |   <span class="hljs-number">27</span> | M    |  <span class="hljs-number">10000</span> || SAO        | C         |   <span class="hljs-number">18</span> | M    |  <span class="hljs-number">10000</span> || SAO        | D         |   <span class="hljs-number">15</span> | M    |  <span class="hljs-number">10000</span> || SAO        | F         |   <span class="hljs-number">27</span> | M    |    <span class="hljs-number">500</span> || SAO        | G         |   <span class="hljs-number">27</span> | M    |   <span class="hljs-number">1000</span> || SAO        | H         |   <span class="hljs-number">17</span> | M    |   <span class="hljs-number">1100</span> |+------------+-----------+------+------+--------+<span class="hljs-number">7</span> rows <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.00</span> sec)# encoding=utf-8<span class="hljs-keyword">import</span> pymysql# 打开数据库连接db = pymysql.connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;test&quot;</span> )# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 删除语句sql = <span class="hljs-string">&quot;DELETE FROM testPyMySQL_tbl WHERE AGE &lt; &#x27;%d&#x27;&quot;</span> % (<span class="hljs-number">18</span>)<span class="hljs-keyword">try</span>:   # 执行SQL语句   cursor.execute(sql)   # 提交修改   db.commit()except:   # 发生错误时回滚   db.rollback()# 关闭连接db.close()mysql&gt; SELECT * FROM testPyMySQL_tbl;+------------+-----------+------+------+--------+| FIRST_NAME | LAST_NAME | AGE  | SEX  | INCOME |+------------+-----------+------+------+--------+| SAO        | B         |   <span class="hljs-number">27</span> | M    |  <span class="hljs-number">10000</span> || SAO        | C         |   <span class="hljs-number">18</span> | M    |  <span class="hljs-number">10000</span> || SAO        | F         |   <span class="hljs-number">27</span> | M    |    <span class="hljs-number">500</span> || SAO        | G         |   <span class="hljs-number">27</span> | M    |   <span class="hljs-number">1000</span> |+------------+-----------+------+------+--------+<span class="hljs-number">4</span> rows <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.00</span> sec)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL从入门到删库跑路</title>
    <link href="/2018/01/19/MySQL/"/>
    <url>/2018/01/19/MySQL/</url>
    
    <content type="html"><![CDATA[<p>Mysql是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><a id="more"></a><h1 id="一、什么是数据库？"><a href="#一、什么是数据库？" class="headerlink" title="一、什么是数据库？"></a>一、什么是数据库？</h1><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理的大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。<br>RDBMS即关系数据库管理系统(Relational Database Management System)的特点：</p><ul><li>1.数据以表格的形式出现</li><li>2.每行为各种记录名称</li><li>3.每列为记录名称所对应的数据域</li><li>4.许多的行和列组成一张表单</li><li>5.若干的表单组成database</li></ul><h1 id="二、RDBMS-术语"><a href="#二、RDBMS-术语" class="headerlink" title="二、RDBMS 术语"></a>二、RDBMS 术语</h1><ul><li>数据库: 数据库是一些关联表的集合。.</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h1 id="三、使用MySQL-Client执行简单的SQL命令"><a href="#三、使用MySQL-Client执行简单的SQL命令" class="headerlink" title="三、使用MySQL Client执行简单的SQL命令"></a>三、使用MySQL Client执行简单的SQL命令</h1><p>连接到MySQL服务器上，在MAC上，可以先到<strong>系统偏好设置</strong>里将MySQL服务打开：<br><img src="/img/mysql/start_MySQL.png"><br><img src="/img/mysql/start_MySQL2.png"></p><p>在终端输入命令：</p><pre><code class="hljs sql">ecarry:~ ecarry$ mysql -u root -p</code></pre><blockquote><p>其中 -u为用户，后面紧跟root，意为以root账户登录， -p为密码</p></blockquote><pre><code class="hljs sql">ecarry:~ ecarry$ mysql -u root -pEnter password: mysql&gt;</code></pre><h1 id="四、更改密码"><a href="#四、更改密码" class="headerlink" title="四、更改密码"></a>四、更改密码</h1><p>老版本的MySQL安装成功后，默认的root用户和密码为空，可以使用命令来创建root用户和密码：</p><blockquote><p>我使用MySQL的版本是5.6.39，可以用<code>mysql --version</code>命令来查看当前版本</p></blockquote><pre><code class="hljs sql">ecarry:~ ecarry$ mysql <span class="hljs-comment">--version</span>mysql  Ver 14.14 Distrib 5.6.39, for macos10.13 (x86_64) using  EditLine wrapper</code></pre><p>使用<code>mysqladmin -u root password &quot;new_password&quot;</code>来更改密码:</p><pre><code class="hljs sql">ecarry:~ ecarry$ mysqladmin -u root password new_password</code></pre><h1 id="五、基本操作"><a href="#五、基本操作" class="headerlink" title="五、基本操作"></a>五、基本操作</h1><h2 id="5-1-MySQL用户设置"><a href="#5-1-MySQL用户设置" class="headerlink" title="5.1 MySQL用户设置"></a>5.1 MySQL用户设置</h2><p>添加MySQL用户，在mysql数据库中的user表添加新用户即可。<br>下面实例将添加用户名为guest，密码为guest123，权限可进行<strong>SELECT</strong>,<strong>INSERT</strong>和<strong>UPDATE</strong>操作权限：</p><pre><code class="hljs sql">mysql&gt; use mysql;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup <span class="hljs-keyword">with</span> -A<span class="hljs-keyword">Database</span> <span class="hljs-keyword">changed</span>mysql&gt; <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span>    -&gt; (host,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span>,    -&gt; select_priv,insert_priv,update_priv)    -&gt; <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;guest&#x27;</span>,    -&gt; <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;guest123&#x27;</span>),<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>);Query OK, 1 row affected, 3 warnings (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SELECT host,user,password FROM user WHERE user = &#x27;guest&#x27;;+<span class="hljs-comment">-----------+-------+-------------------------------------------+</span>| host      | user  | password                                  |+<span class="hljs-comment">-----------+-------+-------------------------------------------+</span>| localhost | guest | *F1573429579994EEA4459170FDAC55DF96C4BBE6 |+<span class="hljs-comment">-----------+-------+-------------------------------------------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>在添加用户时，请注意使用MySQL提供的PASSWORD()函数来对密码进行加密，可以在后面看到密码为：*F1573429579994EEA4459170FDAC55DF96C4BBE6</p><p><strong>注意：</strong>在MySQL5.7中user表的password换成了authentication_string。<br><strong>注意：</strong><code>FLUSH PRIVILEGES</code>语句，这个命令执行后会重新载入授权表。不使用这个命令，将无法使用新创建的用户来连接MySQL服务器，除非重启MySQL服务器。<br>在创建用户时，可以给用户指定权限，在对应权限列中，在插入语句中设置为’Y’即可。</p><p><strong>用户权限表：</strong></p><ul><li>SELECT_PRIV：选择数据</li><li>INSERT_PRIV：插入数据</li><li>UPDATE_PRIV：修改现有数据</li><li>DELETE_PRIV：删除现有数据</li><li>CREATE_PRIV：创建新的数据库和表</li><li>DROP_PRIV：删除现有数据库和表</li><li>RELOAD_PRIV：执行刷新和重新加载MySQL所用各种内部缓存的特定命令，包括日志，权限，主机，查询和表</li><li>SHUTDOWN_PRIV：关闭MySQL服务器</li><li>PROCESS_PRIV：可以通过SHOW PROCESSLIST命令查看其它用户的进程</li><li>FILE_PRIV：执行SELECT INTO OUTFILE 和LOADDATA INFILE命令</li><li>GRANT_PRIV：将已经授予给该用户自己的权限再授予其它用户。</li><li>REFERENCES_PRIV</li><li>INDEX_PRIV：创建和删除表索引</li><li>ALTER_PRIV：重命名和修改表结构</li></ul><h3 id="5-1-1-管理MySQL的命令"><a href="#5-1-1-管理MySQL的命令" class="headerlink" title="5.1.1 管理MySQL的命令"></a>5.1.1 管理MySQL的命令</h3><p> <strong>SHOW DATABASES</strong><br>列出MySQL数据库管理系统的数据库列表：</p><pre><code class="hljs sql">mysql&gt; SHOW DATABASES;+<span class="hljs-comment">--------------------+</span>| Database           |+<span class="hljs-comment">--------------------+</span>| information_schema || test               |+<span class="hljs-comment">--------------------+</span>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p> <strong>USE 数据库名</strong><br>选择要操作的MySQL数据库，使用这命令后所有mysql命令都只针对该数据库。</p><pre><code class="hljs sql">mysql&gt; USE test;Database changed</code></pre><p> <strong>SHOW TABLES</strong><br>显示指定数据库的所有表，使用该命令前需要使用USE命令来选择要操作的数据库。</p><pre><code class="hljs sql">mysql&gt; USE mysql;Database changedmysql&gt; SHOW TABLES;+<span class="hljs-comment">---------------------------+</span>| Tables_in_mysql           |+<span class="hljs-comment">---------------------------+</span>| columns_priv              || db                        || event                     || time_zone_transition_type || user                      |+<span class="hljs-comment">---------------------------+</span>28 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p> <strong>SHOW COLUMNS FROM 数据表</strong><br>显示数据表的属性，属性类型，主键信息，是否为NULL，默认值等 其他信息。</p><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM user;+<span class="hljs-comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span>| Field                  | Type                              | Null | Key | Default               | Extra |+<span class="hljs-comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span>| Host                   | char(60)                          | NO   | PRI |                       |       || User                   | char(16)                          | NO   | PRI |                       |       || Password               | char(41)                          | NO   |     |                       |       || Select_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       || ssl_type               | enum(&#x27;&#x27;,&#x27;ANY&#x27;,&#x27;X509&#x27;,&#x27;SPECIFIED&#x27;) | NO   |     |                       |       || x509_subject           | blob                              | NO   |     | NULL                  |       || max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       || plugin                 | char(64)                          | YES  |     | mysql_native_password |       || authentication_string  | text                              | YES  |     | NULL                  |       || password_expired       | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |+<span class="hljs-comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span>43 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p> <strong>SHOW INDES FROM 数据表</strong><br>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</p><pre><code class="hljs sql">mysql&gt; SHOW INDEX FROM user;+<span class="hljs-comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | <span class="hljs-keyword">Comment</span> | Index_comment |+<span class="hljs-comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span>| <span class="hljs-keyword">user</span>  |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">1</span> | Host        | A         |        <span class="hljs-literal">NULL</span> |     <span class="hljs-literal">NULL</span> | <span class="hljs-literal">NULL</span>   |      | BTREE      |         |               || <span class="hljs-keyword">user</span>  |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">2</span> | <span class="hljs-keyword">User</span>        | A         |           <span class="hljs-number">7</span> |     <span class="hljs-literal">NULL</span> | <span class="hljs-literal">NULL</span>   |      | BTREE      |         |               |+<span class="hljs-comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><h2 id="5-2-MySQL创建数据库"><a href="#5-2-MySQL创建数据库" class="headerlink" title="5.2 MySQL创建数据库"></a>5.2 MySQL创建数据库</h2><p><strong>使用mysqladmin创建数据库：</strong></p><pre><code class="hljs sql">ecarry:~ ecarry$ mysqladmin -u root -p <span class="hljs-keyword">create</span> <span class="hljs-keyword">test</span>Enter <span class="hljs-keyword">password</span>:</code></pre><h2 id="5-3-MySQL删除数据库"><a href="#5-3-MySQL删除数据库" class="headerlink" title="5.3 MySQL删除数据库"></a>5.3 MySQL删除数据库</h2><p> <strong>使用mysqladmin删除数据库：</strong></p><pre><code class="hljs sql">ecarry:~ ecarry$ mysqladmin -u root -p <span class="hljs-keyword">drop</span> <span class="hljs-keyword">test</span>Enter <span class="hljs-keyword">password</span>:Dropping the <span class="hljs-keyword">database</span> <span class="hljs-keyword">is</span> potentially a very bad thing <span class="hljs-keyword">to</span> do.<span class="hljs-keyword">Any</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">stored</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">database</span> will be destroyed.<span class="hljs-keyword">Do</span> you really want <span class="hljs-keyword">to</span> <span class="hljs-keyword">drop</span> the <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">database</span> [y/N] y<span class="hljs-keyword">Database</span> <span class="hljs-string">&quot;test&quot;</span> dropped</code></pre><h2 id="5-4-MySQL数据类型"><a href="#5-4-MySQL数据类型" class="headerlink" title="5.4 MySQL数据类型"></a>5.4 MySQL数据类型</h2><p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串（字符）类型。</p><p> <strong>数值类型</strong></p><p>MySQL支持所有标准SQL数值数据类型。<br>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。<br>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。<br>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。<br>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th>类型</th><th align="center">大小</th><th align="center">范围（有符号）</th><th align="center">范围（无符号）</th><th align="center">用途</th></tr></thead><tbody><tr><td>TINYINT</td><td align="center">1字节</td><td align="center">(-128，127)</td><td align="center">(0，255)</td><td align="center">小整数值</td></tr><tr><td>SMALLINT</td><td align="center">2字节</td><td align="center">(-32 768，32 767)</td><td align="center">(0，65 535)</td><td align="center">大整数值</td></tr><tr><td>MEDIUMINT</td><td align="center">3字节</td><td align="center">(-8 388 608，8 388 607)</td><td align="center">(0，16 777 215)</td><td align="center">大整数值</td></tr><tr><td>INT或INTEGER</td><td align="center">4字节</td><td align="center">(-2 147 483 648，<br>2 147 483 647)</td><td align="center">(0，4 294 967 295)</td><td align="center">大整数值</td></tr><tr><td>BIGINT</td><td align="center">8字节</td><td align="center">(-9 233 372 036 854 775 808，<br>9 223 372 036 854 775 807)</td><td align="center">(0，18 446 744 073 709 551 615)</td><td align="center">极大整数值</td></tr><tr><td>FLOAT</td><td align="center">4字节</td><td align="center">(-3.402 823 466 E+38，<br>-1.175 494 351 E-38)，0，(1.175 494 351 E-38，<br>3.402 823 466 351 E+38)</td><td align="center">0，(1.175 494 351 E-38，<br>3.402 823 466 E+38)</td><td align="center">单精度/浮点数值</td></tr><tr><td>DOUBLE</td><td align="center">8字节</td><td align="center">(-1.797 693 134 862 315 7 E+308，<br>-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，<br>1.797 693 134 862 315 7 E+308)</td><td align="center">0，(2.225 073 858 507 201 4 E-308，<br>1.797 693 134 862 315 7 E+308)</td><td align="center">双精度/浮点数值</td></tr><tr><td>DECIMAL</td><td align="center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="center">依赖于M和D的值</td><td align="center">依赖于M和D的值</td><td align="center">小数值</td></tr></tbody></table><p> <strong>日期和时间类型</strong></p><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。<br>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。<br>TIMESTAMP类型有专有的自动更新特性。</p><table><thead><tr><th>类型</th><th align="center">大小(字节）</th><th align="center">范围</th><th align="center">格式</th><th align="center">用途</th></tr></thead><tbody><tr><td>DATE</td><td align="center">3</td><td align="center">1000-01-01<br>9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td>TIME</td><td align="center">3</td><td align="center">-838:59:59’/‘838:59:59</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td>YEAR</td><td align="center">1</td><td align="center">1901/2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td>DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00<br>9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD<br>HH:MM:SS</td><td align="center">混合日期和<br>时间值</td></tr><tr><td>TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:00/2038</td><td align="center">YYYYMMDD<br>HHMMSS</td><td align="center">混合日期和时间值<br>时间戳</td></tr></tbody></table><p> <strong>字符串类型</strong></p><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。</p><table><thead><tr><th>类型</th><th align="center">大小(字节）</th><th align="center">用途</th></tr></thead><tbody><tr><td>CHAR</td><td align="center">0-255</td><td align="center">定长字符串</td></tr><tr><td>VARCHAR</td><td align="center">0-65535</td><td align="center">变长字符串</td></tr><tr><td>TINYBLOB</td><td align="center">0-255</td><td align="center">不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td align="center">0-255</td><td align="center">短文本字符串</td></tr><tr><td>BLOB</td><td align="center">0-65 535</td><td align="center">二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td align="center">0-65 535</td><td align="center">长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td align="center">0-16 777 215</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td align="center">0-16 777 215</td><td align="center">中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td align="center">0-4 294 967 295</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td align="center">0-4 294 967 295</td><td align="center">极大文本数据</td></tr></tbody></table><ul><li>CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</li><li>BINARY和VARBINARY类类似于CHAR和VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</li><li>BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</li><li>有4种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT。这些对应4种BLOB类型，有相同的最大长度和存储需求。</li></ul><h2 id="5-5-MySQL创建数据表"><a href="#5-5-MySQL创建数据表" class="headerlink" title="5.5 MySQL创建数据表"></a>5.5 MySQL创建数据表</h2><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><p><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name (column_name column_type);</code></pre><p>下面通过实例在test数据库中创建数据表test_tbl：</p><pre><code class="hljs sql">mysql&gt; USE test;Database changedmysql&gt; SHOW TABLES;Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test_tbl(    -&gt; <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,    -&gt; <span class="hljs-keyword">name</span> <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    -&gt; age <span class="hljs-built_in">int</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    -&gt; sex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    -&gt; submission_date <span class="hljs-built_in">DATE</span>,    -&gt; PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-keyword">id</span>));Query OK, 0 rows affected (0.03 sec)</code></pre><p>创建成功后，可以通过命令来查看表结构：</p><pre><code class="hljs sql">mysql&gt; SHOW TABLES;+<span class="hljs-comment">----------------+</span>| Tables_in_test |+<span class="hljs-comment">----------------+</span>| test_tbl       |+<span class="hljs-comment">----------------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">desc</span> test_tbl;+<span class="hljs-comment">-----------------+----------+------+-----+---------+----------------+</span>| Field           | Type     | Null | Key | Default | Extra          |+<span class="hljs-comment">-----------------+----------+------+-----+---------+----------------+</span>| id              | int(11)  | NO   | PRI | NULL    | auto_increment || name            | char(20) | NO   |     | NULL    |                || age             | int(9)   | NO   |     | NULL    |                || sex             | char(2)  | NO   |     | NULL    |                || submission_date | date     | YES  |     | NULL    |                |+<span class="hljs-comment">-----------------+----------+------+-----+---------+----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-6-MySQL删除数据表"><a href="#5-6-MySQL删除数据表" class="headerlink" title="5.6 MySQL删除数据表"></a>5.6 MySQL删除数据表</h2><p><strong>语法</strong><br><code>DROP TABLE 数据表名</code></p><pre><code class="hljs sql">mysql&gt; USE test;Database changedmysql&gt; SHOW TABLES;+<span class="hljs-comment">----------------+</span>| Tables_in_test |+<span class="hljs-comment">----------------+</span>| test_tbl       |+<span class="hljs-comment">----------------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> test_tbl;Query OK, 0 rows affected (0.8 sec)mysql&gt; SHOW TABLES;Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><h2 id="5-7-MySQL插入数据"><a href="#5-7-MySQL插入数据" class="headerlink" title="5.7 MySQL插入数据"></a>5.7 MySQL插入数据</h2><p>MySQL 表中使用 <strong>INSERT INTO</strong> SQL语句来插入数据。</p><p><strong>实例</strong><br>向test_tbl插入数据：</p><pre><code class="hljs sql">mysql&gt; INSERT INTO test_tbl    -&gt; (name,age,sex,submission_date)    -&gt; VALUES    -&gt; (&quot;pangzi W&quot;,&quot;25&quot;,&quot;M&quot;,NOW());Query OK, 1 row affected, 1 warning (0.00 sec)mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | pangzi W |  25 | M   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><ul><li>没有提供id的数据，因为该字段我们在创建表的时候已经设置它为 AUTO_INCREMENT(自动增加) 属性，该字段会自动递增而不需要我们去设置。</li><li>NOW() 是一个 MySQL 函数，该函数返回日期和时间。</li></ul><h2 id="5-8-MySQL查询数据"><a href="#5-8-MySQL查询数据" class="headerlink" title="5.8 MySQL查询数据"></a>5.8 MySQL查询数据</h2><p>MySQL 数据库使用SQL SELECT语句来查询数据。<br><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name,column_name<span class="hljs-keyword">FROM</span> table_name[<span class="hljs-keyword">WHERE</span> Clause][<span class="hljs-keyword">LIMIT</span> N][ <span class="hljs-keyword">OFFSET</span> M]</code></pre><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li><li>SELECT 命令可以读取一条或者多条记录。</li><li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>你可以使用 WHERE 语句来包含任何条件。</li><li>你可以使用 LIMIT 属性来设定返回的记录数。</li><li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><p><strong>实例</strong><br>返回数据表所有数据：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM bili;+<span class="hljs-comment">----------+----------+---------+--------+----------+--------+--------+</span>| aid      | view     | danmaku | reply  | favorite | coin   | share  |+<span class="hljs-comment">----------+----------+---------+--------+----------+--------+--------+</span>|        0 |        0 |       0 |      0 |        0 |      0 |      0 ||        2 |       -1 |    1866 |   4888 |     1604 |    480 |   1292 ||        7 |  1158359 |   22770 |  23613 |     9991 |   2189 |    538 ||        9 |  1237494 |    5025 |   4858 |    10015 |    994 |    833 ||       11 |   168711 |    2087 |   2499 |     1336 |    165 |     33 ||       12 |   495352 |    1392 |   2501 |     3743 |    357 |    310 ||       16 |   108035 |    1492 |   1144 |      874 |     81 |     36 ||       20 |   157311 |    3833 |   1788 |     3347 |    361 |    104 ||       23 |       -1 |   40371 |   9711 |    29289 |   2570 |   4562 ||       24 |   196740 |    5105 |    855 |     2897 |    296 |    124 ||       25 |    62049 |     931 |    448 |      726 |     56 |     32 ||       26 |    86121 |    2166 |    574 |     1800 |    252 |    124 ||       28 |    54482 |    1474 |    627 |      396 |     49 |     17 ||       31 |    60681 |    1375 |    457 |      306 |     14 |     24 |+<span class="hljs-comment">----------+----------+---------+--------+----------+--------+--------+</span>14 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-9-MySQL-WHERE子句"><a href="#5-9-MySQL-WHERE子句" class="headerlink" title="5.9 MySQL WHERE子句"></a>5.9 MySQL WHERE子句</h2><p>有条件的选取数据，将WHERE子句添加到SELECT语句中。<br><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <span class="hljs-keyword">FROM</span> table_name1, table_name2...[<span class="hljs-keyword">WHERE</span> condition1 [<span class="hljs-keyword">AND</span> [<span class="hljs-keyword">OR</span>]] condition2.....</code></pre><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p><strong>实例</strong><br>搜索数据表中的属性为女性数据：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      ||  5 | li XIAO  |  23 | W   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">FROM</span> test_tbl <span class="hljs-keyword">WHERE</span> sex = <span class="hljs-string">&#x27;W&#x27;</span>;+<span class="hljs-comment">----+---------+-----+-----+-----------------+</span>| id | name    | age | sex | submission_date |+<span class="hljs-comment">----+---------+-----+-----+-----------------+</span>|  5 | li XIAO |  23 | W   | 2018-01-22      ||  6 | nv JI   |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+---------+-----+-----+-----------------+</span>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><h2 id="5-10-MySQL-UPDATE查询"><a href="#5-10-MySQL-UPDATE查询" class="headerlink" title="5.10 MySQL UPDATE查询"></a>5.10 MySQL UPDATE查询</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。.<br><strong>语法</strong></p><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table_name <span class="hljs-keyword">SET</span> field1=<span class="hljs-keyword">new</span>-value1, field2=<span class="hljs-keyword">new</span>-value2[<span class="hljs-keyword">WHERE</span> Clause]</code></pre><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><p><strong>实例</strong></p><p>更新test_tbl数据表id为1的name数据：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      ||  5 | li XIAO  |  23 | W   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">UPDATE</span> test_tbl <span class="hljs-keyword">SET</span> <span class="hljs-keyword">name</span>=<span class="hljs-string">&#x27;nv JI&#x27;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span>;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | nv JI    |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      ||  5 | li XIAO  |  23 | W   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-11-MySQL-DELETE语句"><a href="#5-11-MySQL-DELETE语句" class="headerlink" title="5.11 MySQL DELETE语句"></a>5.11 MySQL DELETE语句</h2><p><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> Clause]</code></pre><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p><strong>实例</strong></p><p>删除test_tbl数据表id=5的数据：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      ||  5 | li XIAO  |  23 | W   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> test_tbl <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">5</span>;Query OK, 1 row affected (0.00 sec)mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-12-MySQL-LIKE子句"><a href="#5-12-MySQL-LIKE子句" class="headerlink" title="5.12 MySQL LIKE子句"></a>5.12 MySQL LIKE子句</h2><p>WHERE 子句中可以使用等号 <code>=</code> 来设定获取数据的条件，如 “url = ‘<a href="http://www.google.com&/#39;&quot;%E3%80%82">www.google.com&#39;&quot;。</a><br>但是有时候我们需要获取 url 字段含有 “com” 字符的所有记录，这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。</p><p><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN <span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> field1 <span class="hljs-keyword">LIKE</span> condition1 [<span class="hljs-keyword">AND</span> [<span class="hljs-keyword">OR</span>]] filed2 = <span class="hljs-string">&#x27;somevalue&#x27;</span></code></pre><ul><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在 WHERE 子句中使用LIKE子句。</li><li>你可以使用LIKE子句代替等号 =。</li><li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li></ul><p><strong>实例</strong><br>查找url数据表中所有含.com的地址：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM url;+<span class="hljs-comment">----+----------------+</span>| id | url_list       |+<span class="hljs-comment">----+----------------+</span>|  1 | www.baidu.com  ||  2 | www.google.com ||  3 | ecarry.cc      ||  4 | weibo.com      ||  5 | www.google.cn  |+<span class="hljs-comment">----+----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">url</span> <span class="hljs-keyword">WHERE</span> url_list <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%com&#x27;</span>;+<span class="hljs-comment">----+----------------+</span>| id | url_list       |+<span class="hljs-comment">----+----------------+</span>|  1 | www.baidu.com  ||  2 | www.google.com ||  4 | weibo.com      |+<span class="hljs-comment">----+----------------+</span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-13-MySQL-UNION操作符"><a href="#5-13-MySQL-UNION操作符" class="headerlink" title="5.13 MySQL UNION操作符"></a>5.13 MySQL UNION操作符</h2><p><strong>描述</strong></p><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><p><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> expression1, expression2, ... expression_n<span class="hljs-keyword">FROM</span> <span class="hljs-keyword">tables</span>[<span class="hljs-keyword">WHERE</span> conditions]<span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span>]<span class="hljs-keyword">SELECT</span> expression1, expression2, ... expression_n<span class="hljs-keyword">FROM</span> <span class="hljs-keyword">tables</span>[<span class="hljs-keyword">WHERE</span> conditions];</code></pre><ul><li><strong>expression1, expression2, … expression_n</strong>: 要检索的列。</li><li><strong>tables</strong>: 要检索的数据表。</li><li><strong>WHERE conditions</strong>: 可选， 检索条件。</li><li><strong>DISTINCT</strong>: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li><strong>ALL</strong>: 可选，返回所有结果集，包含重复数据。</li></ul><p><strong>实例</strong></p><p>下面是选自 “Websites” 表的数据：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM Websites;+<span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span>| id | name         | url                       | alexa | country |+<span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span>| 1  | Google       | https://www.google.cm/    | 1     | USA     || 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      || 3  | 菜鸟教程      | http://www.runoob.com/    | 4689  | CN      || 4  | 微博          | http://weibo.com/         | 20    | CN      || 5  | Facebook     | https://www.facebook.com/ | 3     | USA     || 7  | stackoverflow | http://stackoverflow.com/ |   0 | IND      |+<span class="hljs-comment">----+---------------+---------------------------+-------+---------+</span></code></pre><p>下面是 “apps” APP 的数据：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM apps;+<span class="hljs-comment">----+------------+-------------------------+---------+</span>| id | app_name   | url                     | country |+<span class="hljs-comment">----+------------+-------------------------+---------+</span>|  1 | QQ APP     | http://im.qq.com/       | CN      ||  2 | 微博 APP   | http://weibo.com/        | CN      ||  3 | 淘宝 APP   | https://www.taobao.com/  | CN      |+<span class="hljs-comment">----+------------+-------------------------+---------+</span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-13-1-SQL-UNION-实例"><a href="#5-13-1-SQL-UNION-实例" class="headerlink" title="5.13.1 SQL UNION 实例"></a>5.13.1 SQL UNION 实例</h3><p>下面的 SQL 语句从 “Websites” 和 “apps” 表中选取所有不同的country（只有不同的值）：</p><pre><code class="hljs sql">mysql&gt; SELECT country FROM Websites    -&gt; UNION    -&gt; SELECT country FROM apps    -&gt; ORDER BY country;+<span class="hljs-comment">---------+</span>| country |+<span class="hljs-comment">---------+</span>| CN      || IND     || USA     |+<span class="hljs-comment">---------+  </span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p><strong>注释：</strong>UNION 不能用于列出两个表中所有的country。如果一些网站和APP来自同一个国家，每个国家只会列出一次。UNION 只会选取不同的值。请使用 UNION ALL 来选取重复的值！</p><h3 id="5-13-2-SQL-UNION-ALL-实例"><a href="#5-13-2-SQL-UNION-ALL-实例" class="headerlink" title="5.13.2 SQL UNION ALL 实例"></a>5.13.2 SQL UNION ALL 实例</h3><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取所有的country（也有重复的值）：</p><pre><code class="hljs sql">mysql&gt; SELECT country FROM Websites    -&gt; UNION ALL    -&gt; SELECT country FROM apps    -&gt; ORDER BY country;+<span class="hljs-comment">---------+</span>| country |+<span class="hljs-comment">---------+</span>| CN      || CN      || CN      || CN      || CN      || IND     || USA     || USA     || USA     |+<span class="hljs-comment">---------+  </span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-13-3-带有-WHERE-的-SQL-UNION-ALL"><a href="#5-13-3-带有-WHERE-的-SQL-UNION-ALL" class="headerlink" title="5.13.3 带有 WHERE 的 SQL UNION ALL"></a>5.13.3 带有 WHERE 的 SQL UNION ALL</h3><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取所有的中国(CN)的数据（也有重复的值）：</p><pre><code class="hljs sql">mysql&gt; SELECT country,name FROM Websites    -&gt; WHERE country=&#x27;CN&#x27;    -&gt; UNION ALL    -&gt; SELECT country,app_name FROM apps    -&gt; WHERE country=&#x27;CN&#x27;    -&gt; ORDER BY country;+<span class="hljs-comment">---------+--------------+</span>| country |    name      |+<span class="hljs-comment">---------+--------------+</span>| CN      |   淘宝        || CN      |   QQ APP     || CN      |   菜鸟        || CN      |   微博 APP    || CN      |   微博        || CN      |   淘宝 APP    |+<span class="hljs-comment">---------+--------------+  </span>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-14-MySQL排序"><a href="#5-14-MySQL排序" class="headerlink" title="5.14 MySQL排序"></a>5.14 MySQL排序</h2><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。<br>如果我们需要对读取的数据进行排序，我们就可以使用 MySQL 的 ORDER BY 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p><p><strong>语法</strong></p><p>以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据：</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> field1, [field2...] [<span class="hljs-keyword">ASC</span> [<span class="hljs-keyword">DESC</span>]]</code></pre><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul><p><strong>实例</strong></p><p>演示<strong>test_tbl</strong>数据表</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_tbl;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>将<strong>test_tbl</strong>通过<strong>age</strong>升序排列：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_tbl ORDER BY age ASC;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  6 | nv JI    |  18 | W   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  4 | juju GOU |  26 | M   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><p>将<strong>test_tbl</strong>通过<strong>age</strong>降序排列：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_tbl ORDER BY age DESC;+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>| id | name     | age | sex | submission_date |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>|  4 | juju GOU |  26 | M   | 2018-01-22      ||  1 | pangzi W |  25 | M   | 2018-01-22      ||  2 | san A    |  25 | M   | 2018-01-22      ||  3 | sao A    |  24 | M   | 2018-01-22      ||  6 | nv JI    |  18 | W   | 2018-01-22      |+<span class="hljs-comment">----+----------+-----+-----+-----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-15-MySQL-GROUP-BY语句（分组）"><a href="#5-15-MySQL-GROUP-BY语句（分组）" class="headerlink" title="5.15 MySQL GROUP BY语句（分组）"></a>5.15 MySQL GROUP BY语句（分组）</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组。在分组的列上我们可以使用 <strong>COUNT, SUM, AVG</strong>等函数。</p><p><strong>语法</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, <span class="hljs-keyword">function</span>(column_name)<span class="hljs-keyword">FROM</span> table_name<span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;</code></pre><p><strong>实例</strong></p><p>对employee_tbl数据表进行分组：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM employee_tbl;+<span class="hljs-comment">----+--------+---------------------+--------+</span>| id | name   | date                | singin |+<span class="hljs-comment">----+--------+---------------------+--------+</span>|  1 | 小明 | 2016-04-22 15:25:33 |      1 ||  2 | 小王 | 2016-04-20 15:25:47 |      3 ||  3 | 小丽 | 2016-04-19 15:26:02 |      2 ||  4 | 小王 | 2016-04-07 15:26:14 |      4 ||  5 | 小明 | 2016-04-11 15:26:40 |      4 ||  6 | 小明 | 2016-04-04 15:26:54 |      2 |+<span class="hljs-comment">----+--------+---------------------+--------+</span>6 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</p><pre><code class="hljs sql">mysql&gt; SELECT name, COUNT(*) FROM   employee_tbl GROUP BY name;+<span class="hljs-comment">--------+----------+</span>| name   | COUNT(*) |+<span class="hljs-comment">--------+----------+</span>| 小丽 |        1 || 小明 |        3 || 小王 |        2 |+<span class="hljs-comment">--------+----------+</span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><h3 id="5-15-1-使用-WITH-ROLLUP"><a href="#5-15-1-使用-WITH-ROLLUP" class="headerlink" title="5.15.1 使用 WITH ROLLUP"></a>5.15.1 使用 WITH ROLLUP</h3><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。</p><p>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：</p><pre><code class="hljs sql">mysql&gt; SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;+<span class="hljs-comment">--------+--------------+</span>| name   | singin_count |+<span class="hljs-comment">--------+--------------+</span>| 小丽 |            2 || 小明 |            7 || 小王 |            7 || NULL   |           16 |+<span class="hljs-comment">--------+--------------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><blockquote><p>其中记录 NULL 表示所有人的登录次数。</p></blockquote><p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：<code>select coalesce(a,b,c);</code><br>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。<br>以下实例中如果名字为空我们使用总数代替：</p><pre><code class="hljs sql">mysql&gt; SELECT coalesce(name, &#x27;总数&#x27;), SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;+<span class="hljs-comment">--------------------------+--------------+</span>| coalesce(name, &#x27;总数&#x27;) | singin_count |+<span class="hljs-comment">--------------------------+--------------+</span>| 小丽                   |            2 || 小明                   |            7 || 小王                   |            7 || 总数                   |           16 |+<span class="hljs-comment">--------------------------+--------------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><h2 id="5-16-MySQL连接的使用"><a href="#5-16-MySQL连接的使用" class="headerlink" title="5.16 MySQL连接的使用"></a>5.16 MySQL连接的使用</h2><p>在MySQL中，可以使用JOIN在两个或多个表中查询数据。<br>可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。<br>JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li><li><strong>LEFT JOIN（左连接）</strong>：获取左表所有记录，即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）</strong>： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul><p><strong>实例：</strong>使用菜鸟教程数据库</p><pre><code class="hljs sql">mysql&gt; use RUNOOB;Database changedmysql&gt; SELECT * FROM tcount_tbl;+<span class="hljs-comment">---------------+--------------+</span>| runoob_author | runoob_count |+<span class="hljs-comment">---------------+--------------+</span>| 菜鸟教程  | 10           || RUNOOB.COM    | 20           || Google        | 22           |+<span class="hljs-comment">---------------+--------------+</span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec) mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> runoob_tbl;+<span class="hljs-comment">-----------+---------------+---------------+-----------------+</span>| runoob_id | runoob_title  | runoob_author | submission_date |+<span class="hljs-comment">-----------+---------------+---------------+-----------------+</span>| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12              || 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12              || 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01         || 4         | 学习 sql | RUNOOB.COM    | 2016-03-06         || 5         | 学习 C      | FK            | 2017-04-05         |+<span class="hljs-comment">-----------+---------------+---------------+-----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><h3 id="5-16-1-MySQL-INNER-JOIN"><a href="#5-16-1-MySQL-INNER-JOIN" class="headerlink" title="5.16.1 MySQL INNER JOIN"></a>5.16.1 MySQL INNER JOIN</h3><p>使用MySQL的INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：</p><pre><code class="hljs sql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;+<span class="hljs-comment">-------------+-----------------+----------------+</span>| a.runoob_id | a.runoob_author | b.runoob_count |+<span class="hljs-comment">-------------+-----------------+----------------+</span>| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             |+<span class="hljs-comment">-------------+-----------------+----------------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>等价于使用** WHERE子句**：</p><pre><code class="hljs sql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;+<span class="hljs-comment">-------------+-----------------+----------------+</span>| a.runoob_id | a.runoob_author | b.runoob_count |+<span class="hljs-comment">-------------+-----------------+----------------+</span>| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             |+<span class="hljs-comment">-------------+-----------------+----------------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><p><img src="/img/mysql/img_innerjoin.gif"></p><h3 id="5-16-2-MySQL-LEFT-JOIN"><a href="#5-16-2-MySQL-LEFT-JOIN" class="headerlink" title="5.16.2 MySQL LEFT JOIN"></a>5.16.2 MySQL LEFT JOIN</h3><p>MySQL left join 与 join 有所不同。 MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。</p><pre><code class="hljs sql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;+<span class="hljs-comment">-------------+-----------------+----------------+</span>| a.runoob_id | a.runoob_author | b.runoob_count |+<span class="hljs-comment">-------------+-----------------+----------------+</span>| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             || 5           | FK              | NULL           |+<span class="hljs-comment">-------------+-----------------+----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><p><img src="/img/mysql/img_leftjoin.gif"></p><h3 id="5-16-3-MySQL-RIGHT-JOIN"><a href="#5-16-3-MySQL-RIGHT-JOIN" class="headerlink" title="5.16.3 MySQL RIGHT JOIN"></a>5.16.3 MySQL RIGHT JOIN</h3><p>MySQL RIGHT JOIN 会读取右边数据表的全部数据，即便左边边表无对应数据。</p><pre><code class="hljs sql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;+<span class="hljs-comment">-------------+-----------------+----------------+</span>| a.runoob_id | a.runoob_author | b.runoob_count |+<span class="hljs-comment">-------------+-----------------+----------------+</span>| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             || NULL        | NULL            | 22             |+<span class="hljs-comment">-------------+-----------------+----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><p><img src="/img/mysql/img_rightjoin.gif"></p><h2 id="5-17-MySQL-NULL值处理"><a href="#5-17-MySQL-NULL值处理" class="headerlink" title="5.17 MySQL NULL值处理"></a>5.17 MySQL NULL值处理</h2><p>MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。<br>为了处理这种情况，MySQL提供了三大运算符:</p><ul><li><strong>IS NULL</strong>: 当列的值是 NULL,此运算符返回 true。</li><li><strong>IS NOT NULL</strong>: 当列的值不为 NULL, 运算符返回 true。</li><li><strong>&lt;=&gt;</strong>: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。</li></ul><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。<br>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false 。<br>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><p><strong>实例</strong></p><p>在数据库test中创建数据表test_NULL含有两列name，age，在age中插入NULL值。</p><pre><code class="hljs sql">mysql&gt; CREATE TABLE test_NULL( name CHAR(10) NOT NULL, age INT);Query OK, 0 rows affected (0.02 sec)mysql&gt; desc test_NULL;+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| Field | Type     | Null | Key | Default | Extra |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| name  | char(10) | NO   |     | NULL    |       || age   | int(11)  | YES  |     | NULL    |       |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test_NULL( <span class="hljs-keyword">name</span>,age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;LILI&#x27;</span>,<span class="hljs-number">20</span>);Query OK, 1 row affected (0.00 sec)mysql&gt; INSERT INTO test_NULL( name,age) VALUES (&#x27;LALA&#x27;,NULL);Query OK, 1 row affected (0.00 sec)mysql&gt; INSERT INTO test_NULL( name,age) VALUES (&#x27;FEIFEI&#x27;,NULL);Query OK, 1 row affected (0.00 sec)mysql&gt; INSERT INTO test_NULL( name,age) VALUES (&#x27;JIJI&#x27;,NULL);Query OK, 1 row affected (0.00 sec)mysql&gt; INSERT INTO test_NULL( name,age) VALUES (&#x27;GEGE&#x27;,25);Query OK, 1 row affected (0.00 sec)mysql&gt; SELECT * FROM test_NULL;+<span class="hljs-comment">--------+------+</span>| name   | age  |+<span class="hljs-comment">--------+------+</span>| LILI   |   20 || LALA   | NULL || FEIFEI | NULL || JIJI   | NULL || GEGE   |   25 |+<span class="hljs-comment">--------+------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>使用SELECT,WHERE查询NULL值用**=<strong>和</strong>！=**运算符是不起作用的：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_NULL WHERE age=NULL;Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_NULL <span class="hljs-keyword">WHERE</span> age!=<span class="hljs-literal">NULL</span>;Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>要查询表中age列为是否为NULL值的，必须使用<strong>IS NULL</strong>和<strong>IS NOT NULL</strong> ：</p><pre><code class="hljs sql">mysql&gt; SELECT * FROM test_NULL WHERE age is NULL;+<span class="hljs-comment">--------+------+</span>| name   | age  |+<span class="hljs-comment">--------+------+</span>| LALA   | NULL || FEIFEI | NULL || JIJI   | NULL |+<span class="hljs-comment">--------+------+</span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_NULL <span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">is</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;+<span class="hljs-comment">------+------+</span>| name | age  |+<span class="hljs-comment">------+------+</span>| LILI |   20 || GEGE |   25 |+<span class="hljs-comment">------+------+</span>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h2 id="5-18-MySQL正则表达式"><a href="#5-18-MySQL正则表达式" class="headerlink" title="5.18 MySQL正则表达式"></a>5.18 MySQL正则表达式</h2><p>下表中的正则模式可应用于 REGEXP 操作符中。</p><table><thead><tr><th align="center">模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，<br> ^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="center">$</td><td align="center">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，<br> $也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="center">.</td><td align="center">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，<br>请使用象 ‘[.\n]’ 的模式。</td></tr><tr><td align="center">[…]</td><td align="center">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="center">[^…]</td><td align="center">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td></tr><tr><td align="center">p1/p2/p3</td><td align="center">匹配 p1 或 p2 或 p3。例如，’z/food’ 能匹配 “z” 或 “food”。<br>‘(z/f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="center">*</td><td align="center">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="center">+</td><td align="center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，<br>但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="center">{n}</td><td align="center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，<br>但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="center">{n,m}</td><td align="center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td></tr></tbody></table><p><strong>实例</strong></p><p>在数据表name中查找名字时：<br>查找name字段中以‘st’为开头的所有数据：</p><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^st&#x27;;</code></pre><p>查找name字段中以‘ok’结尾的所有数据：</p><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;ok$&#x27;;</code></pre><p>查找name字段中包含‘mar’字符串的所有数据：</p><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;mar&#x27;;</code></pre><p>查找name字段中以元音字符开头或以‘ok’字符串结尾的所有数据：</p><pre><code class="hljs sql">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^[aeiou]|ok$&#x27;;</code></pre><h2 id="5-19-MySQL-ALTER命令"><a href="#5-19-MySQL-ALTER命令" class="headerlink" title="5.19 MySQL ALTER命令"></a>5.19 MySQL ALTER命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令。<br>先创建一张表testalter_tbl：</p><pre><code class="hljs sql">mysql&gt; CREATE TABLE testalter_tbl(i INT, C CHAR(10));Query OK, 0 rows affected (0.02 sec)mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| Field | Type     | Null | Key | Default | Extra |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| i     | int(11)  | YES  |     | NULL    |       || C     | char(10) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-19-1-删除，添加或修改字段"><a href="#5-19-1-删除，添加或修改字段" class="headerlink" title="5.19.1 删除，添加或修改字段"></a>5.19.1 删除，添加或修改字段</h3><ol><li>使用ALTER 命令及 DROP 子句来删除以上创建表的 i 字段：</li></ol><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl DROP i;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| Field | Type     | Null | Key | Default | Extra |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| C     | char(10) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p><strong>如果数据表中只剩余一个字段则无法使用DROP来删除字段。</strong></p><ol start="2"><li>使用 ADD 子句来向表 testalter_tbl 中添加 i 字段，并定义数据类型:</li></ol><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| Field | Type     | Null | Key | Default | Extra |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| C     | char(10) | YES  |     | NULL    |       || i     | int(11)  | YES  |     | NULL    |       |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>2 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>执行以上命令后，i 字段会自动添加到数据表字段的末尾。</p><ol start="3"><li>如果你需要指定新增字段的位置，可以使用MySQL提供的关键字 FIRST (设定位第一列)， AFTER 字段名（设定位于某个字段之后）:</li></ol><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ADD a INT FIRST;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| Field | Type     | Null | Key | Default | Extra |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| a     | int(11)  | YES  |     | NULL    |       || C     | char(10) | YES  |     | NULL    |       || i     | int(11)  | YES  |     | NULL    |       |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>3 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ADD</span> b <span class="hljs-built_in">INT</span> <span class="hljs-keyword">AFTER</span> a;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| Field | Type     | Null | Key | Default | Extra |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>| a     | int(11)  | YES  |     | NULL    |       || b     | int(11)  | YES  |     | NULL    |       || C     | char(10) | YES  |     | NULL    |       || i     | int(11)  | YES  |     | NULL    |       |+<span class="hljs-comment">-------+----------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-19-2-修改字段类型及名称"><a href="#5-19-2-修改字段类型及名称" class="headerlink" title="5.19.2 修改字段类型及名称"></a>5.19.2 修改字段类型及名称</h3><p>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</p><p><strong>实例：</strong>把字段 c 的类型从 CHAR(10) 改为 CHAR(1)，可以执行以下命令:</p><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(1);Query OK, 0 rows affected (0.01 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| Field | Type    | Null | Key | Default | Extra |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| a     | int(11) | YES  |     | NULL    |       || b     | int(11) | YES  |     | NULL    |       || c     | char(1) | YES  |     | NULL    |       || i     | int(11) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。<br><strong>实例：</strong>将字段i改为j并将数据类型改为BIGINT，再将BIGINT改为INT。</p><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| Field | Type    | Null | Key | Default | Extra |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| a     | int(11) | YES  |     | NULL    |       || b     | int(11) | YES  |     | NULL    |       || c     | char(1) | YES  |     | NULL    |       || i     | int(11) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">CHANGE</span> i j <span class="hljs-built_in">BIGINT</span>;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| Field | Type       | Null | Key | Default | Extra |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| a     | int(11)    | YES  |     | NULL    |       || b     | int(11)    | YES  |     | NULL    |       || c     | char(1)    | YES  |     | NULL    |       || j     | bigint(20) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">CHANGE</span> j j <span class="hljs-built_in">INT</span>;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| Field | Type    | Null | Key | Default | Extra |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| a     | int(11) | YES  |     | NULL    |       || b     | int(11) | YES  |     | NULL    |       || c     | char(1) | YES  |     | NULL    |       || j     | int(11) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-19-3-ALTER-TABLE-对-Null-值和默认值的影响"><a href="#5-19-3-ALTER-TABLE-对-Null-值和默认值的影响" class="headerlink" title="5.19.3 ALTER TABLE 对 Null 值和默认值的影响"></a>5.19.3 ALTER TABLE 对 Null 值和默认值的影响</h3><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。<br><strong>实例：</strong>指定字段 j 为 NOT NULL 且默认值为100 。</p><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| Field | Type    | Null | Key | Default | Extra |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>| a     | int(11) | YES  |     | NULL    |       || b     | int(11) | YES  |     | NULL    |       || c     | char(1) | YES  |     | NULL    |       || j     | int(11) | YES  |     | NULL    |       |+<span class="hljs-comment">-------+---------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl    -&gt; <span class="hljs-keyword">MODIFY</span> j <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">100</span>;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| Field | Type       | Null | Key | Default | Extra |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| a     | int(11)    | YES  |     | NULL    |       || b     | int(11)    | YES  |     | NULL    |       || c     | char(1)    | YES  |     | NULL    |       || j     | bigint(20) | NO   |     | 100     |       |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)</code></pre><p>如果不设置默认值，MySQL会自动设置该字段默认为 NULL。</p><h3 id="5-19-4-修改字段默认值"><a href="#5-19-4-修改字段默认值" class="headerlink" title="5.19.4 修改字段默认值"></a>5.19.4 修改字段默认值</h3><p>以使用 ALTER 来修改字段的默认值。<br><strong>实例：</strong></p><pre><code class="hljs sql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| Field | Type       | Null | Key | Default | Extra |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| a     | int(11)    | YES  |     | NULL    |       || b     | int(11)    | YES  |     | NULL    |       || c     | char(1)    | YES  |     | NULL    |       || j     | bigint(20) | NO   |     | 100     |       |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ALTER</span> a <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1000</span>;Query OK, 0 rows affected (0.01 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| Field | Type       | Null | Key | Default | Extra |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| a     | int(11)    | YES  |     | 1000    |       || b     | int(11)    | YES  |     | NULL    |       || c     | char(1)    | YES  |     | NULL    |       || j     | bigint(20) | NO   |     | 100     |       |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><p>使用 ALTER 命令及 DROP子句来删除字段的默认值。<br><strong>实例：</strong></p><pre><code class="hljs sql">mysql&gt; ALTER TABLE testalter_tbl ALTER j DROP DEFAULT;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW COLUMNS FROM testalter_tbl;+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| Field | Type       | Null | Key | Default | Extra |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>| a     | int(11)    | YES  |     | 1000    |       || b     | int(11)    | YES  |     | NULL    |       || c     | char(1)    | YES  |     | NULL    |       || j     | bigint(20) | NO   |     | NULL    |       |+<span class="hljs-comment">-------+------------+------+-----+---------+-------+</span>4 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-19-5-修改数据表类型"><a href="#5-19-5-修改数据表类型" class="headerlink" title="5.19.5 修改数据表类型"></a>5.19.5 修改数据表类型</h3><p>使用 ALTER 命令及 TYPE 子句修改数据表类型，将数据表testalter_tbl的类型改为MYSAM：<br><strong>注意：</strong>查看数据表类型可以使用 SHOW TABLE STATUS 语句。</p><pre><code class="hljs sql">mysql&gt; SHOW TABLE STATUS LIKE &#x27;testalter_tbl&#x27;\G;*************************** 1. row ***************************           Name: testalter_tbl         Engine: InnoDB        Version: 10     Row_format: Compact           Rows: 0 Avg_row_length: 0    Data_length: 16384Max_data_length: 0   Index_length: 0      Data_free: 0 Auto_increment: NULL    Create_time: 2018-01-24 11:06:35    Update_time: NULL     Check_time: NULL      Collation: latin1_swedish_ci       <span class="hljs-keyword">Checksum</span>: <span class="hljs-literal">NULL</span> Create_options:         <span class="hljs-keyword">Comment</span>: <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)mysql&gt; <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> testalter_tbl <span class="hljs-keyword">ENGINE</span>=MYISAM;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0mysql&gt; SHOW TABLE STATUS LIKE &#x27;testalter_tbl&#x27;\G;*************************** 1. row ***************************           Name: testalter_tbl         Engine: MyISAM        Version: 10     Row_format: Fixed           Rows: 0 Avg_row_length: 0    Data_length: 0Max_data_length: 5066549580791807   Index_length: 1024      Data_free: 0 Auto_increment: NULL    Create_time: 2018-01-24 11:17:33    Update_time: 2018-01-24 11:17:33     Check_time: NULL      Collation: latin1_swedish_ci       <span class="hljs-keyword">Checksum</span>: <span class="hljs-literal">NULL</span> Create_options:         <span class="hljs-keyword">Comment</span>: <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre><h3 id="5-19-6-修改表名"><a href="#5-19-6-修改表名" class="headerlink" title="5.19.6 修改表名"></a>5.19.6 修改表名</h3><p>如果需要修改数据表的名称，可以在 ALTER TABLE 语句中使用 RENAME 子句来实现。<br><strong>实例：</strong>修改表test_NULL为testnull_tbl:</p><pre><code class="hljs sql">mysql&gt; ALTER TABLE test_NULL RENAME TO testnull_tbl;Query OK, 0 rows affected (0.01 sec)mysql&gt; SHOW TABLES;+<span class="hljs-comment">----------------+</span>| Tables_in_test |+<span class="hljs-comment">----------------+</span>| bili           || test_tbl       || testalter_tbl  || testnull_tbl   || url            |+<span class="hljs-comment">----------------+</span>5 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUN M4000故障处理报告</title>
    <link href="/2017/02/22/SUN_M4000/"/>
    <url>/2017/02/22/SUN_M4000/</url>
    
    <content type="html"><![CDATA[<h1 id="１、故障摘要"><a href="#１、故障摘要" class="headerlink" title="１、故障摘要"></a>１、故障摘要</h1><p>发现M4000内存告警,原有64G内存，现在只识别32G</p><a id="more"></a><p><img src="/img/sun/SUN_M4000_DOWN.png"></p><h1 id="2、故障具体情况"><a href="#2、故障具体情况" class="headerlink" title="2、故障具体情况"></a>2、故障具体情况</h1><pre><code>XSCF&gt; showstatus </code></pre><p>错误日志</p><pre><code class="hljs bash">    MBU_A Status:Normal;        MEMB<span class="hljs-comment">#0 Status:Normal;</span>*           MEM<span class="hljs-comment">#0B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#1B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#2B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#3B Status:Deconfigured;</span>        MEMB<span class="hljs-comment">#1 Status:Normal;</span>*           MEM<span class="hljs-comment">#0B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#1B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#2B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#3B Status:Deconfigured;</span>        MEMB<span class="hljs-comment">#2 Status:Normal;</span>*           MEM<span class="hljs-comment">#0B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#1B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#2B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#3B Status:Deconfigured;</span>        MEMB<span class="hljs-comment">#3 Status:Normal;</span>*           MEM<span class="hljs-comment">#0B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#1B Status:Faulted;</span>*           MEM<span class="hljs-comment">#2B Status:Deconfigured;</span>*           MEM<span class="hljs-comment">#3B Status:Deconfigured;</span></code></pre><p>定位内存位置：</p><p>发现MEMA上的内存都为正常，内存MEMB上的内存报错，MEMB#3上的MEM#1B的状态为Faulted，说明这根内存损坏，其他内存受其影响导致降级。<br>(图是M5000机器)<br><img src="/img/sun/m5000_mem.png"></p><h1 id="3、故障分析及处理"><a href="#3、故障分析及处理" class="headerlink" title="3、故障分析及处理"></a>3、故障分析及处理</h1><ol><li><p>先将机器下电</p><p> XSCF&gt; shutdown -g0 -y<br>确认电源已关闭</p><p> XSCF&gt; poweroff -a<br>或者 <code>XSCF&gt;poweroff -d 00</code>关闭电源</p></li><li><p>根据上图找到内存具体位置</p></li><li><p>更换状态为Faulted的内存</p></li><li><p>重新上电，查看机器状态</p></li></ol><pre><code class="hljs bash">XSCF&gt; poweron -d 00XSCF&gt; showstatusNo failures found <span class="hljs-keyword">in</span> System Initialization.</code></pre><p>5.查看所有内存是否识别到</p><pre><code class="hljs bash">XSCF&gt; showhardconf</code></pre><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><p>1.更换内存，必须先将机器下电。</p><p>2.由于机器太重（~80kg），需要多人配合。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
